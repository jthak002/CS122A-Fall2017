
CS122A_Lab3_Part3_Slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  00000382  00000416  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000382  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800108  00800108  0000041e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000041e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000450  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  00000490  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b3f  00000000  00000000  00000508  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008e2  00000000  00000000  00001047  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004d7  00000000  00000000  00001929  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000104  00000000  00000000  00001e00  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000552  00000000  00000000  00001f04  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000be  00000000  00000000  00002456  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  00002514  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	6c c0       	rjmp	.+216    	; 0x10e <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	b8 c0       	rjmp	.+368    	; 0x1be <__vector_19>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 e8       	ldi	r30, 0x82	; 130
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a8 30       	cpi	r26, 0x08	; 8
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a8 e0       	ldi	r26, 0x08	; 8
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a2 31       	cpi	r26, 0x12	; 18
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	2f d1       	rcall	.+606    	; 0x322 <main>
  c4:	5c c1       	rjmp	.+696    	; 0x37e <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <TimerOn>:
void TimerOff(){
	TCCR1B = 0x00;
}

void TimerISR(){
	TimerFlag = 1;
  c8:	8b e0       	ldi	r24, 0x0B	; 11
  ca:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
  ce:	8d e7       	ldi	r24, 0x7D	; 125
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  d6:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
  da:	82 e0       	ldi	r24, 0x02	; 2
  dc:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
  e0:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
  e4:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
  e8:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <avr_timer_M>
  ec:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <avr_timer_M+0x1>
  f0:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <avr_timer_M+0x2>
  f4:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <avr_timer_M+0x3>
  f8:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <avr_timer_cntcurr>
  fc:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <avr_timer_cntcurr+0x1>
 100:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <avr_timer_cntcurr+0x2>
 104:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <avr_timer_cntcurr+0x3>
 108:	80 e8       	ldi	r24, 0x80	; 128
 10a:	8f bf       	out	0x3f, r24	; 63
 10c:	08 95       	ret

0000010e <__vector_13>:
}

ISR(TIMER1_COMPA_vect){
 10e:	1f 92       	push	r1
 110:	0f 92       	push	r0
 112:	0f b6       	in	r0, 0x3f	; 63
 114:	0f 92       	push	r0
 116:	11 24       	eor	r1, r1
 118:	8f 93       	push	r24
 11a:	9f 93       	push	r25
 11c:	af 93       	push	r26
 11e:	bf 93       	push	r27
	avr_timer_cntcurr--;
 120:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <avr_timer_cntcurr>
 124:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <avr_timer_cntcurr+0x1>
 128:	a0 91 0c 01 	lds	r26, 0x010C	; 0x80010c <avr_timer_cntcurr+0x2>
 12c:	b0 91 0d 01 	lds	r27, 0x010D	; 0x80010d <avr_timer_cntcurr+0x3>
 130:	01 97       	sbiw	r24, 0x01	; 1
 132:	a1 09       	sbc	r26, r1
 134:	b1 09       	sbc	r27, r1
 136:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <avr_timer_cntcurr>
 13a:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <avr_timer_cntcurr+0x1>
 13e:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <avr_timer_cntcurr+0x2>
 142:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <avr_timer_cntcurr+0x3>
	if (avr_timer_cntcurr == 0){
 146:	89 2b       	or	r24, r25
 148:	8a 2b       	or	r24, r26
 14a:	8b 2b       	or	r24, r27
 14c:	99 f4       	brne	.+38     	; 0x174 <__vector_13+0x66>
void TimerOff(){
	TCCR1B = 0x00;
}

void TimerISR(){
	TimerFlag = 1;
 14e:	81 e0       	ldi	r24, 0x01	; 1
 150:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <TimerFlag>

ISR(TIMER1_COMPA_vect){
	avr_timer_cntcurr--;
	if (avr_timer_cntcurr == 0){
		TimerISR();
		avr_timer_cntcurr = avr_timer_M;
 154:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <avr_timer_M>
 158:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <avr_timer_M+0x1>
 15c:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <avr_timer_M+0x2>
 160:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <avr_timer_M+0x3>
 164:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <avr_timer_cntcurr>
 168:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <avr_timer_cntcurr+0x1>
 16c:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <avr_timer_cntcurr+0x2>
 170:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <avr_timer_cntcurr+0x3>
		
	}
}
 174:	bf 91       	pop	r27
 176:	af 91       	pop	r26
 178:	9f 91       	pop	r25
 17a:	8f 91       	pop	r24
 17c:	0f 90       	pop	r0
 17e:	0f be       	out	0x3f, r0	; 63
 180:	0f 90       	pop	r0
 182:	1f 90       	pop	r1
 184:	18 95       	reti

00000186 <TimerSet>:

void TimerSet(unsigned long M){
	avr_timer_M = M;
 186:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <avr_timer_M>
 18a:	70 93 05 01 	sts	0x0105, r23	; 0x800105 <avr_timer_M+0x1>
 18e:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <avr_timer_M+0x2>
 192:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <avr_timer_M+0x3>
	avr_timer_cntcurr = avr_timer_M;
 196:	60 93 0a 01 	sts	0x010A, r22	; 0x80010a <avr_timer_cntcurr>
 19a:	70 93 0b 01 	sts	0x010B, r23	; 0x80010b <avr_timer_cntcurr+0x1>
 19e:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <avr_timer_cntcurr+0x2>
 1a2:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <avr_timer_cntcurr+0x3>
 1a6:	08 95       	ret

000001a8 <SPI_SlaveInit>:
#define DD_SCK 7
#define DD_SS 4
#define PORT_SPI PORTB

void SPI_SlaveInit(void){
    DDRB = (1 << 6);
 1a8:	80 e4       	ldi	r24, 0x40	; 64
 1aa:	84 b9       	out	0x04, r24	; 4
    SPCR = (1<<SPE) | (1<<SPIE);
 1ac:	80 ec       	ldi	r24, 0xC0	; 192
 1ae:	8c bd       	out	0x2c, r24	; 44
 1b0:	08 95       	ret

000001b2 <SPI_Transmit>:
}

unsigned char SPI_Transmit(unsigned char data){
    SPDR = data;
 1b2:	8e bd       	out	0x2e, r24	; 46
    while( !(SPSR & (1<<SPIF) ));
 1b4:	0d b4       	in	r0, 0x2d	; 45
 1b6:	07 fe       	sbrs	r0, 7
 1b8:	fd cf       	rjmp	.-6      	; 0x1b4 <SPI_Transmit+0x2>
    return SPDR;
 1ba:	8e b5       	in	r24, 0x2e	; 46
}
 1bc:	08 95       	ret

000001be <__vector_19>:

ISR(SPI_STC_vect){
 1be:	1f 92       	push	r1
 1c0:	0f 92       	push	r0
 1c2:	0f b6       	in	r0, 0x3f	; 63
 1c4:	0f 92       	push	r0
 1c6:	11 24       	eor	r1, r1
 1c8:	8f 93       	push	r24
    receivedData = SPDR;
 1ca:	8e b5       	in	r24, 0x2e	; 46
 1cc:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <receivedData>
    
};
 1d0:	8f 91       	pop	r24
 1d2:	0f 90       	pop	r0
 1d4:	0f be       	out	0x3f, r0	; 63
 1d6:	0f 90       	pop	r0
 1d8:	1f 90       	pop	r1
 1da:	18 95       	reti

000001dc <Tick>:
		default:
		break;
		
	}
	
	switch (state){	//State Actions
 1dc:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <state>
 1e0:	81 11       	cpse	r24, r1
 1e2:	30 c0       	rjmp	.+96     	; 0x244 <Tick+0x68>
		
		case Start:
			receivedData = SPI_Transmit(testChar);
 1e4:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <testChar>
 1e8:	e4 df       	rcall	.-56     	; 0x1b2 <SPI_Transmit>
 1ea:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <receivedData>
			pattern_mode=receivedData&0x0F;
 1ee:	98 2f       	mov	r25, r24
 1f0:	9f 70       	andi	r25, 0x0F	; 15
 1f2:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <pattern_mode>
            time_mode=(receivedData&0xF0)>>4;
 1f6:	82 95       	swap	r24
 1f8:	8f 70       	andi	r24, 0x0F	; 15
 1fa:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
            if(time_mode==1)
 1fe:	81 30       	cpi	r24, 0x01	; 1
 200:	21 f4       	brne	.+8      	; 0x20a <Tick+0x2e>
                period_length=40;
 202:	88 e2       	ldi	r24, 0x28	; 40
 204:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <period_length>
 208:	08 95       	ret
            else if(time_mode==2)
 20a:	82 30       	cpi	r24, 0x02	; 2
 20c:	21 f4       	brne	.+8      	; 0x216 <Tick+0x3a>
                period_length=20;
 20e:	84 e1       	ldi	r24, 0x14	; 20
 210:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <period_length>
 214:	08 95       	ret
            else if(time_mode==3)
 216:	83 30       	cpi	r24, 0x03	; 3
 218:	21 f4       	brne	.+8      	; 0x222 <Tick+0x46>
                period_length=10;
 21a:	8a e0       	ldi	r24, 0x0A	; 10
 21c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <period_length>
 220:	08 95       	ret
            else if(time_mode==4)
 222:	84 30       	cpi	r24, 0x04	; 4
 224:	21 f4       	brne	.+8      	; 0x22e <Tick+0x52>
                period_length=5;
 226:	85 e0       	ldi	r24, 0x05	; 5
 228:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <period_length>
 22c:	08 95       	ret
            else if(time_mode==5)
 22e:	85 30       	cpi	r24, 0x05	; 5
 230:	21 f4       	brne	.+8      	; 0x23a <Tick+0x5e>
                period_length=2;
 232:	82 e0       	ldi	r24, 0x02	; 2
 234:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <period_length>
 238:	08 95       	ret
            else if(time_mode==6)
 23a:	86 30       	cpi	r24, 0x06	; 6
 23c:	19 f4       	brne	.+6      	; 0x244 <Tick+0x68>
                period_length=1;
 23e:	81 e0       	ldi	r24, 0x01	; 1
 240:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <period_length>
 244:	08 95       	ret

00000246 <Tick_SM1>:
	}
}

enum sm_pattern1{start1,state_11,state_12} sm1;
void Tick_SM1(){
    switch(sm1){
 246:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <sm1>
 24a:	81 30       	cpi	r24, 0x01	; 1
 24c:	41 f0       	breq	.+16     	; 0x25e <Tick_SM1+0x18>
 24e:	18 f0       	brcs	.+6      	; 0x256 <Tick_SM1+0x10>
 250:	82 30       	cpi	r24, 0x02	; 2
 252:	a9 f0       	breq	.+42     	; 0x27e <Tick_SM1+0x38>
 254:	24 c0       	rjmp	.+72     	; 0x29e <Tick_SM1+0x58>
        case start1:
            sm1=state_11;
 256:	81 e0       	ldi	r24, 0x01	; 1
 258:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <sm1>
            break;
 25c:	25 c0       	rjmp	.+74     	; 0x2a8 <Tick_SM1+0x62>
        case state_11:
            if(counter<period_length)
 25e:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end>
 262:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <period_length>
 266:	89 17       	cp	r24, r25
 268:	20 f4       	brcc	.+8      	; 0x272 <Tick_SM1+0x2c>
                counter++;
 26a:	8f 5f       	subi	r24, 0xFF	; 255
 26c:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__data_end>
 270:	1b c0       	rjmp	.+54     	; 0x2a8 <Tick_SM1+0x62>
            else{
                counter=0;
 272:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__data_end>
                sm1=state_12;
 276:	82 e0       	ldi	r24, 0x02	; 2
 278:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <sm1>
 27c:	18 c0       	rjmp	.+48     	; 0x2ae <Tick_SM1+0x68>
            }
            break;
        case state_12:
            if(counter<period_length)
 27e:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end>
 282:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <period_length>
 286:	89 17       	cp	r24, r25
 288:	20 f4       	brcc	.+8      	; 0x292 <Tick_SM1+0x4c>
                counter++;
 28a:	8f 5f       	subi	r24, 0xFF	; 255
 28c:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__data_end>
 290:	0e c0       	rjmp	.+28     	; 0x2ae <Tick_SM1+0x68>
            else{
                counter=0;
 292:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__data_end>
                sm1=state_11;
 296:	81 e0       	ldi	r24, 0x01	; 1
 298:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <sm1>
 29c:	05 c0       	rjmp	.+10     	; 0x2a8 <Tick_SM1+0x62>
            }
            break;
        default:break;
    }
    switch(sm1){
 29e:	81 30       	cpi	r24, 0x01	; 1
 2a0:	19 f0       	breq	.+6      	; 0x2a8 <Tick_SM1+0x62>
 2a2:	82 30       	cpi	r24, 0x02	; 2
 2a4:	31 f4       	brne	.+12     	; 0x2b2 <Tick_SM1+0x6c>
 2a6:	03 c0       	rjmp	.+6      	; 0x2ae <Tick_SM1+0x68>
        case state_11:
            PORTD=0xF0;
 2a8:	80 ef       	ldi	r24, 0xF0	; 240
 2aa:	8b b9       	out	0x0b, r24	; 11
            break;
 2ac:	08 95       	ret
        case state_12:
            PORTD=0x0F;
 2ae:	8f e0       	ldi	r24, 0x0F	; 15
 2b0:	8b b9       	out	0x0b, r24	; 11
 2b2:	08 95       	ret

000002b4 <Tick_SM2>:
    }
}

enum sm_pattern2{start2,state_21,state_22} sm2;
void Tick_SM2(){
    switch(sm2){
 2b4:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <sm2>
 2b8:	81 30       	cpi	r24, 0x01	; 1
 2ba:	41 f0       	breq	.+16     	; 0x2cc <Tick_SM2+0x18>
 2bc:	18 f0       	brcs	.+6      	; 0x2c4 <Tick_SM2+0x10>
 2be:	82 30       	cpi	r24, 0x02	; 2
 2c0:	a9 f0       	breq	.+42     	; 0x2ec <Tick_SM2+0x38>
 2c2:	24 c0       	rjmp	.+72     	; 0x30c <Tick_SM2+0x58>
        case start2:
        sm2=state_21;
 2c4:	81 e0       	ldi	r24, 0x01	; 1
 2c6:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <sm2>
        break;
 2ca:	25 c0       	rjmp	.+74     	; 0x316 <Tick_SM2+0x62>
        case state_21:
        if(counter<period_length)
 2cc:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end>
 2d0:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <period_length>
 2d4:	89 17       	cp	r24, r25
 2d6:	20 f4       	brcc	.+8      	; 0x2e0 <Tick_SM2+0x2c>
        counter++;
 2d8:	8f 5f       	subi	r24, 0xFF	; 255
 2da:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__data_end>
 2de:	1b c0       	rjmp	.+54     	; 0x316 <Tick_SM2+0x62>
        else{
            counter=0;
 2e0:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__data_end>
            sm2=state_22;
 2e4:	82 e0       	ldi	r24, 0x02	; 2
 2e6:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <sm2>
 2ea:	18 c0       	rjmp	.+48     	; 0x31c <Tick_SM2+0x68>
        }
        break;
        case state_22:
        if(counter<period_length)
 2ec:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end>
 2f0:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <period_length>
 2f4:	89 17       	cp	r24, r25
 2f6:	20 f4       	brcc	.+8      	; 0x300 <Tick_SM2+0x4c>
        counter++;
 2f8:	8f 5f       	subi	r24, 0xFF	; 255
 2fa:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__data_end>
 2fe:	0e c0       	rjmp	.+28     	; 0x31c <Tick_SM2+0x68>
        else{
            counter=0;
 300:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__data_end>
            sm2=state_21;
 304:	81 e0       	ldi	r24, 0x01	; 1
 306:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <sm2>
 30a:	05 c0       	rjmp	.+10     	; 0x316 <Tick_SM2+0x62>
        }
        break;
        default:break;
    }
    switch(sm2){
 30c:	81 30       	cpi	r24, 0x01	; 1
 30e:	19 f0       	breq	.+6      	; 0x316 <Tick_SM2+0x62>
 310:	82 30       	cpi	r24, 0x02	; 2
 312:	31 f4       	brne	.+12     	; 0x320 <Tick_SM2+0x6c>
 314:	03 c0       	rjmp	.+6      	; 0x31c <Tick_SM2+0x68>
        case state_21:
        PORTD=0xAA;
 316:	8a ea       	ldi	r24, 0xAA	; 170
 318:	8b b9       	out	0x0b, r24	; 11
        break;
 31a:	08 95       	ret
        case state_22:
        PORTD=0x66;
 31c:	86 e6       	ldi	r24, 0x66	; 102
 31e:	8b b9       	out	0x0b, r24	; 11
 320:	08 95       	ret

00000322 <main>:
        default:break;
    }
} 
int main(void)
{
	DDRD=0xFF;PORTD=0x00;
 322:	8f ef       	ldi	r24, 0xFF	; 255
 324:	8a b9       	out	0x0a, r24	; 10
 326:	1b b8       	out	0x0b, r1	; 11
	DDRB=0x00;PORTB=0xFF;
 328:	14 b8       	out	0x04, r1	; 4
 32a:	85 b9       	out	0x05, r24	; 5
	
	TimerSet(50);
 32c:	62 e3       	ldi	r22, 0x32	; 50
 32e:	70 e0       	ldi	r23, 0x00	; 0
 330:	80 e0       	ldi	r24, 0x00	; 0
 332:	90 e0       	ldi	r25, 0x00	; 0
	TimerOn();
 334:	28 df       	rcall	.-432    	; 0x186 <TimerSet>
 336:	c8 de       	rcall	.-624    	; 0xc8 <TimerOn>
	
	state = Start;
 338:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <state>
	sm1=start1;
 33c:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <sm1>
    sm2=start2;
	SPI_SlaveInit();
 340:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <sm2>
	
	while(1)
	{
		Tick();
 344:	31 df       	rcall	.-414    	; 0x1a8 <SPI_SlaveInit>
		switch(pattern_mode){
 346:	4a df       	rcall	.-364    	; 0x1dc <Tick>
 348:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <pattern_mode>
 34c:	82 30       	cpi	r24, 0x02	; 2
 34e:	59 f0       	breq	.+22     	; 0x366 <main+0x44>
 350:	18 f4       	brcc	.+6      	; 0x358 <main+0x36>
 352:	81 30       	cpi	r24, 0x01	; 1
 354:	31 f0       	breq	.+12     	; 0x362 <main+0x40>
 356:	0c c0       	rjmp	.+24     	; 0x370 <main+0x4e>
 358:	83 30       	cpi	r24, 0x03	; 3
            case 1:
                Tick_SM1();
                break;
            case 2:
                Tick_SM2();
 35a:	39 f0       	breq	.+14     	; 0x36a <main+0x48>
 35c:	84 30       	cpi	r24, 0x04	; 4
                break;
 35e:	39 f0       	breq	.+14     	; 0x36e <main+0x4c>
            case 3:
                Tick_SM1();
 360:	07 c0       	rjmp	.+14     	; 0x370 <main+0x4e>
 362:	71 df       	rcall	.-286    	; 0x246 <Tick_SM1>
                break;
 364:	05 c0       	rjmp	.+10     	; 0x370 <main+0x4e>
            case 4:
                Tick_SM2();
 366:	a6 df       	rcall	.-180    	; 0x2b4 <Tick_SM2>
 368:	03 c0       	rjmp	.+6      	; 0x370 <main+0x4e>
                break;
             default:break;
        }
		while(!TimerFlag);
 36a:	6d df       	rcall	.-294    	; 0x246 <Tick_SM1>
 36c:	01 c0       	rjmp	.+2      	; 0x370 <main+0x4e>
 36e:	a2 df       	rcall	.-188    	; 0x2b4 <Tick_SM2>
 370:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <TimerFlag>
		TimerFlag = 0;
 374:	88 23       	and	r24, r24
	}
 376:	e1 f3       	breq	.-8      	; 0x370 <main+0x4e>
 378:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <TimerFlag>
 37c:	e4 cf       	rjmp	.-56     	; 0x346 <main+0x24>

0000037e <_exit>:
 37e:	f8 94       	cli

00000380 <__stop_program>:
 380:	ff cf       	rjmp	.-2      	; 0x380 <__stop_program>
