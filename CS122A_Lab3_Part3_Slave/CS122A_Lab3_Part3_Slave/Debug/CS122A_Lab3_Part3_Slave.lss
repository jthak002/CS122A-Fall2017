
CS122A_Lab3_Part3_Slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  0000057e  00000612  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000057e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  00800108  00800108  0000061a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000061a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000064c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  0000068c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000bea  00000000  00000000  00000714  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008ca  00000000  00000000  000012fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000068b  00000000  00000000  00001bc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000124  00000000  00000000  00002254  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005e4  00000000  00000000  00002378  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000be  00000000  00000000  0000295c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  00002a1a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	56 c0       	rjmp	.+172    	; 0xae <__ctors_end>
   2:	00 00       	nop
   4:	71 c0       	rjmp	.+226    	; 0xe8 <__bad_interrupt>
   6:	00 00       	nop
   8:	6f c0       	rjmp	.+222    	; 0xe8 <__bad_interrupt>
   a:	00 00       	nop
   c:	6d c0       	rjmp	.+218    	; 0xe8 <__bad_interrupt>
   e:	00 00       	nop
  10:	6b c0       	rjmp	.+214    	; 0xe8 <__bad_interrupt>
  12:	00 00       	nop
  14:	69 c0       	rjmp	.+210    	; 0xe8 <__bad_interrupt>
  16:	00 00       	nop
  18:	67 c0       	rjmp	.+206    	; 0xe8 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	65 c0       	rjmp	.+202    	; 0xe8 <__bad_interrupt>
  1e:	00 00       	nop
  20:	63 c0       	rjmp	.+198    	; 0xe8 <__bad_interrupt>
  22:	00 00       	nop
  24:	61 c0       	rjmp	.+194    	; 0xe8 <__bad_interrupt>
  26:	00 00       	nop
  28:	5f c0       	rjmp	.+190    	; 0xe8 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	5d c0       	rjmp	.+186    	; 0xe8 <__bad_interrupt>
  2e:	00 00       	nop
  30:	5b c0       	rjmp	.+182    	; 0xe8 <__bad_interrupt>
  32:	00 00       	nop
  34:	7d c0       	rjmp	.+250    	; 0x130 <__vector_13>
  36:	00 00       	nop
  38:	57 c0       	rjmp	.+174    	; 0xe8 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	55 c0       	rjmp	.+170    	; 0xe8 <__bad_interrupt>
  3e:	00 00       	nop
  40:	53 c0       	rjmp	.+166    	; 0xe8 <__bad_interrupt>
  42:	00 00       	nop
  44:	51 c0       	rjmp	.+162    	; 0xe8 <__bad_interrupt>
  46:	00 00       	nop
  48:	4f c0       	rjmp	.+158    	; 0xe8 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	c3 c0       	rjmp	.+390    	; 0x1d4 <__vector_19>
  4e:	00 00       	nop
  50:	4b c0       	rjmp	.+150    	; 0xe8 <__bad_interrupt>
  52:	00 00       	nop
  54:	49 c0       	rjmp	.+146    	; 0xe8 <__bad_interrupt>
  56:	00 00       	nop
  58:	47 c0       	rjmp	.+142    	; 0xe8 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	45 c0       	rjmp	.+138    	; 0xe8 <__bad_interrupt>
  5e:	00 00       	nop
  60:	43 c0       	rjmp	.+134    	; 0xe8 <__bad_interrupt>
  62:	00 00       	nop
  64:	41 c0       	rjmp	.+130    	; 0xe8 <__bad_interrupt>
  66:	00 00       	nop
  68:	3f c0       	rjmp	.+126    	; 0xe8 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	3d c0       	rjmp	.+122    	; 0xe8 <__bad_interrupt>
  6e:	00 00       	nop
  70:	3b c0       	rjmp	.+118    	; 0xe8 <__bad_interrupt>
  72:	00 00       	nop
  74:	39 c0       	rjmp	.+114    	; 0xe8 <__bad_interrupt>
  76:	00 00       	nop
  78:	37 c0       	rjmp	.+110    	; 0xe8 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	35 c0       	rjmp	.+106    	; 0xe8 <__bad_interrupt>
  7e:	00 00       	nop
  80:	33 c0       	rjmp	.+102    	; 0xe8 <__bad_interrupt>
  82:	00 00       	nop
  84:	31 c0       	rjmp	.+98     	; 0xe8 <__bad_interrupt>
  86:	00 00       	nop
  88:	2f c0       	rjmp	.+94     	; 0xe8 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	dc 01       	movw	r26, r24
  8e:	e0 01       	movw	r28, r0
  90:	f0 01       	movw	r30, r0
  92:	00 02       	muls	r16, r16
  94:	10 02       	muls	r17, r16
  96:	20 02       	muls	r18, r16
  98:	30 02       	muls	r19, r16
  9a:	40 02       	muls	r20, r16
  9c:	50 02       	muls	r21, r16
  9e:	6a 02       	muls	r22, r26
  a0:	6d 02       	muls	r22, r29
  a2:	70 02       	muls	r23, r16
  a4:	73 02       	muls	r23, r19
  a6:	76 02       	muls	r23, r22
  a8:	79 02       	muls	r23, r25
  aa:	7c 02       	muls	r23, r28
  ac:	7f 02       	muls	r23, r31

000000ae <__ctors_end>:
  ae:	11 24       	eor	r1, r1
  b0:	1f be       	out	0x3f, r1	; 63
  b2:	cf ef       	ldi	r28, 0xFF	; 255
  b4:	d0 e4       	ldi	r29, 0x40	; 64
  b6:	de bf       	out	0x3e, r29	; 62
  b8:	cd bf       	out	0x3d, r28	; 61

000000ba <__do_copy_data>:
  ba:	11 e0       	ldi	r17, 0x01	; 1
  bc:	a0 e0       	ldi	r26, 0x00	; 0
  be:	b1 e0       	ldi	r27, 0x01	; 1
  c0:	ee e7       	ldi	r30, 0x7E	; 126
  c2:	f5 e0       	ldi	r31, 0x05	; 5
  c4:	00 e0       	ldi	r16, 0x00	; 0
  c6:	0b bf       	out	0x3b, r16	; 59
  c8:	02 c0       	rjmp	.+4      	; 0xce <__do_copy_data+0x14>
  ca:	07 90       	elpm	r0, Z+
  cc:	0d 92       	st	X+, r0
  ce:	a8 30       	cpi	r26, 0x08	; 8
  d0:	b1 07       	cpc	r27, r17
  d2:	d9 f7       	brne	.-10     	; 0xca <__do_copy_data+0x10>

000000d4 <__do_clear_bss>:
  d4:	21 e0       	ldi	r18, 0x01	; 1
  d6:	a8 e0       	ldi	r26, 0x08	; 8
  d8:	b1 e0       	ldi	r27, 0x01	; 1
  da:	01 c0       	rjmp	.+2      	; 0xde <.do_clear_bss_start>

000000dc <.do_clear_bss_loop>:
  dc:	1d 92       	st	X+, r1

000000de <.do_clear_bss_start>:
  de:	a4 31       	cpi	r26, 0x14	; 20
  e0:	b2 07       	cpc	r27, r18
  e2:	e1 f7       	brne	.-8      	; 0xdc <.do_clear_bss_loop>
  e4:	0f d2       	rcall	.+1054   	; 0x504 <main>
  e6:	49 c2       	rjmp	.+1170   	; 0x57a <_exit>

000000e8 <__bad_interrupt>:
  e8:	8b cf       	rjmp	.-234    	; 0x0 <__vectors>

000000ea <TimerOn>:

unsigned char SPI_Transmit(unsigned char data){
    SPDR = data;
    while( !(SPSR & (1<<SPIF) ));
    return SPDR;
}
  ea:	8b e0       	ldi	r24, 0x0B	; 11
  ec:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
  f0:	8d e7       	ldi	r24, 0x7D	; 125
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  f8:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
  fc:	82 e0       	ldi	r24, 0x02	; 2
  fe:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 102:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 106:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 10a:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <avr_timer_M>
 10e:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <avr_timer_M+0x1>
 112:	a0 91 05 01 	lds	r26, 0x0105	; 0x800105 <avr_timer_M+0x2>
 116:	b0 91 06 01 	lds	r27, 0x0106	; 0x800106 <avr_timer_M+0x3>
 11a:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <avr_timer_cntcurr>
 11e:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <avr_timer_cntcurr+0x1>
 122:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <avr_timer_cntcurr+0x2>
 126:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <avr_timer_cntcurr+0x3>
 12a:	80 e8       	ldi	r24, 0x80	; 128
 12c:	8f bf       	out	0x3f, r24	; 63
 12e:	08 95       	ret

00000130 <__vector_13>:
 130:	1f 92       	push	r1
 132:	0f 92       	push	r0
 134:	0f b6       	in	r0, 0x3f	; 63
 136:	0f 92       	push	r0
 138:	11 24       	eor	r1, r1
 13a:	8f 93       	push	r24
 13c:	9f 93       	push	r25
 13e:	af 93       	push	r26
 140:	bf 93       	push	r27
 142:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <avr_timer_cntcurr>
 146:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <avr_timer_cntcurr+0x1>
 14a:	a0 91 0c 01 	lds	r26, 0x010C	; 0x80010c <avr_timer_cntcurr+0x2>
 14e:	b0 91 0d 01 	lds	r27, 0x010D	; 0x80010d <avr_timer_cntcurr+0x3>
 152:	01 97       	sbiw	r24, 0x01	; 1
 154:	a1 09       	sbc	r26, r1
 156:	b1 09       	sbc	r27, r1
 158:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <avr_timer_cntcurr>
 15c:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <avr_timer_cntcurr+0x1>
 160:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <avr_timer_cntcurr+0x2>
 164:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <avr_timer_cntcurr+0x3>
 168:	89 2b       	or	r24, r25
 16a:	8a 2b       	or	r24, r26
 16c:	8b 2b       	or	r24, r27
 16e:	99 f4       	brne	.+38     	; 0x196 <__vector_13+0x66>
 170:	81 e0       	ldi	r24, 0x01	; 1
 172:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <TimerFlag>
 176:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <avr_timer_M>
 17a:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <avr_timer_M+0x1>
 17e:	a0 91 05 01 	lds	r26, 0x0105	; 0x800105 <avr_timer_M+0x2>
 182:	b0 91 06 01 	lds	r27, 0x0106	; 0x800106 <avr_timer_M+0x3>
 186:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <avr_timer_cntcurr>
 18a:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <avr_timer_cntcurr+0x1>
 18e:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <avr_timer_cntcurr+0x2>
 192:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <avr_timer_cntcurr+0x3>
 196:	bf 91       	pop	r27
 198:	af 91       	pop	r26
 19a:	9f 91       	pop	r25
 19c:	8f 91       	pop	r24
 19e:	0f 90       	pop	r0
 1a0:	0f be       	out	0x3f, r0	; 63
 1a2:	0f 90       	pop	r0
 1a4:	1f 90       	pop	r1
 1a6:	18 95       	reti

000001a8 <TimerSet>:
 1a8:	60 93 03 01 	sts	0x0103, r22	; 0x800103 <avr_timer_M>
 1ac:	70 93 04 01 	sts	0x0104, r23	; 0x800104 <avr_timer_M+0x1>
 1b0:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <avr_timer_M+0x2>
 1b4:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <avr_timer_M+0x3>
 1b8:	60 93 0a 01 	sts	0x010A, r22	; 0x80010a <avr_timer_cntcurr>
 1bc:	70 93 0b 01 	sts	0x010B, r23	; 0x80010b <avr_timer_cntcurr+0x1>
 1c0:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <avr_timer_cntcurr+0x2>
 1c4:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <avr_timer_cntcurr+0x3>
 1c8:	08 95       	ret

000001ca <SPI_SlaveInit>:
 1ca:	80 e4       	ldi	r24, 0x40	; 64
 1cc:	84 b9       	out	0x04, r24	; 4
 1ce:	80 ec       	ldi	r24, 0xC0	; 192
 1d0:	8c bd       	out	0x2c, r24	; 44
 1d2:	08 95       	ret

000001d4 <__vector_19>:

ISR(SPI_STC_vect){
 1d4:	1f 92       	push	r1
 1d6:	0f 92       	push	r0
 1d8:	0f b6       	in	r0, 0x3f	; 63
 1da:	0f 92       	push	r0
 1dc:	11 24       	eor	r1, r1
 1de:	8f 93       	push	r24
    receivedData = SPDR;
 1e0:	8e b5       	in	r24, 0x2e	; 46
 1e2:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <receivedData>
    
};
 1e6:	8f 91       	pop	r24
 1e8:	0f 90       	pop	r0
 1ea:	0f be       	out	0x3f, r0	; 63
 1ec:	0f 90       	pop	r0
 1ee:	1f 90       	pop	r1
 1f0:	18 95       	reti

000001f2 <Tick>:
		default:
		break;
		
	}
	
	switch (state){	//State Actions
 1f2:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <state>
 1f6:	81 11       	cpse	r24, r1
 1f8:	2d c0       	rjmp	.+90     	; 0x254 <Tick+0x62>
		
		case Start:
			//receivedData = SPI_Transmit(testChar);
			pattern_mode=receivedData&0x0F;
 1fa:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <receivedData>
 1fe:	98 2f       	mov	r25, r24
 200:	9f 70       	andi	r25, 0x0F	; 15
 202:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <pattern_mode>
            time_mode=(receivedData&0xF0)>>4;
 206:	82 95       	swap	r24
 208:	8f 70       	andi	r24, 0x0F	; 15
 20a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
            if(time_mode==1)
 20e:	81 30       	cpi	r24, 0x01	; 1
 210:	21 f4       	brne	.+8      	; 0x21a <Tick+0x28>
                period_length=40;
 212:	88 e2       	ldi	r24, 0x28	; 40
 214:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <period_length>
 218:	08 95       	ret
            else if(time_mode==2)
 21a:	82 30       	cpi	r24, 0x02	; 2
 21c:	21 f4       	brne	.+8      	; 0x226 <Tick+0x34>
                period_length=20;
 21e:	84 e1       	ldi	r24, 0x14	; 20
 220:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <period_length>
 224:	08 95       	ret
            else if(time_mode==3)
 226:	83 30       	cpi	r24, 0x03	; 3
 228:	21 f4       	brne	.+8      	; 0x232 <Tick+0x40>
                period_length=10;
 22a:	8a e0       	ldi	r24, 0x0A	; 10
 22c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <period_length>
 230:	08 95       	ret
            else if(time_mode==4)
 232:	84 30       	cpi	r24, 0x04	; 4
 234:	21 f4       	brne	.+8      	; 0x23e <Tick+0x4c>
                period_length=5;
 236:	85 e0       	ldi	r24, 0x05	; 5
 238:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <period_length>
 23c:	08 95       	ret
            else if(time_mode==5)
 23e:	85 30       	cpi	r24, 0x05	; 5
 240:	21 f4       	brne	.+8      	; 0x24a <Tick+0x58>
                period_length=2;
 242:	82 e0       	ldi	r24, 0x02	; 2
 244:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <period_length>
 248:	08 95       	ret
            else if(time_mode==6)
 24a:	86 30       	cpi	r24, 0x06	; 6
 24c:	19 f4       	brne	.+6      	; 0x254 <Tick+0x62>
                period_length=1;
 24e:	81 e0       	ldi	r24, 0x01	; 1
 250:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <period_length>
 254:	08 95       	ret

00000256 <Tick_SM1>:
	}
}

enum sm_pattern1{start1,state_11,state_12} sm1;
void Tick_SM1(){
    switch(sm1){
 256:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <sm1>
 25a:	81 30       	cpi	r24, 0x01	; 1
 25c:	41 f0       	breq	.+16     	; 0x26e <Tick_SM1+0x18>
 25e:	18 f0       	brcs	.+6      	; 0x266 <Tick_SM1+0x10>
 260:	82 30       	cpi	r24, 0x02	; 2
 262:	a9 f0       	breq	.+42     	; 0x28e <Tick_SM1+0x38>
 264:	24 c0       	rjmp	.+72     	; 0x2ae <Tick_SM1+0x58>
        case start1:
            sm1=state_11;
 266:	81 e0       	ldi	r24, 0x01	; 1
 268:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <sm1>
            break;
 26c:	25 c0       	rjmp	.+74     	; 0x2b8 <Tick_SM1+0x62>
        case state_11:
            if(counter<period_length)
 26e:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end>
 272:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <period_length>
 276:	89 17       	cp	r24, r25
 278:	20 f4       	brcc	.+8      	; 0x282 <Tick_SM1+0x2c>
                counter++;
 27a:	8f 5f       	subi	r24, 0xFF	; 255
 27c:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__data_end>
 280:	1b c0       	rjmp	.+54     	; 0x2b8 <Tick_SM1+0x62>
            else{
                counter=0;
 282:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__data_end>
                sm1=state_12;
 286:	82 e0       	ldi	r24, 0x02	; 2
 288:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <sm1>
 28c:	18 c0       	rjmp	.+48     	; 0x2be <Tick_SM1+0x68>
            }
            break;
        case state_12:
            if(counter<period_length)
 28e:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end>
 292:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <period_length>
 296:	89 17       	cp	r24, r25
 298:	20 f4       	brcc	.+8      	; 0x2a2 <Tick_SM1+0x4c>
                counter++;
 29a:	8f 5f       	subi	r24, 0xFF	; 255
 29c:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__data_end>
 2a0:	0e c0       	rjmp	.+28     	; 0x2be <Tick_SM1+0x68>
            else{
                counter=0;
 2a2:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__data_end>
                sm1=state_11;
 2a6:	81 e0       	ldi	r24, 0x01	; 1
 2a8:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <sm1>
 2ac:	05 c0       	rjmp	.+10     	; 0x2b8 <Tick_SM1+0x62>
            }
            break;
        default:break;
    }
    switch(sm1){
 2ae:	81 30       	cpi	r24, 0x01	; 1
 2b0:	19 f0       	breq	.+6      	; 0x2b8 <Tick_SM1+0x62>
 2b2:	82 30       	cpi	r24, 0x02	; 2
 2b4:	31 f4       	brne	.+12     	; 0x2c2 <Tick_SM1+0x6c>
 2b6:	03 c0       	rjmp	.+6      	; 0x2be <Tick_SM1+0x68>
        case state_11:
            PORTD=0xF0;
 2b8:	80 ef       	ldi	r24, 0xF0	; 240
 2ba:	8b b9       	out	0x0b, r24	; 11
            break;
 2bc:	08 95       	ret
        case state_12:
            PORTD=0x0F;
 2be:	8f e0       	ldi	r24, 0x0F	; 15
 2c0:	8b b9       	out	0x0b, r24	; 11
 2c2:	08 95       	ret

000002c4 <Tick_SM2>:
    }
}

enum sm_pattern2{start2,state_21,state_22} sm2;
void Tick_SM2(){
    switch(sm2){
 2c4:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <sm2>
 2c8:	81 30       	cpi	r24, 0x01	; 1
 2ca:	41 f0       	breq	.+16     	; 0x2dc <Tick_SM2+0x18>
 2cc:	18 f0       	brcs	.+6      	; 0x2d4 <Tick_SM2+0x10>
 2ce:	82 30       	cpi	r24, 0x02	; 2
 2d0:	a9 f0       	breq	.+42     	; 0x2fc <Tick_SM2+0x38>
 2d2:	24 c0       	rjmp	.+72     	; 0x31c <Tick_SM2+0x58>
        case start2:
        sm2=state_21;
 2d4:	81 e0       	ldi	r24, 0x01	; 1
 2d6:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <sm2>
        break;
 2da:	25 c0       	rjmp	.+74     	; 0x326 <Tick_SM2+0x62>
        case state_21:
        if(counter<period_length)
 2dc:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end>
 2e0:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <period_length>
 2e4:	89 17       	cp	r24, r25
 2e6:	20 f4       	brcc	.+8      	; 0x2f0 <Tick_SM2+0x2c>
        counter++;
 2e8:	8f 5f       	subi	r24, 0xFF	; 255
 2ea:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__data_end>
 2ee:	1b c0       	rjmp	.+54     	; 0x326 <Tick_SM2+0x62>
        else{
            counter=0;
 2f0:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__data_end>
            sm2=state_22;
 2f4:	82 e0       	ldi	r24, 0x02	; 2
 2f6:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <sm2>
 2fa:	18 c0       	rjmp	.+48     	; 0x32c <Tick_SM2+0x68>
        }
        break;
        case state_22:
        if(counter<period_length)
 2fc:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end>
 300:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <period_length>
 304:	89 17       	cp	r24, r25
 306:	20 f4       	brcc	.+8      	; 0x310 <Tick_SM2+0x4c>
        counter++;
 308:	8f 5f       	subi	r24, 0xFF	; 255
 30a:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__data_end>
 30e:	0e c0       	rjmp	.+28     	; 0x32c <Tick_SM2+0x68>
        else{
            counter=0;
 310:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__data_end>
            sm2=state_21;
 314:	81 e0       	ldi	r24, 0x01	; 1
 316:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <sm2>
 31a:	05 c0       	rjmp	.+10     	; 0x326 <Tick_SM2+0x62>
        }
        break;
        default:break;
    }
    switch(sm2){
 31c:	81 30       	cpi	r24, 0x01	; 1
 31e:	19 f0       	breq	.+6      	; 0x326 <Tick_SM2+0x62>
 320:	82 30       	cpi	r24, 0x02	; 2
 322:	31 f4       	brne	.+12     	; 0x330 <Tick_SM2+0x6c>
 324:	03 c0       	rjmp	.+6      	; 0x32c <Tick_SM2+0x68>
        case state_21:
        PORTD=0xAA;
 326:	8a ea       	ldi	r24, 0xAA	; 170
 328:	8b b9       	out	0x0b, r24	; 11
        break;
 32a:	08 95       	ret
        case state_22:
        PORTD=0x66;
 32c:	86 e6       	ldi	r24, 0x66	; 102
 32e:	8b b9       	out	0x0b, r24	; 11
 330:	08 95       	ret

00000332 <Tick_SM3>:
        default:break;
    }
} 
enum sm_pattern3{start3,state_31,state_32} sm3;
void Tick_SM3(){
    switch(sm3){
 332:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <sm3>
 336:	81 30       	cpi	r24, 0x01	; 1
 338:	41 f0       	breq	.+16     	; 0x34a <Tick_SM3+0x18>
 33a:	18 f0       	brcs	.+6      	; 0x342 <Tick_SM3+0x10>
 33c:	82 30       	cpi	r24, 0x02	; 2
 33e:	a9 f0       	breq	.+42     	; 0x36a <Tick_SM3+0x38>
 340:	24 c0       	rjmp	.+72     	; 0x38a <Tick_SM3+0x58>
        case start3:
        sm3=state_31;
 342:	81 e0       	ldi	r24, 0x01	; 1
 344:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <sm3>
        break;
 348:	25 c0       	rjmp	.+74     	; 0x394 <Tick_SM3+0x62>
        case state_31:
        if(counter<period_length)
 34a:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end>
 34e:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <period_length>
 352:	89 17       	cp	r24, r25
 354:	20 f4       	brcc	.+8      	; 0x35e <Tick_SM3+0x2c>
        counter++;
 356:	8f 5f       	subi	r24, 0xFF	; 255
 358:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__data_end>
 35c:	1b c0       	rjmp	.+54     	; 0x394 <Tick_SM3+0x62>
        else{
            counter=0;
 35e:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__data_end>
            sm3=state_32;
 362:	82 e0       	ldi	r24, 0x02	; 2
 364:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <sm3>
 368:	18 c0       	rjmp	.+48     	; 0x39a <Tick_SM3+0x68>
        }
        break;
        case state_32:
        if(counter<period_length)
 36a:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end>
 36e:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <period_length>
 372:	89 17       	cp	r24, r25
 374:	20 f4       	brcc	.+8      	; 0x37e <Tick_SM3+0x4c>
        counter++;
 376:	8f 5f       	subi	r24, 0xFF	; 255
 378:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__data_end>
 37c:	0e c0       	rjmp	.+28     	; 0x39a <Tick_SM3+0x68>
        else{
            counter=0;
 37e:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__data_end>
            sm3=state_31;
 382:	81 e0       	ldi	r24, 0x01	; 1
 384:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <sm3>
 388:	05 c0       	rjmp	.+10     	; 0x394 <Tick_SM3+0x62>
        }
        break;
        default:break;
    }
    switch(sm3){
 38a:	81 30       	cpi	r24, 0x01	; 1
 38c:	19 f0       	breq	.+6      	; 0x394 <Tick_SM3+0x62>
 38e:	82 30       	cpi	r24, 0x02	; 2
 390:	31 f4       	brne	.+12     	; 0x39e <Tick_SM3+0x6c>
 392:	03 c0       	rjmp	.+6      	; 0x39a <Tick_SM3+0x68>
        case state_31:
        PORTD=0xAA;
 394:	8a ea       	ldi	r24, 0xAA	; 170
 396:	8b b9       	out	0x0b, r24	; 11
        break;
 398:	08 95       	ret
        case state_32:
        PORTD=0x55;
 39a:	85 e5       	ldi	r24, 0x55	; 85
 39c:	8b b9       	out	0x0b, r24	; 11
 39e:	08 95       	ret

000003a0 <Tick_SM4>:
        default:break;
    }
}
enum sm_pattern4{start4,state_41,state_42,state_43,state_44,state_45,state_46,state_47,state_48} sm4;
void Tick_SM4(){
    switch(sm4){
 3a0:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <sm4>
 3a4:	8e 2f       	mov	r24, r30
 3a6:	90 e0       	ldi	r25, 0x00	; 0
 3a8:	89 30       	cpi	r24, 0x09	; 9
 3aa:	91 05       	cpc	r25, r1
 3ac:	08 f0       	brcs	.+2      	; 0x3b0 <Tick_SM4+0x10>
 3ae:	88 c0       	rjmp	.+272    	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
 3b0:	fc 01       	movw	r30, r24
 3b2:	ea 5b       	subi	r30, 0xBA	; 186
 3b4:	ff 4f       	sbci	r31, 0xFF	; 255
 3b6:	d8 c0       	rjmp	.+432    	; 0x568 <__tablejump2__>
        case start4:
        sm4=state_41;
 3b8:	81 e0       	ldi	r24, 0x01	; 1
 3ba:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <sm4>
        break;
 3be:	8a c0       	rjmp	.+276    	; 0x4d4 <__LOCK_REGION_LENGTH__+0xd4>
        
        case state_41:
        if(counter<period_length)
 3c0:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end>
 3c4:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <period_length>
 3c8:	89 17       	cp	r24, r25
 3ca:	20 f4       	brcc	.+8      	; 0x3d4 <Tick_SM4+0x34>
        counter++;
 3cc:	8f 5f       	subi	r24, 0xFF	; 255
 3ce:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__data_end>
 3d2:	80 c0       	rjmp	.+256    	; 0x4d4 <__LOCK_REGION_LENGTH__+0xd4>
        else{
            counter=0;
 3d4:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__data_end>
            sm4=state_42;
 3d8:	82 e0       	ldi	r24, 0x02	; 2
 3da:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <sm4>
 3de:	7d c0       	rjmp	.+250    	; 0x4da <__LOCK_REGION_LENGTH__+0xda>
        }
        break;
        
        case state_42:
        if(counter<period_length)
 3e0:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end>
 3e4:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <period_length>
 3e8:	89 17       	cp	r24, r25
 3ea:	20 f4       	brcc	.+8      	; 0x3f4 <Tick_SM4+0x54>
        counter++;
 3ec:	8f 5f       	subi	r24, 0xFF	; 255
 3ee:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__data_end>
 3f2:	73 c0       	rjmp	.+230    	; 0x4da <__LOCK_REGION_LENGTH__+0xda>
        else{
            counter=0;
 3f4:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__data_end>
            sm4=state_43;
 3f8:	83 e0       	ldi	r24, 0x03	; 3
 3fa:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <sm4>
 3fe:	70 c0       	rjmp	.+224    	; 0x4e0 <__LOCK_REGION_LENGTH__+0xe0>
        }
        break;
                case state_43:
                if(counter<period_length)
 400:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end>
 404:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <period_length>
 408:	89 17       	cp	r24, r25
 40a:	20 f4       	brcc	.+8      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
                counter++;
 40c:	8f 5f       	subi	r24, 0xFF	; 255
 40e:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__data_end>
 412:	66 c0       	rjmp	.+204    	; 0x4e0 <__LOCK_REGION_LENGTH__+0xe0>
                else{
                    counter=0;
 414:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__data_end>
                    sm4=state_44;
 418:	84 e0       	ldi	r24, 0x04	; 4
 41a:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <sm4>
 41e:	63 c0       	rjmp	.+198    	; 0x4e6 <__LOCK_REGION_LENGTH__+0xe6>
                }
                break;
                        case state_44:
                        if(counter<period_length)
 420:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end>
 424:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <period_length>
 428:	89 17       	cp	r24, r25
 42a:	20 f4       	brcc	.+8      	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
                        counter++;
 42c:	8f 5f       	subi	r24, 0xFF	; 255
 42e:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__data_end>
 432:	59 c0       	rjmp	.+178    	; 0x4e6 <__LOCK_REGION_LENGTH__+0xe6>
                        else{
                            counter=0;
 434:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__data_end>
                            sm4=state_45;
 438:	85 e0       	ldi	r24, 0x05	; 5
 43a:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <sm4>
 43e:	56 c0       	rjmp	.+172    	; 0x4ec <__LOCK_REGION_LENGTH__+0xec>
                        }
                        break;
                                case state_45:
                                if(counter<period_length)
 440:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end>
 444:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <period_length>
 448:	89 17       	cp	r24, r25
 44a:	20 f4       	brcc	.+8      	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
                                counter++;
 44c:	8f 5f       	subi	r24, 0xFF	; 255
 44e:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__data_end>
 452:	4c c0       	rjmp	.+152    	; 0x4ec <__LOCK_REGION_LENGTH__+0xec>
                                else{
                                    counter=0;
 454:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__data_end>
                                    sm4=state_46;
 458:	86 e0       	ldi	r24, 0x06	; 6
 45a:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <sm4>
 45e:	49 c0       	rjmp	.+146    	; 0x4f2 <__LOCK_REGION_LENGTH__+0xf2>
                                }
                                break;
                                case state_46:
                                if(counter<period_length)
 460:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end>
 464:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <period_length>
 468:	89 17       	cp	r24, r25
 46a:	20 f4       	brcc	.+8      	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
                                counter++;
 46c:	8f 5f       	subi	r24, 0xFF	; 255
 46e:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__data_end>
 472:	3f c0       	rjmp	.+126    	; 0x4f2 <__LOCK_REGION_LENGTH__+0xf2>
                                else{
                                    counter=0;
 474:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__data_end>
                                    sm4=state_47;
 478:	87 e0       	ldi	r24, 0x07	; 7
 47a:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <sm4>
 47e:	3c c0       	rjmp	.+120    	; 0x4f8 <__LOCK_REGION_LENGTH__+0xf8>
                                }
                                break;
                                        case state_47:
                                        if(counter<period_length)
 480:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end>
 484:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <period_length>
 488:	89 17       	cp	r24, r25
 48a:	20 f4       	brcc	.+8      	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
                                        counter++;
 48c:	8f 5f       	subi	r24, 0xFF	; 255
 48e:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__data_end>
 492:	32 c0       	rjmp	.+100    	; 0x4f8 <__LOCK_REGION_LENGTH__+0xf8>
                                        else{
                                            counter=0;
 494:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__data_end>
                                            sm4=state_48;
 498:	88 e0       	ldi	r24, 0x08	; 8
 49a:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <sm4>
 49e:	2f c0       	rjmp	.+94     	; 0x4fe <__LOCK_REGION_LENGTH__+0xfe>
                                        }
                                        break;
                                                case state_48:
                                                if(counter<period_length)
 4a0:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end>
 4a4:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <period_length>
 4a8:	89 17       	cp	r24, r25
 4aa:	20 f4       	brcc	.+8      	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
                                                counter++;
 4ac:	8f 5f       	subi	r24, 0xFF	; 255
 4ae:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__data_end>
 4b2:	25 c0       	rjmp	.+74     	; 0x4fe <__LOCK_REGION_LENGTH__+0xfe>
                                                else{
                                                    counter=0;
 4b4:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__data_end>
                                                    sm4=state_41;
 4b8:	81 e0       	ldi	r24, 0x01	; 1
 4ba:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <sm4>
 4be:	0a c0       	rjmp	.+20     	; 0x4d4 <__LOCK_REGION_LENGTH__+0xd4>
                                                }
                                                break;
        default:break;
    }
    switch(sm4){
 4c0:	8e 2f       	mov	r24, r30
 4c2:	90 e0       	ldi	r25, 0x00	; 0
 4c4:	fc 01       	movw	r30, r24
 4c6:	31 97       	sbiw	r30, 0x01	; 1
 4c8:	e8 30       	cpi	r30, 0x08	; 8
 4ca:	f1 05       	cpc	r31, r1
 4cc:	d0 f4       	brcc	.+52     	; 0x502 <__LOCK_REGION_LENGTH__+0x102>
 4ce:	e1 5b       	subi	r30, 0xB1	; 177
 4d0:	ff 4f       	sbci	r31, 0xFF	; 255
 4d2:	4a c0       	rjmp	.+148    	; 0x568 <__tablejump2__>
        case state_41:
        PORTD=0x01;
 4d4:	81 e0       	ldi	r24, 0x01	; 1
 4d6:	8b b9       	out	0x0b, r24	; 11
        break;
 4d8:	08 95       	ret
        case state_42:
        PORTD=0x02;
 4da:	82 e0       	ldi	r24, 0x02	; 2
 4dc:	8b b9       	out	0x0b, r24	; 11
        break;
 4de:	08 95       	ret
        case state_43:
        PORTD=0x04;
 4e0:	84 e0       	ldi	r24, 0x04	; 4
 4e2:	8b b9       	out	0x0b, r24	; 11
        break;
 4e4:	08 95       	ret
        case state_44:
        PORTD=0x08;
 4e6:	88 e0       	ldi	r24, 0x08	; 8
 4e8:	8b b9       	out	0x0b, r24	; 11
        break;
 4ea:	08 95       	ret
        case state_45:
        PORTD=0x10;
 4ec:	80 e1       	ldi	r24, 0x10	; 16
 4ee:	8b b9       	out	0x0b, r24	; 11
        break;
 4f0:	08 95       	ret
        case state_46:
        PORTD=0x20;
 4f2:	80 e2       	ldi	r24, 0x20	; 32
 4f4:	8b b9       	out	0x0b, r24	; 11
        break;
 4f6:	08 95       	ret
        case state_47:
        PORTD=0x40;
 4f8:	80 e4       	ldi	r24, 0x40	; 64
 4fa:	8b b9       	out	0x0b, r24	; 11
        break;
 4fc:	08 95       	ret
        case state_48:
        PORTD=0x80;
 4fe:	80 e8       	ldi	r24, 0x80	; 128
 500:	8b b9       	out	0x0b, r24	; 11
 502:	08 95       	ret

00000504 <main>:
    }
}

int main(void)
{
	DDRD=0xFF;PORTD=0x00;
 504:	8f ef       	ldi	r24, 0xFF	; 255
 506:	8a b9       	out	0x0a, r24	; 10
 508:	1b b8       	out	0x0b, r1	; 11
	DDRB=0x00;PORTB=0xFF;
 50a:	14 b8       	out	0x04, r1	; 4
 50c:	85 b9       	out	0x05, r24	; 5
	
	TimerSet(50);
 50e:	62 e3       	ldi	r22, 0x32	; 50
 510:	70 e0       	ldi	r23, 0x00	; 0
 512:	80 e0       	ldi	r24, 0x00	; 0
 514:	90 e0       	ldi	r25, 0x00	; 0
	TimerOn();
 516:	48 de       	rcall	.-880    	; 0x1a8 <TimerSet>
 518:	e8 dd       	rcall	.-1072   	; 0xea <TimerOn>
	
	state = Start;
 51a:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <state>
	sm1=start1;
 51e:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <sm1>
    sm2=start2;
 522:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <sm2>
    sm3=start3;
 526:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <sm3>
    sm4=start4;
	SPI_SlaveInit();
 52a:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <sm4>
	
	while(1)
	{
		Tick();
 52e:	4d de       	rcall	.-870    	; 0x1ca <SPI_SlaveInit>
        
		switch(pattern_mode){
 530:	60 de       	rcall	.-832    	; 0x1f2 <Tick>
 532:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <pattern_mode>
 536:	82 30       	cpi	r24, 0x02	; 2
 538:	59 f0       	breq	.+22     	; 0x550 <main+0x4c>
 53a:	18 f4       	brcc	.+6      	; 0x542 <main+0x3e>
 53c:	81 30       	cpi	r24, 0x01	; 1
 53e:	31 f0       	breq	.+12     	; 0x54c <main+0x48>
 540:	0c c0       	rjmp	.+24     	; 0x55a <main+0x56>
 542:	83 30       	cpi	r24, 0x03	; 3
            case 1:
                Tick_SM1();
                break;
            case 2:
                Tick_SM3();
 544:	39 f0       	breq	.+14     	; 0x554 <main+0x50>
 546:	84 30       	cpi	r24, 0x04	; 4
                break;
 548:	39 f0       	breq	.+14     	; 0x558 <main+0x54>
            case 3:
                Tick_SM4();
 54a:	07 c0       	rjmp	.+14     	; 0x55a <main+0x56>
 54c:	84 de       	rcall	.-760    	; 0x256 <Tick_SM1>
                break;
 54e:	05 c0       	rjmp	.+10     	; 0x55a <main+0x56>
            case 4:
                Tick_SM2();
 550:	f0 de       	rcall	.-544    	; 0x332 <Tick_SM3>
 552:	03 c0       	rjmp	.+6      	; 0x55a <main+0x56>
                break;
             default:break;
        }
		while(!TimerFlag);
 554:	25 df       	rcall	.-438    	; 0x3a0 <Tick_SM4>
 556:	01 c0       	rjmp	.+2      	; 0x55a <main+0x56>
 558:	b5 de       	rcall	.-662    	; 0x2c4 <Tick_SM2>
 55a:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <TimerFlag>
		TimerFlag = 0;
 55e:	88 23       	and	r24, r24
	}
 560:	e1 f3       	breq	.-8      	; 0x55a <main+0x56>
 562:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <TimerFlag>
 566:	e4 cf       	rjmp	.-56     	; 0x530 <main+0x2c>

00000568 <__tablejump2__>:
 568:	ee 0f       	add	r30, r30
 56a:	ff 1f       	adc	r31, r31
 56c:	00 24       	eor	r0, r0
 56e:	00 1c       	adc	r0, r0
 570:	0b be       	out	0x3b, r0	; 59
 572:	07 90       	elpm	r0, Z+
 574:	f6 91       	elpm	r31, Z
 576:	e0 2d       	mov	r30, r0
 578:	09 94       	ijmp

0000057a <_exit>:
 57a:	f8 94       	cli

0000057c <__stop_program>:
 57c:	ff cf       	rjmp	.-2      	; 0x57c <__stop_program>
