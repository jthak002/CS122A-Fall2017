
CS122A_Lab6_Part4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  00000532  000005c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000532  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000004f  00800106  00800106  000005cc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005cc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005fc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  0000063c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ec6  00000000  00000000  000006f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000934  00000000  00000000  000015ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007b0  00000000  00000000  00001eee  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000194  00000000  00000000  000026a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006be  00000000  00000000  00002834  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000036f  00000000  00000000  00002ef2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  00003261  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	6c c0       	rjmp	.+216    	; 0x10e <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 e3       	ldi	r30, 0x32	; 50
  a0:	f5 e0       	ldi	r31, 0x05	; 5
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a6 30       	cpi	r26, 0x06	; 6
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a6 e0       	ldi	r26, 0x06	; 6
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a5 35       	cpi	r26, 0x55	; 85
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	05 d2       	rcall	.+1034   	; 0x4ce <main>
  c4:	34 c2       	rjmp	.+1128   	; 0x52e <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <TimerOn>:
void TimerOff(){
    TCCR1B = 0x00;
}

void TimerISR(){
    TimerFlag = 1;
  c8:	8b e0       	ldi	r24, 0x0B	; 11
  ca:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
  ce:	8d e7       	ldi	r24, 0x7D	; 125
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  d6:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
  da:	82 e0       	ldi	r24, 0x02	; 2
  dc:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
  e0:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
  e4:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
  e8:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <avr_timer_M>
  ec:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <avr_timer_M+0x1>
  f0:	a0 91 04 01 	lds	r26, 0x0104	; 0x800104 <avr_timer_M+0x2>
  f4:	b0 91 05 01 	lds	r27, 0x0105	; 0x800105 <avr_timer_M+0x3>
  f8:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <avr_timer_cntcurr>
  fc:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <avr_timer_cntcurr+0x1>
 100:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <avr_timer_cntcurr+0x2>
 104:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <avr_timer_cntcurr+0x3>
 108:	80 e8       	ldi	r24, 0x80	; 128
 10a:	8f bf       	out	0x3f, r24	; 63
 10c:	08 95       	ret

0000010e <__vector_13>:
}

ISR(TIMER1_COMPA_vect){
 10e:	1f 92       	push	r1
 110:	0f 92       	push	r0
 112:	0f b6       	in	r0, 0x3f	; 63
 114:	0f 92       	push	r0
 116:	11 24       	eor	r1, r1
 118:	8f 93       	push	r24
 11a:	9f 93       	push	r25
 11c:	af 93       	push	r26
 11e:	bf 93       	push	r27
    avr_timer_cntcurr--;
 120:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <avr_timer_cntcurr>
 124:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <avr_timer_cntcurr+0x1>
 128:	a0 91 0c 01 	lds	r26, 0x010C	; 0x80010c <avr_timer_cntcurr+0x2>
 12c:	b0 91 0d 01 	lds	r27, 0x010D	; 0x80010d <avr_timer_cntcurr+0x3>
 130:	01 97       	sbiw	r24, 0x01	; 1
 132:	a1 09       	sbc	r26, r1
 134:	b1 09       	sbc	r27, r1
 136:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <avr_timer_cntcurr>
 13a:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <avr_timer_cntcurr+0x1>
 13e:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <avr_timer_cntcurr+0x2>
 142:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <avr_timer_cntcurr+0x3>
    if (avr_timer_cntcurr == 0){
 146:	89 2b       	or	r24, r25
 148:	8a 2b       	or	r24, r26
 14a:	8b 2b       	or	r24, r27
 14c:	99 f4       	brne	.+38     	; 0x174 <__vector_13+0x66>
void TimerOff(){
    TCCR1B = 0x00;
}

void TimerISR(){
    TimerFlag = 1;
 14e:	81 e0       	ldi	r24, 0x01	; 1
 150:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <TimerFlag>

ISR(TIMER1_COMPA_vect){
    avr_timer_cntcurr--;
    if (avr_timer_cntcurr == 0){
        TimerISR();
        avr_timer_cntcurr = avr_timer_M;
 154:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <avr_timer_M>
 158:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <avr_timer_M+0x1>
 15c:	a0 91 04 01 	lds	r26, 0x0104	; 0x800104 <avr_timer_M+0x2>
 160:	b0 91 05 01 	lds	r27, 0x0105	; 0x800105 <avr_timer_M+0x3>
 164:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <avr_timer_cntcurr>
 168:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <avr_timer_cntcurr+0x1>
 16c:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <avr_timer_cntcurr+0x2>
 170:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <avr_timer_cntcurr+0x3>
        
    }
}
 174:	bf 91       	pop	r27
 176:	af 91       	pop	r26
 178:	9f 91       	pop	r25
 17a:	8f 91       	pop	r24
 17c:	0f 90       	pop	r0
 17e:	0f be       	out	0x3f, r0	; 63
 180:	0f 90       	pop	r0
 182:	1f 90       	pop	r1
 184:	18 95       	reti

00000186 <TimerSet>:

void TimerSet(unsigned long M){
    avr_timer_M = M;
 186:	60 93 02 01 	sts	0x0102, r22	; 0x800102 <avr_timer_M>
 18a:	70 93 03 01 	sts	0x0103, r23	; 0x800103 <avr_timer_M+0x1>
 18e:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <avr_timer_M+0x2>
 192:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <avr_timer_M+0x3>
    avr_timer_cntcurr = avr_timer_M;
 196:	60 93 0a 01 	sts	0x010A, r22	; 0x80010a <avr_timer_cntcurr>
 19a:	70 93 0b 01 	sts	0x010B, r23	; 0x80010b <avr_timer_cntcurr+0x1>
 19e:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <avr_timer_cntcurr+0x2>
 1a2:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <avr_timer_cntcurr+0x3>
 1a6:	08 95       	ret

000001a8 <TickSM1>:
unsigned char directionX=0x00;
unsigned char directionY=0x00;
unsigned char input=0x00;
enum SM1_states{Start1, checkButtonPressa0, checkButtonLifta0}SM1_state;
void TickSM1(){
    input=(~PINA)&0x01;
 1a8:	80 b1       	in	r24, 0x00	; 0
 1aa:	91 e0       	ldi	r25, 0x01	; 1
 1ac:	28 2f       	mov	r18, r24
 1ae:	21 70       	andi	r18, 0x01	; 1
 1b0:	80 fd       	sbrc	r24, 0
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <input>
    switch(SM1_state){
 1b8:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <SM1_state>
 1bc:	81 30       	cpi	r24, 0x01	; 1
 1be:	41 f0       	breq	.+16     	; 0x1d0 <TickSM1+0x28>
 1c0:	18 f0       	brcs	.+6      	; 0x1c8 <TickSM1+0x20>
 1c2:	82 30       	cpi	r24, 0x02	; 2
 1c4:	89 f0       	breq	.+34     	; 0x1e8 <TickSM1+0x40>
 1c6:	08 95       	ret
        case Start1:
            SM1_state=checkButtonPressa0;
 1c8:	81 e0       	ldi	r24, 0x01	; 1
 1ca:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <SM1_state>
            break;
 1ce:	08 95       	ret
        case checkButtonPressa0:
            if(input>0){
 1d0:	21 11       	cpse	r18, r1
 1d2:	07 c0       	rjmp	.+14     	; 0x1e2 <TickSM1+0x3a>
                SM1_state=checkButtonLifta0;
 1d4:	82 e0       	ldi	r24, 0x02	; 2
 1d6:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <SM1_state>
                directionX=0x01;
 1da:	81 e0       	ldi	r24, 0x01	; 1
 1dc:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <directionX>
 1e0:	08 95       	ret
            }                
             else
             {
                SM1_state=checkButtonPressa0;
                directionX=0x00;
 1e2:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <directionX>
 1e6:	08 95       	ret
             }                
            break;
        case checkButtonLifta0:
            if(input>0)
 1e8:	21 11       	cpse	r18, r1
 1ea:	03 c0       	rjmp	.+6      	; 0x1f2 <TickSM1+0x4a>
            {
                SM1_state=checkButtonLifta0;
                directionX=0x00;
 1ec:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <directionX>
 1f0:	08 95       	ret
            }            
            else
            {
                SM1_state=checkButtonPressa0;
 1f2:	81 e0       	ldi	r24, 0x01	; 1
 1f4:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <SM1_state>
                directionX=0x00;
 1f8:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <directionX>
 1fc:	08 95       	ret

000001fe <TickSM2>:
        default:break;
    }
}
enum SM2_states{Start2, checkButtonPressa2, checkButtonLifta2}SM2_state;
void TickSM2(){
    input=(~PINA)&0x04;
 1fe:	80 b1       	in	r24, 0x00	; 0
 200:	80 95       	com	r24
 202:	84 70       	andi	r24, 0x04	; 4
 204:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <input>
    switch(SM2_state){
 208:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <SM2_state>
 20c:	91 30       	cpi	r25, 0x01	; 1
 20e:	41 f0       	breq	.+16     	; 0x220 <TickSM2+0x22>
 210:	18 f0       	brcs	.+6      	; 0x218 <TickSM2+0x1a>
 212:	92 30       	cpi	r25, 0x02	; 2
 214:	89 f0       	breq	.+34     	; 0x238 <TickSM2+0x3a>
 216:	08 95       	ret
        case Start2:
        SM2_state=checkButtonPressa2;
 218:	81 e0       	ldi	r24, 0x01	; 1
 21a:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <SM2_state>
        break;
 21e:	08 95       	ret
        case checkButtonPressa2:
        if(input>0)
 220:	88 23       	and	r24, r24
 222:	39 f0       	breq	.+14     	; 0x232 <TickSM2+0x34>
        {
            SM2_state=checkButtonLifta2;
 224:	82 e0       	ldi	r24, 0x02	; 2
 226:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <SM2_state>
            directionY=0x01;
 22a:	81 e0       	ldi	r24, 0x01	; 1
 22c:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <directionY>
 230:	08 95       	ret
        }        
        else
        {
            SM2_state=checkButtonPressa2;
            directionY=0x00;
 232:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <directionY>
 236:	08 95       	ret
        }        
        break;
        case checkButtonLifta2:
        if(input>0)
 238:	88 23       	and	r24, r24
 23a:	19 f0       	breq	.+6      	; 0x242 <TickSM2+0x44>
        {
            SM2_state=checkButtonLifta2;
            directionY=0x00;
 23c:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <directionY>
 240:	08 95       	ret
        }        
        else{
            SM2_state=checkButtonPressa2;
 242:	81 e0       	ldi	r24, 0x01	; 1
 244:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <SM2_state>
            directionY=0x00;
 248:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <directionY>
 24c:	08 95       	ret

0000024e <TickSM3>:
        default:break;
    }
}
enum SM3_states{Start3,shiftLEDmatrix}SM3_state;
void TickSM3(){
    switch (SM3_state)
 24e:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <SM3_state>
 252:	88 23       	and	r24, r24
 254:	19 f0       	breq	.+6      	; 0x25c <TickSM3+0xe>
 256:	81 30       	cpi	r24, 0x01	; 1
 258:	39 f0       	breq	.+14     	; 0x268 <TickSM3+0x1a>
 25a:	04 c0       	rjmp	.+8      	; 0x264 <TickSM3+0x16>
    {
        case Start3:
            SM3_state=shiftLEDmatrix;
 25c:	81 e0       	ldi	r24, 0x01	; 1
 25e:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <SM3_state>
            break;
 262:	02 c0       	rjmp	.+4      	; 0x268 <TickSM3+0x1a>
        case shiftLEDmatrix:
            SM3_state=shiftLEDmatrix;
            break;
        default:break;
    }
    switch(SM3_state){
 264:	81 30       	cpi	r24, 0x01	; 1
 266:	51 f5       	brne	.+84     	; 0x2bc <TickSM3+0x6e>
        case shiftLEDmatrix:
            if(directionX==0x01)
 268:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <directionX>
 26c:	81 30       	cpi	r24, 0x01	; 1
 26e:	41 f4       	brne	.+16     	; 0x280 <TickSM3+0x32>
            {
                if(indexX>0x01)
 270:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <indexX>
 274:	82 30       	cpi	r24, 0x02	; 2
 276:	68 f0       	brcs	.+26     	; 0x292 <TickSM3+0x44>
                   indexX--;
 278:	81 50       	subi	r24, 0x01	; 1
 27a:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <indexX>
 27e:	09 c0       	rjmp	.+18     	; 0x292 <TickSM3+0x44>
            }
            else if(directionX==0x02)
 280:	82 30       	cpi	r24, 0x02	; 2
 282:	39 f4       	brne	.+14     	; 0x292 <TickSM3+0x44>
            {
                 if(indexX<0x06)
 284:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <indexX>
 288:	86 30       	cpi	r24, 0x06	; 6
 28a:	18 f4       	brcc	.+6      	; 0x292 <TickSM3+0x44>
                   indexX++;
 28c:	8f 5f       	subi	r24, 0xFF	; 255
 28e:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <indexX>
            }
            
            if(directionY==0x01)
 292:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <directionY>
 296:	81 30       	cpi	r24, 0x01	; 1
 298:	41 f4       	brne	.+16     	; 0x2aa <TickSM3+0x5c>
            {
                 if(indexY<0x06)
 29a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 29e:	86 30       	cpi	r24, 0x06	; 6
 2a0:	68 f4       	brcc	.+26     	; 0x2bc <TickSM3+0x6e>
                 indexY++;
 2a2:	8f 5f       	subi	r24, 0xFF	; 255
 2a4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 2a8:	08 95       	ret

            }
            else if(directionY==0x02)
 2aa:	82 30       	cpi	r24, 0x02	; 2
 2ac:	39 f4       	brne	.+14     	; 0x2bc <TickSM3+0x6e>
            {
                if(indexY>0x01)
 2ae:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 2b2:	82 30       	cpi	r24, 0x02	; 2
 2b4:	18 f0       	brcs	.+6      	; 0x2bc <TickSM3+0x6e>
                indexY--;              
 2b6:	81 50       	subi	r24, 0x01	; 1
 2b8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 2bc:	08 95       	ret

000002be <TickSM4>:
    }
}

enum SM4_states{Start4,checkButtonPressa1, checkButtonLifta1} SM4_state;
void TickSM4(){
    input=(~PINA)&0x02;
 2be:	80 b1       	in	r24, 0x00	; 0
 2c0:	80 95       	com	r24
 2c2:	82 70       	andi	r24, 0x02	; 2
 2c4:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <input>
    switch(SM4_state)
 2c8:	90 91 54 01 	lds	r25, 0x0154	; 0x800154 <SM4_state>
 2cc:	91 30       	cpi	r25, 0x01	; 1
 2ce:	41 f0       	breq	.+16     	; 0x2e0 <TickSM4+0x22>
 2d0:	18 f0       	brcs	.+6      	; 0x2d8 <TickSM4+0x1a>
 2d2:	92 30       	cpi	r25, 0x02	; 2
 2d4:	81 f0       	breq	.+32     	; 0x2f6 <TickSM4+0x38>
 2d6:	08 95       	ret
    {
        case Start4:
            SM4_state=checkButtonPressa1;
 2d8:	81 e0       	ldi	r24, 0x01	; 1
 2da:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <SM4_state>
            break;
 2de:	08 95       	ret
        case checkButtonPressa1:
            if(input>0)
 2e0:	88 23       	and	r24, r24
 2e2:	31 f0       	breq	.+12     	; 0x2f0 <TickSM4+0x32>
            {
                SM4_state=checkButtonLifta1;
 2e4:	82 e0       	ldi	r24, 0x02	; 2
 2e6:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <SM4_state>
                directionX=0x02;
 2ea:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <directionX>
 2ee:	08 95       	ret
            }
            else
            {
                SM4_state=checkButtonPressa1;
                directionX=0x00;
 2f0:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <directionX>
 2f4:	08 95       	ret
            }
            break;
        case checkButtonLifta1:
            if(input>0)
 2f6:	88 23       	and	r24, r24
 2f8:	19 f0       	breq	.+6      	; 0x300 <TickSM4+0x42>
            {
                SM4_state=checkButtonLifta1;
                directionX=0x00;
 2fa:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <directionX>
 2fe:	08 95       	ret
            }
            else
            {
                SM4_state=checkButtonPressa1;
 300:	81 e0       	ldi	r24, 0x01	; 1
 302:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <SM4_state>
                directionX=0x00;
 306:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <directionX>
 30a:	08 95       	ret

0000030c <TickSM5>:
    }
}

enum SM5_states{Start5, checkButtonPressa3, checkButtonLifta3} SM5_state;
void TickSM5(){
    input=(~PINA)&0x08;
 30c:	80 b1       	in	r24, 0x00	; 0
 30e:	80 95       	com	r24
 310:	88 70       	andi	r24, 0x08	; 8
 312:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <input>
    switch(SM5_state)
 316:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <SM5_state>
 31a:	91 30       	cpi	r25, 0x01	; 1
 31c:	41 f0       	breq	.+16     	; 0x32e <TickSM5+0x22>
 31e:	18 f0       	brcs	.+6      	; 0x326 <TickSM5+0x1a>
 320:	92 30       	cpi	r25, 0x02	; 2
 322:	81 f0       	breq	.+32     	; 0x344 <TickSM5+0x38>
 324:	08 95       	ret
    {
        case Start5:
            SM5_state=checkButtonPressa3;
 326:	81 e0       	ldi	r24, 0x01	; 1
 328:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <SM5_state>
            break;
 32c:	08 95       	ret
        case checkButtonPressa3:
            if(input>0)
 32e:	88 23       	and	r24, r24
 330:	31 f0       	breq	.+12     	; 0x33e <TickSM5+0x32>
            {
                SM5_state=checkButtonLifta3;
 332:	82 e0       	ldi	r24, 0x02	; 2
 334:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <SM5_state>
                directionY=0x02;
 338:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <directionY>
 33c:	08 95       	ret
            }
            else
            {
                SM5_state=checkButtonPressa3;
                directionY=0x00;
 33e:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <directionY>
 342:	08 95       	ret
            }
            break;
        case checkButtonLifta3:
            if(input>0)
 344:	88 23       	and	r24, r24
 346:	19 f0       	breq	.+6      	; 0x34e <TickSM5+0x42>
            {
                SM5_state=checkButtonLifta3;
                directionY=0x00;
 348:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <directionY>
 34c:	08 95       	ret
            }
            else
            {
                SM5_state=checkButtonPressa3;
 34e:	81 e0       	ldi	r24, 0x01	; 1
 350:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <SM5_state>
                directionY=0x00;
 354:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <directionY>
 358:	08 95       	ret

0000035a <displayCell>:
unsigned char displayCell(unsigned char cellCounter)
{
    unsigned char outputD=0XFF;;
    for(int i=0;i<8;i++)
    {
        if(ledMatrix[cellCounter/8][i]==1)
 35a:	86 95       	lsr	r24
 35c:	86 95       	lsr	r24
 35e:	86 95       	lsr	r24
 360:	e8 2f       	mov	r30, r24
 362:	f0 e0       	ldi	r31, 0x00	; 0
 364:	ee 0f       	add	r30, r30
 366:	ff 1f       	adc	r31, r31
 368:	ee 0f       	add	r30, r30
 36a:	ff 1f       	adc	r31, r31
 36c:	ee 0f       	add	r30, r30
 36e:	ff 1f       	adc	r31, r31
 370:	ed 5e       	subi	r30, 0xED	; 237
 372:	fe 4f       	sbci	r31, 0xFE	; 254
}

unsigned char displayCell(unsigned char cellCounter)
{
    unsigned char outputD=0XFF;;
    for(int i=0;i<8;i++)
 374:	20 e0       	ldi	r18, 0x00	; 0
 376:	30 e0       	ldi	r19, 0x00	; 0
    }   
}

unsigned char displayCell(unsigned char cellCounter)
{
    unsigned char outputD=0XFF;;
 378:	8f ef       	ldi	r24, 0xFF	; 255
    for(int i=0;i<8;i++)
    {
        if(ledMatrix[cellCounter/8][i]==1)
        {
            outputD=outputD&(~(0x01<<i));
 37a:	61 e0       	ldi	r22, 0x01	; 1
 37c:	70 e0       	ldi	r23, 0x00	; 0
unsigned char displayCell(unsigned char cellCounter)
{
    unsigned char outputD=0XFF;;
    for(int i=0;i<8;i++)
    {
        if(ledMatrix[cellCounter/8][i]==1)
 37e:	91 91       	ld	r25, Z+
 380:	91 30       	cpi	r25, 0x01	; 1
 382:	49 f4       	brne	.+18     	; 0x396 <displayCell+0x3c>
        {
            outputD=outputD&(~(0x01<<i));
 384:	ab 01       	movw	r20, r22
 386:	02 2e       	mov	r0, r18
 388:	02 c0       	rjmp	.+4      	; 0x38e <displayCell+0x34>
 38a:	44 0f       	add	r20, r20
 38c:	55 1f       	adc	r21, r21
 38e:	0a 94       	dec	r0
 390:	e2 f7       	brpl	.-8      	; 0x38a <displayCell+0x30>
 392:	40 95       	com	r20
 394:	84 23       	and	r24, r20
}

unsigned char displayCell(unsigned char cellCounter)
{
    unsigned char outputD=0XFF;;
    for(int i=0;i<8;i++)
 396:	2f 5f       	subi	r18, 0xFF	; 255
 398:	3f 4f       	sbci	r19, 0xFF	; 255
 39a:	28 30       	cpi	r18, 0x08	; 8
 39c:	31 05       	cpc	r19, r1
 39e:	79 f7       	brne	.-34     	; 0x37e <displayCell+0x24>
        {
            outputD=outputD&(~(0x01<<i));
        }
    }
    return outputD;
}
 3a0:	08 95       	ret

000003a2 <TickSM6>:
unsigned char cellCounter=0x00;    
enum SM6_states{Start6, refreshMatrix, displayMatrix}SM6_state;
void TickSM6()
{
 3a2:	cf 93       	push	r28
 3a4:	df 93       	push	r29
    switch(SM6_state){
 3a6:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <SM6_state>
 3aa:	81 30       	cpi	r24, 0x01	; 1
 3ac:	41 f0       	breq	.+16     	; 0x3be <TickSM6+0x1c>
 3ae:	18 f0       	brcs	.+6      	; 0x3b6 <TickSM6+0x14>
 3b0:	82 30       	cpi	r24, 0x02	; 2
 3b2:	49 f0       	breq	.+18     	; 0x3c6 <TickSM6+0x24>
 3b4:	11 c0       	rjmp	.+34     	; 0x3d8 <TickSM6+0x36>
        case Start6:
            SM6_state=refreshMatrix;
 3b6:	81 e0       	ldi	r24, 0x01	; 1
 3b8:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <SM6_state>
            break;
 3bc:	13 c0       	rjmp	.+38     	; 0x3e4 <TickSM6+0x42>
        case refreshMatrix:
            SM6_state=displayMatrix;
 3be:	82 e0       	ldi	r24, 0x02	; 2
 3c0:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <SM6_state>
            break;
 3c4:	63 c0       	rjmp	.+198    	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
        case displayMatrix:
            if(cellCounter==64)
 3c6:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
 3ca:	80 34       	cpi	r24, 0x40	; 64
 3cc:	09 f0       	breq	.+2      	; 0x3d0 <TickSM6+0x2e>
 3ce:	5e c0       	rjmp	.+188    	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
                SM6_state=refreshMatrix;
 3d0:	81 e0       	ldi	r24, 0x01	; 1
 3d2:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <SM6_state>
 3d6:	06 c0       	rjmp	.+12     	; 0x3e4 <TickSM6+0x42>
            else
                SM6_state=displayMatrix;
            break;
        default:break;
    }
    switch(SM6_state){
 3d8:	81 30       	cpi	r24, 0x01	; 1
 3da:	21 f0       	breq	.+8      	; 0x3e4 <TickSM6+0x42>
 3dc:	82 30       	cpi	r24, 0x02	; 2
 3de:	09 f0       	breq	.+2      	; 0x3e2 <TickSM6+0x40>
 3e0:	73 c0       	rjmp	.+230    	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
 3e2:	54 c0       	rjmp	.+168    	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
 3e4:	e3 e1       	ldi	r30, 0x13	; 19
 3e6:	f1 e0       	ldi	r31, 0x01	; 1
 3e8:	23 e5       	ldi	r18, 0x53	; 83
 3ea:	31 e0       	ldi	r19, 0x01	; 1
 3ec:	08 c0       	rjmp	.+16     	; 0x3fe <TickSM6+0x5c>
        case refreshMatrix:
            for(int i=0;i<8;i++)
            {
                for(int j=0;j<8;j++)
                    ledMatrix[i][j]=0;
 3ee:	11 92       	st	Z+, r1
    }
    switch(SM6_state){
        case refreshMatrix:
            for(int i=0;i<8;i++)
            {
                for(int j=0;j<8;j++)
 3f0:	e8 17       	cp	r30, r24
 3f2:	f9 07       	cpc	r31, r25
 3f4:	e1 f7       	brne	.-8      	; 0x3ee <TickSM6+0x4c>
 3f6:	fc 01       	movw	r30, r24
            break;
        default:break;
    }
    switch(SM6_state){
        case refreshMatrix:
            for(int i=0;i<8;i++)
 3f8:	28 17       	cp	r18, r24
 3fa:	39 07       	cpc	r19, r25
 3fc:	19 f0       	breq	.+6      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 3fe:	cf 01       	movw	r24, r30
 400:	08 96       	adiw	r24, 0x08	; 8
 402:	f5 cf       	rjmp	.-22     	; 0x3ee <TickSM6+0x4c>
            {
                for(int j=0;j<8;j++)
                    ledMatrix[i][j]=0;
            }
            ledMatrix[indexX-1][indexY-1]=1;
 404:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <indexX>
 408:	90 e0       	ldi	r25, 0x00	; 0
 40a:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <__data_start>
 40e:	50 e0       	ldi	r21, 0x00	; 0
 410:	da 01       	movw	r26, r20
 412:	11 97       	sbiw	r26, 0x01	; 1
 414:	bc 01       	movw	r22, r24
 416:	66 0f       	add	r22, r22
 418:	77 1f       	adc	r23, r23
 41a:	66 0f       	add	r22, r22
 41c:	77 1f       	adc	r23, r23
 41e:	66 0f       	add	r22, r22
 420:	77 1f       	adc	r23, r23
 422:	65 5f       	subi	r22, 0xF5	; 245
 424:	7e 4f       	sbci	r23, 0xFE	; 254
 426:	fb 01       	movw	r30, r22
 428:	ea 0f       	add	r30, r26
 42a:	fb 1f       	adc	r31, r27
 42c:	21 e0       	ldi	r18, 0x01	; 1
 42e:	20 83       	st	Z, r18
            ledMatrix[indexX-1][indexY]=1;
 430:	fb 01       	movw	r30, r22
 432:	e4 0f       	add	r30, r20
 434:	f5 1f       	adc	r31, r21
 436:	20 83       	st	Z, r18
            ledMatrix[indexX-1][indexY+1]=1;
 438:	fa 01       	movw	r30, r20
 43a:	31 96       	adiw	r30, 0x01	; 1
 43c:	eb 01       	movw	r28, r22
 43e:	ce 0f       	add	r28, r30
 440:	df 1f       	adc	r29, r31
 442:	28 83       	st	Y, r18
            ledMatrix[indexX][indexY-1]=1;
 444:	bc 01       	movw	r22, r24
 446:	66 0f       	add	r22, r22
 448:	77 1f       	adc	r23, r23
 44a:	66 0f       	add	r22, r22
 44c:	77 1f       	adc	r23, r23
 44e:	66 0f       	add	r22, r22
 450:	77 1f       	adc	r23, r23
 452:	6d 5e       	subi	r22, 0xED	; 237
 454:	7e 4f       	sbci	r23, 0xFE	; 254
 456:	eb 01       	movw	r28, r22
 458:	ca 0f       	add	r28, r26
 45a:	db 1f       	adc	r29, r27
 45c:	28 83       	st	Y, r18
            ledMatrix[indexX][indexY+1]=1;
 45e:	eb 01       	movw	r28, r22
 460:	ce 0f       	add	r28, r30
 462:	df 1f       	adc	r29, r31
 464:	28 83       	st	Y, r18
            ledMatrix[indexX+1][indexY-1]=1;
 466:	88 0f       	add	r24, r24
 468:	99 1f       	adc	r25, r25
 46a:	88 0f       	add	r24, r24
 46c:	99 1f       	adc	r25, r25
 46e:	88 0f       	add	r24, r24
 470:	99 1f       	adc	r25, r25
 472:	85 5e       	subi	r24, 0xE5	; 229
 474:	9e 4f       	sbci	r25, 0xFE	; 254
 476:	a8 0f       	add	r26, r24
 478:	b9 1f       	adc	r27, r25
 47a:	2c 93       	st	X, r18
            ledMatrix[indexX+1][indexY]=1;
 47c:	dc 01       	movw	r26, r24
 47e:	a4 0f       	add	r26, r20
 480:	b5 1f       	adc	r27, r21
 482:	2c 93       	st	X, r18
            ledMatrix[indexX+1][indexY+1]=1;
 484:	e8 0f       	add	r30, r24
 486:	f9 1f       	adc	r31, r25
 488:	20 83       	st	Z, r18
        break;
 48a:	1e c0       	rjmp	.+60     	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
        case displayMatrix:
            PORTD=0xFF;
 48c:	8f ef       	ldi	r24, 0xFF	; 255
 48e:	8b b9       	out	0x0b, r24	; 11
            if(cellCounter==64)
 490:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
 494:	80 34       	cpi	r24, 0x40	; 64
 496:	11 f4       	brne	.+4      	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
                cellCounter=0;
 498:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <__data_end>
            PORTB=(0x01<<(cellCounter/8));
 49c:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <__data_end>
 4a0:	26 95       	lsr	r18
 4a2:	26 95       	lsr	r18
 4a4:	26 95       	lsr	r18
 4a6:	81 e0       	ldi	r24, 0x01	; 1
 4a8:	90 e0       	ldi	r25, 0x00	; 0
 4aa:	02 c0       	rjmp	.+4      	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
 4ac:	88 0f       	add	r24, r24
 4ae:	99 1f       	adc	r25, r25
 4b0:	2a 95       	dec	r18
 4b2:	e2 f7       	brpl	.-8      	; 0x4ac <__LOCK_REGION_LENGTH__+0xac>
 4b4:	85 b9       	out	0x05, r24	; 5
            PORTD=displayCell(cellCounter);
 4b6:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
 4ba:	4f df       	rcall	.-354    	; 0x35a <displayCell>
 4bc:	8b b9       	out	0x0b, r24	; 11
            cellCounter+=8;
 4be:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
 4c2:	88 5f       	subi	r24, 0xF8	; 248
 4c4:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>
            break;
        default:
        break;                               
    }
}
 4c8:	df 91       	pop	r29
 4ca:	cf 91       	pop	r28
 4cc:	08 95       	ret

000004ce <main>:
int main(void)
{
    DDRA=0x00; PORTA=0xFF;
 4ce:	11 b8       	out	0x01, r1	; 1
 4d0:	8f ef       	ldi	r24, 0xFF	; 255
 4d2:	82 b9       	out	0x02, r24	; 2
    DDRB=0xFF;PORTB=0x00; 
 4d4:	84 b9       	out	0x04, r24	; 4
 4d6:	15 b8       	out	0x05, r1	; 5
    DDRC=0xFF;PORTC=0x00;
 4d8:	87 b9       	out	0x07, r24	; 7
 4da:	18 b8       	out	0x08, r1	; 8
    DDRD=0xFF;PORTD=0x00;
 4dc:	8a b9       	out	0x0a, r24	; 10
 4de:	1b b8       	out	0x0b, r1	; 11
    PORTD=0xFF;
 4e0:	8b b9       	out	0x0b, r24	; 11
    /* Replace with your application code */
      TimerSet(1);
 4e2:	61 e0       	ldi	r22, 0x01	; 1
 4e4:	70 e0       	ldi	r23, 0x00	; 0
 4e6:	80 e0       	ldi	r24, 0x00	; 0
 4e8:	90 e0       	ldi	r25, 0x00	; 0
      TimerOn();
 4ea:	4d de       	rcall	.-870    	; 0x186 <TimerSet>
 4ec:	ed dd       	rcall	.-1062   	; 0xc8 <TimerOn>
      //LCD_DisplayString(1,"Hello World!");    //LCD SCREEN CHECK
      SM1_state=Start1;
 4ee:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <SM1_state>
      SM2_state=Start2;
 4f2:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <SM2_state>
      SM3_state=Start3;
 4f6:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <SM3_state>
      SM4_state=Start4;
 4fa:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <SM4_state>
      SM5_state=Start5;
 4fe:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <SM5_state>
      SM6_state=Start6;
 502:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <SM6_state>
      {
         if(counter==100)
         {
            TickSM1();
            TickSM2();
            TickSM3();
 506:	c0 e0       	ldi	r28, 0x00	; 0
            TickSM4();
 508:	c4 36       	cpi	r28, 0x64	; 100
            TickSM5();
 50a:	41 f4       	brne	.+16     	; 0x51c <main+0x4e>
 50c:	4d de       	rcall	.-870    	; 0x1a8 <TickSM1>
            TickSM3();
 50e:	77 de       	rcall	.-786    	; 0x1fe <TickSM2>
 510:	9e de       	rcall	.-708    	; 0x24e <TickSM3>
            counter=0x00;
 512:	d5 de       	rcall	.-598    	; 0x2be <TickSM4>
 514:	fb de       	rcall	.-522    	; 0x30c <TickSM5>
         }
         else
         {         
         TickSM6();
 516:	9b de       	rcall	.-714    	; 0x24e <TickSM3>
 518:	c0 e0       	ldi	r28, 0x00	; 0
         counter++;
 51a:	02 c0       	rjmp	.+4      	; 0x520 <main+0x52>
         }         
         while(!TimerFlag);
 51c:	42 df       	rcall	.-380    	; 0x3a2 <TickSM6>
 51e:	cf 5f       	subi	r28, 0xFF	; 255
 520:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <TimerFlag>
         TimerFlag = 0;
 524:	88 23       	and	r24, r24
 526:	e1 f3       	breq	.-8      	; 0x520 <main+0x52>
      }
 528:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <TimerFlag>
 52c:	ed cf       	rjmp	.-38     	; 0x508 <main+0x3a>

0000052e <_exit>:
 52e:	f8 94       	cli

00000530 <__stop_program>:
 530:	ff cf       	rjmp	.-2      	; 0x530 <__stop_program>
