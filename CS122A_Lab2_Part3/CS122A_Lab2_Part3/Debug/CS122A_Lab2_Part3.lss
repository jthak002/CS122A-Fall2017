
CS122A_Lab2_Part3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000412  000004a6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000412  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000011  00800104  00800104  000004aa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004aa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004dc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  0000051c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ce8  00000000  00000000  000005bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000925  00000000  00000000  000012a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000063f  00000000  00000000  00001bc9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000144  00000000  00000000  00002208  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005c6  00000000  00000000  0000234c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001e7  00000000  00000000  00002912  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  00002af9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	cf c0       	rjmp	.+414    	; 0x1d4 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 e1       	ldi	r30, 0x12	; 18
  a0:	f4 e0       	ldi	r31, 0x04	; 4
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 30       	cpi	r26, 0x04	; 4
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a4 e0       	ldi	r26, 0x04	; 4
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a5 31       	cpi	r26, 0x15	; 21
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	7c d1       	rcall	.+760    	; 0x3bc <main>
  c4:	a4 c1       	rjmp	.+840    	; 0x40e <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <initUSART>:
void TimerOff(){
    TCCR1B = 0x00;
}

void TimerISR(){
    TimerFlag = 1;
  c8:	81 30       	cpi	r24, 0x01	; 1
  ca:	81 f0       	breq	.+32     	; 0xec <initUSART+0x24>
  cc:	e1 ec       	ldi	r30, 0xC1	; 193
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	80 81       	ld	r24, Z
  d2:	88 61       	ori	r24, 0x18	; 24
  d4:	80 83       	st	Z, r24
  d6:	e2 ec       	ldi	r30, 0xC2	; 194
  d8:	f0 e0       	ldi	r31, 0x00	; 0
  da:	80 81       	ld	r24, Z
  dc:	86 60       	ori	r24, 0x06	; 6
  de:	80 83       	st	Z, r24
  e0:	83 e3       	ldi	r24, 0x33	; 51
  e2:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
  e6:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
  ea:	08 95       	ret
  ec:	e9 ec       	ldi	r30, 0xC9	; 201
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	80 81       	ld	r24, Z
  f2:	88 61       	ori	r24, 0x18	; 24
  f4:	80 83       	st	Z, r24
  f6:	ea ec       	ldi	r30, 0xCA	; 202
  f8:	f0 e0       	ldi	r31, 0x00	; 0
  fa:	80 81       	ld	r24, Z
  fc:	86 60       	ori	r24, 0x06	; 6
  fe:	80 83       	st	Z, r24
 100:	83 e3       	ldi	r24, 0x33	; 51
 102:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
 106:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
 10a:	08 95       	ret

0000010c <USART_Flush>:
 10c:	81 30       	cpi	r24, 0x01	; 1
 10e:	29 f4       	brne	.+10     	; 0x11a <USART_Flush+0xe>
 110:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
 114:	88 23       	and	r24, r24
 116:	74 f0       	brlt	.+28     	; 0x134 <USART_Flush+0x28>
 118:	08 95       	ret
 11a:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 11e:	88 23       	and	r24, r24
 120:	8c f4       	brge	.+34     	; 0x144 <USART_Flush+0x38>
 122:	a6 ec       	ldi	r26, 0xC6	; 198
 124:	b0 e0       	ldi	r27, 0x00	; 0
 126:	e0 ec       	ldi	r30, 0xC0	; 192
 128:	f0 e0       	ldi	r31, 0x00	; 0
 12a:	8c 91       	ld	r24, X
 12c:	80 81       	ld	r24, Z
 12e:	88 23       	and	r24, r24
 130:	e4 f3       	brlt	.-8      	; 0x12a <USART_Flush+0x1e>
 132:	08 95       	ret
 134:	ae ec       	ldi	r26, 0xCE	; 206
 136:	b0 e0       	ldi	r27, 0x00	; 0
 138:	e8 ec       	ldi	r30, 0xC8	; 200
 13a:	f0 e0       	ldi	r31, 0x00	; 0
 13c:	8c 91       	ld	r24, X
 13e:	80 81       	ld	r24, Z
 140:	88 23       	and	r24, r24
 142:	e4 f3       	brlt	.-8      	; 0x13c <USART_Flush+0x30>
 144:	08 95       	ret

00000146 <USART_Send>:
 146:	61 30       	cpi	r22, 0x01	; 1
 148:	41 f0       	breq	.+16     	; 0x15a <USART_Send+0x14>
 14a:	e0 ec       	ldi	r30, 0xC0	; 192
 14c:	f0 e0       	ldi	r31, 0x00	; 0
 14e:	90 81       	ld	r25, Z
 150:	95 ff       	sbrs	r25, 5
 152:	fd cf       	rjmp	.-6      	; 0x14e <USART_Send+0x8>
 154:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 158:	08 95       	ret
 15a:	e8 ec       	ldi	r30, 0xC8	; 200
 15c:	f0 e0       	ldi	r31, 0x00	; 0
 15e:	90 81       	ld	r25, Z
 160:	95 ff       	sbrs	r25, 5
 162:	fd cf       	rjmp	.-6      	; 0x15e <USART_Send+0x18>
 164:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
 168:	08 95       	ret

0000016a <USART_Receive>:
 16a:	81 30       	cpi	r24, 0x01	; 1
 16c:	41 f0       	breq	.+16     	; 0x17e <USART_Receive+0x14>
 16e:	e0 ec       	ldi	r30, 0xC0	; 192
 170:	f0 e0       	ldi	r31, 0x00	; 0
 172:	80 81       	ld	r24, Z
 174:	88 23       	and	r24, r24
 176:	ec f7       	brge	.-6      	; 0x172 <USART_Receive+0x8>
 178:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 17c:	08 95       	ret
 17e:	e8 ec       	ldi	r30, 0xC8	; 200
 180:	f0 e0       	ldi	r31, 0x00	; 0
 182:	80 81       	ld	r24, Z
 184:	88 23       	and	r24, r24
 186:	ec f7       	brge	.-6      	; 0x182 <USART_Receive+0x18>
 188:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
 18c:	08 95       	ret

0000018e <TimerOn>:
 18e:	8b e0       	ldi	r24, 0x0B	; 11
 190:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 194:	8d e7       	ldi	r24, 0x7D	; 125
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 19c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 1a0:	82 e0       	ldi	r24, 0x02	; 2
 1a2:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 1a6:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 1aa:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 1ae:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 1b2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 1b6:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 1ba:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 1be:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <avr_timer_cntcurr>
 1c2:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <avr_timer_cntcurr+0x1>
 1c6:	a0 93 0e 01 	sts	0x010E, r26	; 0x80010e <avr_timer_cntcurr+0x2>
 1ca:	b0 93 0f 01 	sts	0x010F, r27	; 0x80010f <avr_timer_cntcurr+0x3>
 1ce:	80 e8       	ldi	r24, 0x80	; 128
 1d0:	8f bf       	out	0x3f, r24	; 63
 1d2:	08 95       	ret

000001d4 <__vector_13>:
}

ISR(TIMER1_COMPA_vect){
 1d4:	1f 92       	push	r1
 1d6:	0f 92       	push	r0
 1d8:	0f b6       	in	r0, 0x3f	; 63
 1da:	0f 92       	push	r0
 1dc:	11 24       	eor	r1, r1
 1de:	8f 93       	push	r24
 1e0:	9f 93       	push	r25
 1e2:	af 93       	push	r26
 1e4:	bf 93       	push	r27
    avr_timer_cntcurr--;
 1e6:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <avr_timer_cntcurr>
 1ea:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <avr_timer_cntcurr+0x1>
 1ee:	a0 91 0e 01 	lds	r26, 0x010E	; 0x80010e <avr_timer_cntcurr+0x2>
 1f2:	b0 91 0f 01 	lds	r27, 0x010F	; 0x80010f <avr_timer_cntcurr+0x3>
 1f6:	01 97       	sbiw	r24, 0x01	; 1
 1f8:	a1 09       	sbc	r26, r1
 1fa:	b1 09       	sbc	r27, r1
 1fc:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <avr_timer_cntcurr>
 200:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <avr_timer_cntcurr+0x1>
 204:	a0 93 0e 01 	sts	0x010E, r26	; 0x80010e <avr_timer_cntcurr+0x2>
 208:	b0 93 0f 01 	sts	0x010F, r27	; 0x80010f <avr_timer_cntcurr+0x3>
    if (avr_timer_cntcurr == 0){
 20c:	89 2b       	or	r24, r25
 20e:	8a 2b       	or	r24, r26
 210:	8b 2b       	or	r24, r27
 212:	99 f4       	brne	.+38     	; 0x23a <__vector_13+0x66>
void TimerOff(){
    TCCR1B = 0x00;
}

void TimerISR(){
    TimerFlag = 1;
 214:	81 e0       	ldi	r24, 0x01	; 1
 216:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <TimerFlag>

ISR(TIMER1_COMPA_vect){
    avr_timer_cntcurr--;
    if (avr_timer_cntcurr == 0){
        TimerISR();
        avr_timer_cntcurr = avr_timer_M;
 21a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 21e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 222:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 226:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 22a:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <avr_timer_cntcurr>
 22e:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <avr_timer_cntcurr+0x1>
 232:	a0 93 0e 01 	sts	0x010E, r26	; 0x80010e <avr_timer_cntcurr+0x2>
 236:	b0 93 0f 01 	sts	0x010F, r27	; 0x80010f <avr_timer_cntcurr+0x3>
        
    }
}
 23a:	bf 91       	pop	r27
 23c:	af 91       	pop	r26
 23e:	9f 91       	pop	r25
 240:	8f 91       	pop	r24
 242:	0f 90       	pop	r0
 244:	0f be       	out	0x3f, r0	; 63
 246:	0f 90       	pop	r0
 248:	1f 90       	pop	r1
 24a:	18 95       	reti

0000024c <TimerSet>:

void TimerSet(unsigned long M){
    avr_timer_M = M;
 24c:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
 250:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
 254:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
 258:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
    avr_timer_cntcurr = avr_timer_M;
 25c:	60 93 0c 01 	sts	0x010C, r22	; 0x80010c <avr_timer_cntcurr>
 260:	70 93 0d 01 	sts	0x010D, r23	; 0x80010d <avr_timer_cntcurr+0x1>
 264:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <avr_timer_cntcurr+0x2>
 268:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <avr_timer_cntcurr+0x3>
 26c:	08 95       	ret

0000026e <Tick_SM_1>:
unsigned char supposed_b_val=0;
unsigned char leader=0;
unsigned char port_b_val=0;
unsigned long time_elapsed_since_last_packet=0;
void Tick_SM_1(){
    switch(SM_1){
 26e:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <SM_1>
 272:	81 30       	cpi	r24, 0x01	; 1
 274:	41 f0       	breq	.+16     	; 0x286 <Tick_SM_1+0x18>
 276:	18 f0       	brcs	.+6      	; 0x27e <Tick_SM_1+0x10>
 278:	82 30       	cpi	r24, 0x02	; 2
 27a:	69 f0       	breq	.+26     	; 0x296 <Tick_SM_1+0x28>
 27c:	14 c0       	rjmp	.+40     	; 0x2a6 <Tick_SM_1+0x38>
        case Start_1:
            SM_1=DATA_RECEIVE;
 27e:	82 e0       	ldi	r24, 0x02	; 2
 280:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <SM_1>
        break;
 284:	22 c0       	rjmp	.+68     	; 0x2ca <Tick_SM_1+0x5c>

        case DATA_TRANSMIT:
            if(leader){
 286:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <leader>
 28a:	81 11       	cpse	r24, r1
 28c:	11 c0       	rjmp	.+34     	; 0x2b0 <Tick_SM_1+0x42>
                SM_1=DATA_TRANSMIT;
            }
            else{
                SM_1=DATA_RECEIVE;
 28e:	82 e0       	ldi	r24, 0x02	; 2
 290:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <SM_1>
 294:	1a c0       	rjmp	.+52     	; 0x2ca <Tick_SM_1+0x5c>
            }
        break;

        case DATA_RECEIVE:
            if(leader){
 296:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <leader>
 29a:	88 23       	and	r24, r24
 29c:	b1 f0       	breq	.+44     	; 0x2ca <Tick_SM_1+0x5c>
                SM_1=DATA_TRANSMIT;
 29e:	81 e0       	ldi	r24, 0x01	; 1
 2a0:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <SM_1>
 2a4:	05 c0       	rjmp	.+10     	; 0x2b0 <Tick_SM_1+0x42>
            }      
        break;

        default:break;
    }
    switch(SM_1){
 2a6:	81 30       	cpi	r24, 0x01	; 1
 2a8:	19 f0       	breq	.+6      	; 0x2b0 <Tick_SM_1+0x42>
 2aa:	82 30       	cpi	r24, 0x02	; 2
 2ac:	01 f5       	brne	.+64     	; 0x2ee <Tick_SM_1+0x80>
 2ae:	0d c0       	rjmp	.+26     	; 0x2ca <Tick_SM_1+0x5c>
//Functionality - checks if USART is ready to send
//Parameter: usartNum specifies which USART is checked
//Returns: 1 if true else 0
unsigned char USART_IsSendReady(unsigned char usartNum)
{
	return (usartNum != 1) ? (UCSR0A & (1 << UDRE0)) : (UCSR1A & (1 << UDRE1));
 2b0:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
        case Start_1:
        break;

        case DATA_TRANSMIT:
            if(USART_IsSendReady(1))
 2b4:	85 ff       	sbrs	r24, 5
 2b6:	04 c0       	rjmp	.+8      	; 0x2c0 <Tick_SM_1+0x52>
            {
                USART_Send(supposed_b_val,1);
 2b8:	61 e0       	ldi	r22, 0x01	; 1
 2ba:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <supposed_b_val>
 2be:	43 df       	rcall	.-378    	; 0x146 <USART_Send>
            }
            port_b_val=supposed_b_val;
 2c0:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <supposed_b_val>
 2c4:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <port_b_val>
        break;
 2c8:	08 95       	ret
//Functionality - checks if USART has recieved data
//Parameter: usartNum specifies which USART is checked
//Returns: 1 if true else 0
unsigned char USART_HasReceived(unsigned char usartNum)
{
	return (usartNum != 1) ? (UCSR0A & (1 << RXC0)) : (UCSR1A & (1 << RXC1));
 2ca:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>

        case DATA_RECEIVE:
            if(USART_HasReceived(0))
 2ce:	88 23       	and	r24, r24
            {
                port_b_val=USART_Receive(0);
 2d0:	74 f4       	brge	.+28     	; 0x2ee <Tick_SM_1+0x80>
 2d2:	80 e0       	ldi	r24, 0x00	; 0
 2d4:	4a df       	rcall	.-364    	; 0x16a <USART_Receive>
                USART_Flush(0);
 2d6:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <port_b_val>
 2da:	80 e0       	ldi	r24, 0x00	; 0
                time_elapsed_since_last_packet=0;
 2dc:	17 df       	rcall	.-466    	; 0x10c <USART_Flush>
 2de:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <time_elapsed_since_last_packet>
 2e2:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <time_elapsed_since_last_packet+0x1>
 2e6:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <time_elapsed_since_last_packet+0x2>
 2ea:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <time_elapsed_since_last_packet+0x3>
 2ee:	08 95       	ret

000002f0 <Tick_SM_2>:
}

enum State_2{Start_2, CHANGE_LED}SM_2;
unsigned char counter_val=0x00;
void Tick_SM_2(){
    switch(SM_2){
 2f0:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <SM_2>
 2f4:	88 23       	and	r24, r24
 2f6:	19 f0       	breq	.+6      	; 0x2fe <Tick_SM_2+0xe>
 2f8:	81 30       	cpi	r24, 0x01	; 1
 2fa:	39 f0       	breq	.+14     	; 0x30a <Tick_SM_2+0x1a>
 2fc:	04 c0       	rjmp	.+8      	; 0x306 <Tick_SM_2+0x16>
        case Start_2:
            SM_2=CHANGE_LED;
 2fe:	81 e0       	ldi	r24, 0x01	; 1
 300:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <SM_2>
            break;
 304:	02 c0       	rjmp	.+4      	; 0x30a <Tick_SM_2+0x1a>
        case CHANGE_LED:
            SM_2=CHANGE_LED;
            break;
        default:break;
    }
    switch(SM_2){
 306:	81 30       	cpi	r24, 0x01	; 1
 308:	a1 f4       	brne	.+40     	; 0x332 <Tick_SM_2+0x42>
        case CHANGE_LED:
            if(counter_val<99)
 30a:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 30e:	83 36       	cpi	r24, 0x63	; 99
 310:	20 f4       	brcc	.+8      	; 0x31a <Tick_SM_2+0x2a>
                counter_val++;
 312:	8f 5f       	subi	r24, 0xFF	; 255
 314:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 318:	08 95       	ret
            else{
                if(supposed_b_val==0x00)
 31a:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <supposed_b_val>
 31e:	81 11       	cpse	r24, r1
 320:	04 c0       	rjmp	.+8      	; 0x32a <Tick_SM_2+0x3a>
                    supposed_b_val=0x01;
 322:	81 e0       	ldi	r24, 0x01	; 1
 324:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <supposed_b_val>
 328:	02 c0       	rjmp	.+4      	; 0x32e <Tick_SM_2+0x3e>
                else
                    supposed_b_val=0x00;
 32a:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <supposed_b_val>
                counter_val=0;
 32e:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <__data_end>
 332:	08 95       	ret

00000334 <Tick_SM_3>:
    }
  
}
enum State_3{Start_3,LED_DISPLAY}SM_3;
void Tick_SM_3(){
    switch(SM_3){
 334:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <SM_3>
 338:	88 23       	and	r24, r24
 33a:	19 f0       	breq	.+6      	; 0x342 <Tick_SM_3+0xe>
 33c:	81 30       	cpi	r24, 0x01	; 1
 33e:	39 f0       	breq	.+14     	; 0x34e <Tick_SM_3+0x1a>
 340:	04 c0       	rjmp	.+8      	; 0x34a <Tick_SM_3+0x16>
        case Start_3:
            SM_3=LED_DISPLAY;
 342:	81 e0       	ldi	r24, 0x01	; 1
 344:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <SM_3>
            break;
 348:	02 c0       	rjmp	.+4      	; 0x34e <Tick_SM_3+0x1a>
        case LED_DISPLAY:
            SM_3=LED_DISPLAY;
            break;
        default:break;
    }
    switch(SM_3){
 34a:	81 30       	cpi	r24, 0x01	; 1
 34c:	59 f4       	brne	.+22     	; 0x364 <Tick_SM_3+0x30>
        case LED_DISPLAY:
            PORTB=port_b_val;
 34e:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <port_b_val>
 352:	85 b9       	out	0x05, r24	; 5
            if(leader)
 354:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <leader>
 358:	88 23       	and	r24, r24
 35a:	19 f0       	breq	.+6      	; 0x362 <Tick_SM_3+0x2e>
                PORTC=0xFF;
 35c:	8f ef       	ldi	r24, 0xFF	; 255
 35e:	88 b9       	out	0x08, r24	; 8
 360:	08 95       	ret
            else
                PORTC=0x00;
 362:	18 b8       	out	0x08, r1	; 8
 364:	08 95       	ret

00000366 <Tick_SM_4>:
    }
}

enum State_4{Start_4,CHECK_LEADER_SWITCH}SM_4;
void Tick_SM_4(){
    switch(SM_4){
 366:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <SM_4>
 36a:	88 23       	and	r24, r24
 36c:	19 f0       	breq	.+6      	; 0x374 <Tick_SM_4+0xe>
 36e:	81 30       	cpi	r24, 0x01	; 1
 370:	39 f0       	breq	.+14     	; 0x380 <Tick_SM_4+0x1a>
 372:	04 c0       	rjmp	.+8      	; 0x37c <Tick_SM_4+0x16>
        case Start_4:
            SM_4=CHECK_LEADER_SWITCH;
 374:	81 e0       	ldi	r24, 0x01	; 1
 376:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <SM_4>
            break;
 37a:	02 c0       	rjmp	.+4      	; 0x380 <Tick_SM_4+0x1a>
        case CHECK_LEADER_SWITCH:
            SM_4=CHECK_LEADER_SWITCH;
            break;
        default:break;
    }
    switch(SM_4){
 37c:	81 30       	cpi	r24, 0x01	; 1
 37e:	e9 f4       	brne	.+58     	; 0x3ba <Tick_SM_4+0x54>
        case CHECK_LEADER_SWITCH:
            if(time_elapsed_since_last_packet<299)
 380:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <time_elapsed_since_last_packet>
 384:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <time_elapsed_since_last_packet+0x1>
 388:	a0 91 07 01 	lds	r26, 0x0107	; 0x800107 <time_elapsed_since_last_packet+0x2>
 38c:	b0 91 08 01 	lds	r27, 0x0108	; 0x800108 <time_elapsed_since_last_packet+0x3>
 390:	8b 32       	cpi	r24, 0x2B	; 43
 392:	21 e0       	ldi	r18, 0x01	; 1
 394:	92 07       	cpc	r25, r18
 396:	a1 05       	cpc	r26, r1
 398:	b1 05       	cpc	r27, r1
 39a:	60 f4       	brcc	.+24     	; 0x3b4 <Tick_SM_4+0x4e>
                time_elapsed_since_last_packet++;
 39c:	01 96       	adiw	r24, 0x01	; 1
 39e:	a1 1d       	adc	r26, r1
 3a0:	b1 1d       	adc	r27, r1
 3a2:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <time_elapsed_since_last_packet>
 3a6:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <time_elapsed_since_last_packet+0x1>
 3aa:	a0 93 07 01 	sts	0x0107, r26	; 0x800107 <time_elapsed_since_last_packet+0x2>
 3ae:	b0 93 08 01 	sts	0x0108, r27	; 0x800108 <time_elapsed_since_last_packet+0x3>
 3b2:	08 95       	ret
            else
                leader=0x01;  
 3b4:	81 e0       	ldi	r24, 0x01	; 1
 3b6:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <leader>
 3ba:	08 95       	ret

000003bc <main>:
        default:break;
    }
}
int main(void)
{
    DDRA=0x00;PORTA=0xFF;
 3bc:	11 b8       	out	0x01, r1	; 1
 3be:	8f ef       	ldi	r24, 0xFF	; 255
 3c0:	82 b9       	out	0x02, r24	; 2
    DDRC=0xFF;PORTC=0x00;
 3c2:	87 b9       	out	0x07, r24	; 7
 3c4:	18 b8       	out	0x08, r1	; 8
    DDRB = 0xFF;PORTB = 0x00;
 3c6:	84 b9       	out	0x04, r24	; 4
 3c8:	15 b8       	out	0x05, r1	; 5
    initUSART(0);
 3ca:	80 e0       	ldi	r24, 0x00	; 0
    initUSART(1);
 3cc:	7d de       	rcall	.-774    	; 0xc8 <initUSART>
 3ce:	81 e0       	ldi	r24, 0x01	; 1
    TimerSet(10);
 3d0:	7b de       	rcall	.-778    	; 0xc8 <initUSART>
 3d2:	6a e0       	ldi	r22, 0x0A	; 10
 3d4:	70 e0       	ldi	r23, 0x00	; 0
 3d6:	80 e0       	ldi	r24, 0x00	; 0
    TimerOn();
 3d8:	90 e0       	ldi	r25, 0x00	; 0
 3da:	38 df       	rcall	.-400    	; 0x24c <TimerSet>
    int m;
    while(++m<299);
 3dc:	d8 de       	rcall	.-592    	; 0x18e <TimerOn>
 3de:	21 96       	adiw	r28, 0x01	; 1
 3e0:	cb 32       	cpi	r28, 0x2B	; 43
 3e2:	81 e0       	ldi	r24, 0x01	; 1
 3e4:	d8 07       	cpc	r29, r24
    SM_1=Start_1;
 3e6:	dc f3       	brlt	.-10     	; 0x3de <main+0x22>
 3e8:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <SM_1>
    SM_2=Start_2;
    SM_3=Start_3;
    SM_4=Start_4;
    while(1)
    {
        Tick_SM_4();
 3ec:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <SM_2>
        Tick_SM_1();
 3f0:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <SM_3>
        Tick_SM_2();
 3f4:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <SM_4>
        Tick_SM_3();
 3f8:	b6 df       	rcall	.-148    	; 0x366 <Tick_SM_4>
 3fa:	39 df       	rcall	.-398    	; 0x26e <Tick_SM_1>
        while(!TimerFlag);
 3fc:	79 df       	rcall	.-270    	; 0x2f0 <Tick_SM_2>
 3fe:	9a df       	rcall	.-204    	; 0x334 <Tick_SM_3>
 400:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <TimerFlag>
        TimerFlag = 0;
 404:	88 23       	and	r24, r24
 406:	e1 f3       	breq	.-8      	; 0x400 <__LOCK_REGION_LENGTH__>
    }
 408:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <TimerFlag>
 40c:	f5 cf       	rjmp	.-22     	; 0x3f8 <main+0x3c>

0000040e <_exit>:
 40e:	f8 94       	cli

00000410 <__stop_program>:
 410:	ff cf       	rjmp	.-2      	; 0x410 <__stop_program>
