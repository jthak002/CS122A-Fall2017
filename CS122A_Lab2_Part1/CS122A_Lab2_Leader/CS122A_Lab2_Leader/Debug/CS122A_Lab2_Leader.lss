
CS122A_Lab2_Leader.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000290  00000324  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000290  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  00800104  00800104  00000328  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000328  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000358  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  00000398  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b3f  00000000  00000000  00000420  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000916  00000000  00000000  00000f5f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000050e  00000000  00000000  00001875  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000114  00000000  00000000  00001d84  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000507  00000000  00000000  00001e98  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001d3  00000000  00000000  0000239f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  00002572  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	a0 c0       	rjmp	.+320    	; 0x176 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 e9       	ldi	r30, 0x90	; 144
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 30       	cpi	r26, 0x04	; 4
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a4 e0       	ldi	r26, 0x04	; 4
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ab 30       	cpi	r26, 0x0B	; 11
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	ca d0       	rcall	.+404    	; 0x258 <main>
  c4:	e3 c0       	rjmp	.+454    	; 0x28c <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <initUSART>:
void TimerOff(){
    TCCR1B = 0x00;
}

void TimerISR(){
    TimerFlag = 1;
  c8:	81 30       	cpi	r24, 0x01	; 1
  ca:	81 f0       	breq	.+32     	; 0xec <initUSART+0x24>
  cc:	e1 ec       	ldi	r30, 0xC1	; 193
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	80 81       	ld	r24, Z
  d2:	88 61       	ori	r24, 0x18	; 24
  d4:	80 83       	st	Z, r24
  d6:	e2 ec       	ldi	r30, 0xC2	; 194
  d8:	f0 e0       	ldi	r31, 0x00	; 0
  da:	80 81       	ld	r24, Z
  dc:	86 60       	ori	r24, 0x06	; 6
  de:	80 83       	st	Z, r24
  e0:	83 e3       	ldi	r24, 0x33	; 51
  e2:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
  e6:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
  ea:	08 95       	ret
  ec:	e9 ec       	ldi	r30, 0xC9	; 201
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	80 81       	ld	r24, Z
  f2:	88 61       	ori	r24, 0x18	; 24
  f4:	80 83       	st	Z, r24
  f6:	ea ec       	ldi	r30, 0xCA	; 202
  f8:	f0 e0       	ldi	r31, 0x00	; 0
  fa:	80 81       	ld	r24, Z
  fc:	86 60       	ori	r24, 0x06	; 6
  fe:	80 83       	st	Z, r24
 100:	83 e3       	ldi	r24, 0x33	; 51
 102:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
 106:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
 10a:	08 95       	ret

0000010c <USART_Send>:
 10c:	61 30       	cpi	r22, 0x01	; 1
 10e:	41 f0       	breq	.+16     	; 0x120 <USART_Send+0x14>
 110:	e0 ec       	ldi	r30, 0xC0	; 192
 112:	f0 e0       	ldi	r31, 0x00	; 0
 114:	90 81       	ld	r25, Z
 116:	95 ff       	sbrs	r25, 5
 118:	fd cf       	rjmp	.-6      	; 0x114 <USART_Send+0x8>
 11a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 11e:	08 95       	ret
 120:	e8 ec       	ldi	r30, 0xC8	; 200
 122:	f0 e0       	ldi	r31, 0x00	; 0
 124:	90 81       	ld	r25, Z
 126:	95 ff       	sbrs	r25, 5
 128:	fd cf       	rjmp	.-6      	; 0x124 <USART_Send+0x18>
 12a:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
 12e:	08 95       	ret

00000130 <TimerOn>:
 130:	8b e0       	ldi	r24, 0x0B	; 11
 132:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 136:	8d e7       	ldi	r24, 0x7D	; 125
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 13e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 142:	82 e0       	ldi	r24, 0x02	; 2
 144:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 148:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 14c:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 150:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 154:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 158:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 15c:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 160:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <avr_timer_cntcurr>
 164:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <avr_timer_cntcurr+0x1>
 168:	a0 93 07 01 	sts	0x0107, r26	; 0x800107 <avr_timer_cntcurr+0x2>
 16c:	b0 93 08 01 	sts	0x0108, r27	; 0x800108 <avr_timer_cntcurr+0x3>
 170:	80 e8       	ldi	r24, 0x80	; 128
 172:	8f bf       	out	0x3f, r24	; 63
 174:	08 95       	ret

00000176 <__vector_13>:
}

ISR(TIMER1_COMPA_vect){
 176:	1f 92       	push	r1
 178:	0f 92       	push	r0
 17a:	0f b6       	in	r0, 0x3f	; 63
 17c:	0f 92       	push	r0
 17e:	11 24       	eor	r1, r1
 180:	8f 93       	push	r24
 182:	9f 93       	push	r25
 184:	af 93       	push	r26
 186:	bf 93       	push	r27
    avr_timer_cntcurr--;
 188:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <avr_timer_cntcurr>
 18c:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <avr_timer_cntcurr+0x1>
 190:	a0 91 07 01 	lds	r26, 0x0107	; 0x800107 <avr_timer_cntcurr+0x2>
 194:	b0 91 08 01 	lds	r27, 0x0108	; 0x800108 <avr_timer_cntcurr+0x3>
 198:	01 97       	sbiw	r24, 0x01	; 1
 19a:	a1 09       	sbc	r26, r1
 19c:	b1 09       	sbc	r27, r1
 19e:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <avr_timer_cntcurr>
 1a2:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <avr_timer_cntcurr+0x1>
 1a6:	a0 93 07 01 	sts	0x0107, r26	; 0x800107 <avr_timer_cntcurr+0x2>
 1aa:	b0 93 08 01 	sts	0x0108, r27	; 0x800108 <avr_timer_cntcurr+0x3>
    if (avr_timer_cntcurr == 0){
 1ae:	89 2b       	or	r24, r25
 1b0:	8a 2b       	or	r24, r26
 1b2:	8b 2b       	or	r24, r27
 1b4:	99 f4       	brne	.+38     	; 0x1dc <__vector_13+0x66>
void TimerOff(){
    TCCR1B = 0x00;
}

void TimerISR(){
    TimerFlag = 1;
 1b6:	81 e0       	ldi	r24, 0x01	; 1
 1b8:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <TimerFlag>

ISR(TIMER1_COMPA_vect){
    avr_timer_cntcurr--;
    if (avr_timer_cntcurr == 0){
        TimerISR();
        avr_timer_cntcurr = avr_timer_M;
 1bc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 1c0:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 1c4:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 1c8:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 1cc:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <avr_timer_cntcurr>
 1d0:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <avr_timer_cntcurr+0x1>
 1d4:	a0 93 07 01 	sts	0x0107, r26	; 0x800107 <avr_timer_cntcurr+0x2>
 1d8:	b0 93 08 01 	sts	0x0108, r27	; 0x800108 <avr_timer_cntcurr+0x3>
        
    }
}
 1dc:	bf 91       	pop	r27
 1de:	af 91       	pop	r26
 1e0:	9f 91       	pop	r25
 1e2:	8f 91       	pop	r24
 1e4:	0f 90       	pop	r0
 1e6:	0f be       	out	0x3f, r0	; 63
 1e8:	0f 90       	pop	r0
 1ea:	1f 90       	pop	r1
 1ec:	18 95       	reti

000001ee <TimerSet>:

void TimerSet(unsigned long M){
    avr_timer_M = M;
 1ee:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
 1f2:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
 1f6:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
 1fa:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
    avr_timer_cntcurr = avr_timer_M;
 1fe:	60 93 05 01 	sts	0x0105, r22	; 0x800105 <avr_timer_cntcurr>
 202:	70 93 06 01 	sts	0x0106, r23	; 0x800106 <avr_timer_cntcurr+0x1>
 206:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <avr_timer_cntcurr+0x2>
 20a:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <avr_timer_cntcurr+0x3>
 20e:	08 95       	ret

00000210 <Tick>:


enum States{Start, LED_ON_AND_TRANSMIT} state;
unsigned char port_b_value=0x00;
void Tick(){
    switch (state){
 210:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <state>
 214:	88 23       	and	r24, r24
 216:	19 f0       	breq	.+6      	; 0x21e <Tick+0xe>
 218:	81 30       	cpi	r24, 0x01	; 1
 21a:	29 f0       	breq	.+10     	; 0x226 <Tick+0x16>
 21c:	0f c0       	rjmp	.+30     	; 0x23c <Tick+0x2c>
        
        case Start:
        state=LED_ON_AND_TRANSMIT;
 21e:	81 e0       	ldi	r24, 0x01	; 1
 220:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <state>
        break;
 224:	0d c0       	rjmp	.+26     	; 0x240 <Tick+0x30>
        
        case LED_ON_AND_TRANSMIT:
        state=LED_ON_AND_TRANSMIT;
        if(port_b_value==0x00)
 226:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 22a:	81 11       	cpse	r24, r1
 22c:	04 c0       	rjmp	.+8      	; 0x236 <Tick+0x26>
            port_b_value=0x01;
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 234:	05 c0       	rjmp	.+10     	; 0x240 <Tick+0x30>
        else
            port_b_value=0x00;
 236:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <__data_end>
 23a:	02 c0       	rjmp	.+4      	; 0x240 <Tick+0x30>
        break;
        
    }
    
    switch (state){
 23c:	81 30       	cpi	r24, 0x01	; 1
 23e:	59 f4       	brne	.+22     	; 0x256 <Tick+0x46>
        
        case LED_ON_AND_TRANSMIT:
        PORTB=port_b_value;
 240:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 244:	85 b9       	out	0x05, r24	; 5
//Functionality - checks if USART is ready to send
//Parameter: usartNum specifies which USART is checked
//Returns: 1 if true else 0
unsigned char USART_IsSendReady(unsigned char usartNum)
{
	return (usartNum != 1) ? (UCSR0A & (1 << UDRE0)) : (UCSR1A & (1 << UDRE1));
 246:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
        if(USART_IsSendReady(0)){
 24a:	85 ff       	sbrs	r24, 5
 24c:	04 c0       	rjmp	.+8      	; 0x256 <Tick+0x46>
            USART_Send(port_b_value,0);
 24e:	60 e0       	ldi	r22, 0x00	; 0
 250:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 254:	5b cf       	rjmp	.-330    	; 0x10c <USART_Send>
 256:	08 95       	ret

00000258 <main>:
    }
}

int main(void)
{
    DDRA=0x01;PORTA=0xFE;
 258:	c1 e0       	ldi	r28, 0x01	; 1
 25a:	c1 b9       	out	0x01, r28	; 1
 25c:	8e ef       	ldi	r24, 0xFE	; 254
 25e:	82 b9       	out	0x02, r24	; 2
    DDRB = 0xFF;PORTB = 0x00;
 260:	8f ef       	ldi	r24, 0xFF	; 255
 262:	84 b9       	out	0x04, r24	; 4
 264:	15 b8       	out	0x05, r1	; 5
    initUSART(0);
 266:	80 e0       	ldi	r24, 0x00	; 0
 268:	2f df       	rcall	.-418    	; 0xc8 <initUSART>
    TimerSet(1000);
 26a:	68 ee       	ldi	r22, 0xE8	; 232
 26c:	73 e0       	ldi	r23, 0x03	; 3
 26e:	80 e0       	ldi	r24, 0x00	; 0
 270:	90 e0       	ldi	r25, 0x00	; 0
    TimerOn();
 272:	bd df       	rcall	.-134    	; 0x1ee <TimerSet>
    
    state = Start;
 274:	5d df       	rcall	.-326    	; 0x130 <TimerOn>
    PORTA=0x01; //LEADER INDICATOR
 276:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <state>
    while(1)
    {
        Tick();
 27a:	c2 b9       	out	0x02, r28	; 2
        
        while(!TimerFlag);
 27c:	c9 df       	rcall	.-110    	; 0x210 <Tick>
 27e:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <TimerFlag>
 282:	88 23       	and	r24, r24
        TimerFlag = 0;
 284:	e1 f3       	breq	.-8      	; 0x27e <main+0x26>
 286:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <TimerFlag>
 28a:	f8 cf       	rjmp	.-16     	; 0x27c <main+0x24>

0000028c <_exit>:
 28c:	f8 94       	cli

0000028e <__stop_program>:
 28e:	ff cf       	rjmp	.-2      	; 0x28e <__stop_program>
