
Lab4_Part1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  00000c6a  00000cfe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c6a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000639  00800112  00800112  00000d10  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000d10  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000d40  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001b8  00000000  00000000  00000d80  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000021cc  00000000  00000000  00000f38  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eb4  00000000  00000000  00003104  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001228  00000000  00000000  00003fb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000448  00000000  00000000  000051e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000c89  00000000  00000000  00005628  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000011ae  00000000  00000000  000062b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001b0  00000000  00000000  0000745f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	aa c2       	rjmp	.+1364   	; 0x58a <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea e6       	ldi	r30, 0x6A	; 106
  a0:	fc e0       	ldi	r31, 0x0C	; 12
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 31       	cpi	r26, 0x12	; 18
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	27 e0       	ldi	r18, 0x07	; 7
  b4:	a2 e1       	ldi	r26, 0x12	; 18
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ab 34       	cpi	r26, 0x4B	; 75
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	02 d1       	rcall	.+516    	; 0x2c8 <main>
  c4:	d0 c5       	rjmp	.+2976   	; 0xc66 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <pvPortMalloc>:

static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	#endif

	vTaskSuspendAll();
  cc:	ec 01       	movw	r28, r24
	{
		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
  ce:	b0 d3       	rcall	.+1888   	; 0x830 <vTaskSuspendAll>
  d0:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <__data_end>
  d4:	30 91 13 01 	lds	r19, 0x0113	; 0x800113 <__data_end+0x1>
  d8:	c9 01       	movw	r24, r18
  da:	8c 0f       	add	r24, r28
  dc:	9d 1f       	adc	r25, r29
  de:	8c 3d       	cpi	r24, 0xDC	; 220
  e0:	45 e0       	ldi	r20, 0x05	; 5
  e2:	94 07       	cpc	r25, r20
  e4:	58 f4       	brcc	.+22     	; 0xfc <pvPortMalloc+0x34>
  e6:	28 17       	cp	r18, r24
  e8:	39 07       	cpc	r19, r25
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
  ea:	58 f4       	brcc	.+22     	; 0x102 <pvPortMalloc+0x3a>
  ec:	e9 01       	movw	r28, r18
  ee:	cc 5e       	subi	r28, 0xEC	; 236
			xNextFreeByte += xWantedSize;			
  f0:	de 4f       	sbci	r29, 0xFE	; 254
  f2:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <__data_end+0x1>
  f6:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <__data_end>
static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL; 
  fa:	05 c0       	rjmp	.+10     	; 0x106 <pvPortMalloc+0x3e>
  fc:	c0 e0       	ldi	r28, 0x00	; 0
  fe:	d0 e0       	ldi	r29, 0x00	; 0
 100:	02 c0       	rjmp	.+4      	; 0x106 <pvPortMalloc+0x3e>
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
			xNextFreeByte += xWantedSize;			
		}	
	}
	xTaskResumeAll();
 102:	c0 e0       	ldi	r28, 0x00	; 0
 104:	d0 e0       	ldi	r29, 0x00	; 0
		}
	}
	#endif	

	return pvReturn;
}
 106:	5b d4       	rcall	.+2230   	; 0x9be <xTaskResumeAll>
 108:	ce 01       	movw	r24, r28
 10a:	df 91       	pop	r29
 10c:	cf 91       	pop	r28
 10e:	08 95       	ret

00000110 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 110:	08 95       	ret

00000112 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
 112:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
 114:	03 96       	adiw	r24, 0x03	; 3
 116:	92 83       	std	Z+2, r25	; 0x02
 118:	81 83       	std	Z+1, r24	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 11a:	2f ef       	ldi	r18, 0xFF	; 255
 11c:	3f ef       	ldi	r19, 0xFF	; 255
 11e:	34 83       	std	Z+4, r19	; 0x04
 120:	23 83       	std	Z+3, r18	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
 122:	96 83       	std	Z+6, r25	; 0x06
 124:	85 83       	std	Z+5, r24	; 0x05
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
 126:	90 87       	std	Z+8, r25	; 0x08
 128:	87 83       	std	Z+7, r24	; 0x07

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
 12a:	10 82       	st	Z, r1
 12c:	08 95       	ret

0000012e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 12e:	fc 01       	movw	r30, r24
 130:	11 86       	std	Z+9, r1	; 0x09
 132:	10 86       	std	Z+8, r1	; 0x08
 134:	08 95       	ret

00000136 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
 136:	cf 93       	push	r28
 138:	df 93       	push	r29
 13a:	fc 01       	movw	r30, r24
 13c:	db 01       	movw	r26, r22

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
 13e:	21 81       	ldd	r18, Z+1	; 0x01
 140:	32 81       	ldd	r19, Z+2	; 0x02

	pxNewListItem->pxNext = pxIndex->pxNext;
 142:	e9 01       	movw	r28, r18
 144:	8a 81       	ldd	r24, Y+2	; 0x02
 146:	9b 81       	ldd	r25, Y+3	; 0x03
 148:	13 96       	adiw	r26, 0x03	; 3
 14a:	9c 93       	st	X, r25
 14c:	8e 93       	st	-X, r24
 14e:	12 97       	sbiw	r26, 0x02	; 2
	pxNewListItem->pxPrevious = pxList->pxIndex;
 150:	81 81       	ldd	r24, Z+1	; 0x01
 152:	92 81       	ldd	r25, Z+2	; 0x02
 154:	15 96       	adiw	r26, 0x05	; 5
 156:	9c 93       	st	X, r25
 158:	8e 93       	st	-X, r24
 15a:	14 97       	sbiw	r26, 0x04	; 4
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
 15c:	8a 81       	ldd	r24, Y+2	; 0x02
 15e:	9b 81       	ldd	r25, Y+3	; 0x03
 160:	ec 01       	movw	r28, r24
 162:	7d 83       	std	Y+5, r23	; 0x05
 164:	6c 83       	std	Y+4, r22	; 0x04
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
 166:	e9 01       	movw	r28, r18
 168:	7b 83       	std	Y+3, r23	; 0x03
 16a:	6a 83       	std	Y+2, r22	; 0x02
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
 16c:	72 83       	std	Z+2, r23	; 0x02
 16e:	61 83       	std	Z+1, r22	; 0x01

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 170:	19 96       	adiw	r26, 0x09	; 9
 172:	fc 93       	st	X, r31
 174:	ee 93       	st	-X, r30
 176:	18 97       	sbiw	r26, 0x08	; 8

	( pxList->uxNumberOfItems )++;
 178:	80 81       	ld	r24, Z
 17a:	8f 5f       	subi	r24, 0xFF	; 255
 17c:	80 83       	st	Z, r24
}
 17e:	df 91       	pop	r29
 180:	cf 91       	pop	r28
 182:	08 95       	ret

00000184 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
 184:	cf 93       	push	r28
 186:	df 93       	push	r29
 188:	eb 01       	movw	r28, r22
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
 18a:	48 81       	ld	r20, Y
 18c:	59 81       	ldd	r21, Y+1	; 0x01
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 18e:	4f 3f       	cpi	r20, 0xFF	; 255
 190:	2f ef       	ldi	r18, 0xFF	; 255
 192:	52 07       	cpc	r21, r18
 194:	31 f4       	brne	.+12     	; 0x1a2 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 196:	dc 01       	movw	r26, r24
 198:	17 96       	adiw	r26, 0x07	; 7
 19a:	ed 91       	ld	r30, X+
 19c:	fc 91       	ld	r31, X
 19e:	18 97       	sbiw	r26, 0x08	; 8
 1a0:	17 c0       	rjmp	.+46     	; 0x1d0 <vListInsert+0x4c>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 1a2:	fc 01       	movw	r30, r24
 1a4:	33 96       	adiw	r30, 0x03	; 3
 1a6:	dc 01       	movw	r26, r24
 1a8:	15 96       	adiw	r26, 0x05	; 5
 1aa:	2d 91       	ld	r18, X+
 1ac:	3c 91       	ld	r19, X
 1ae:	16 97       	sbiw	r26, 0x06	; 6
 1b0:	d9 01       	movw	r26, r18
 1b2:	2d 91       	ld	r18, X+
 1b4:	3c 91       	ld	r19, X
 1b6:	42 17       	cp	r20, r18
 1b8:	53 07       	cpc	r21, r19
 1ba:	50 f0       	brcs	.+20     	; 0x1d0 <vListInsert+0x4c>
 1bc:	02 80       	ldd	r0, Z+2	; 0x02
 1be:	f3 81       	ldd	r31, Z+3	; 0x03
 1c0:	e0 2d       	mov	r30, r0
 1c2:	a2 81       	ldd	r26, Z+2	; 0x02
 1c4:	b3 81       	ldd	r27, Z+3	; 0x03
 1c6:	2d 91       	ld	r18, X+
 1c8:	3c 91       	ld	r19, X
 1ca:	42 17       	cp	r20, r18
 1cc:	53 07       	cpc	r21, r19
 1ce:	b0 f7       	brcc	.-20     	; 0x1bc <vListInsert+0x38>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 1d0:	a2 81       	ldd	r26, Z+2	; 0x02
 1d2:	b3 81       	ldd	r27, Z+3	; 0x03
 1d4:	bb 83       	std	Y+3, r27	; 0x03
 1d6:	aa 83       	std	Y+2, r26	; 0x02
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
 1d8:	15 96       	adiw	r26, 0x05	; 5
 1da:	dc 93       	st	X, r29
 1dc:	ce 93       	st	-X, r28
 1de:	14 97       	sbiw	r26, 0x04	; 4
	pxNewListItem->pxPrevious = pxIterator;
 1e0:	fd 83       	std	Y+5, r31	; 0x05
 1e2:	ec 83       	std	Y+4, r30	; 0x04
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
 1e4:	d3 83       	std	Z+3, r29	; 0x03
 1e6:	c2 83       	std	Z+2, r28	; 0x02

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 1e8:	99 87       	std	Y+9, r25	; 0x09
 1ea:	88 87       	std	Y+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
 1ec:	fc 01       	movw	r30, r24
 1ee:	20 81       	ld	r18, Z
 1f0:	2f 5f       	subi	r18, 0xFF	; 255
 1f2:	20 83       	st	Z, r18
}
 1f4:	df 91       	pop	r29
 1f6:	cf 91       	pop	r28
 1f8:	08 95       	ret

000001fa <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
 1fa:	fc 01       	movw	r30, r24
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 1fc:	a2 81       	ldd	r26, Z+2	; 0x02
 1fe:	b3 81       	ldd	r27, Z+3	; 0x03
 200:	84 81       	ldd	r24, Z+4	; 0x04
 202:	95 81       	ldd	r25, Z+5	; 0x05
 204:	15 96       	adiw	r26, 0x05	; 5
 206:	9c 93       	st	X, r25
 208:	8e 93       	st	-X, r24
 20a:	14 97       	sbiw	r26, 0x04	; 4
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 20c:	a4 81       	ldd	r26, Z+4	; 0x04
 20e:	b5 81       	ldd	r27, Z+5	; 0x05
 210:	82 81       	ldd	r24, Z+2	; 0x02
 212:	93 81       	ldd	r25, Z+3	; 0x03
 214:	13 96       	adiw	r26, 0x03	; 3
 216:	9c 93       	st	X, r25
 218:	8e 93       	st	-X, r24
 21a:	12 97       	sbiw	r26, 0x02	; 2
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
 21c:	a0 85       	ldd	r26, Z+8	; 0x08
 21e:	b1 85       	ldd	r27, Z+9	; 0x09

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 220:	11 96       	adiw	r26, 0x01	; 1
 222:	8d 91       	ld	r24, X+
 224:	9c 91       	ld	r25, X
 226:	12 97       	sbiw	r26, 0x02	; 2
 228:	e8 17       	cp	r30, r24
 22a:	f9 07       	cpc	r31, r25
 22c:	31 f4       	brne	.+12     	; 0x23a <vListRemove+0x40>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 22e:	84 81       	ldd	r24, Z+4	; 0x04
 230:	95 81       	ldd	r25, Z+5	; 0x05
 232:	12 96       	adiw	r26, 0x02	; 2
 234:	9c 93       	st	X, r25
 236:	8e 93       	st	-X, r24
 238:	11 97       	sbiw	r26, 0x01	; 1
	}

	pxItemToRemove->pvContainer = NULL;
 23a:	11 86       	std	Z+9, r1	; 0x09
 23c:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
 23e:	8c 91       	ld	r24, X
 240:	81 50       	subi	r24, 0x01	; 1
 242:	8c 93       	st	X, r24
 244:	08 95       	ret

00000246 <LEDS_Tick>:
	led_state = INIT;
}

void LEDS_Tick(){
    //Transitions
    switch(led_state){
 246:	80 91 4a 07 	lds	r24, 0x074A	; 0x80074a <led_state>
 24a:	81 30       	cpi	r24, 0x01	; 1
 24c:	41 f0       	breq	.+16     	; 0x25e <LEDS_Tick+0x18>
 24e:	18 f0       	brcs	.+6      	; 0x256 <LEDS_Tick+0x10>
 250:	82 30       	cpi	r24, 0x02	; 2
 252:	51 f0       	breq	.+20     	; 0x268 <LEDS_Tick+0x22>
 254:	0d c0       	rjmp	.+26     	; 0x270 <LEDS_Tick+0x2a>
        case INIT:
        led_state = L0;
 256:	81 e0       	ldi	r24, 0x01	; 1
 258:	80 93 4a 07 	sts	0x074A, r24	; 0x80074a <led_state>
        break;
 25c:	0c c0       	rjmp	.+24     	; 0x276 <LEDS_Tick+0x30>
        case L0:
        led_state = L1;
 25e:	82 e0       	ldi	r24, 0x02	; 2
 260:	80 93 4a 07 	sts	0x074A, r24	; 0x80074a <led_state>
	switch(led_state){
		case L0:
		PORTD = 0x15;
		break;
		case L1:
		PORTD = 0x00;
 264:	1b b8       	out	0x0b, r1	; 11
		break;
 266:	08 95       	ret
        break;
        case L0:
        led_state = L1;
        break;
        case L1:
        led_state = L0;
 268:	81 e0       	ldi	r24, 0x01	; 1
 26a:	80 93 4a 07 	sts	0x074A, r24	; 0x80074a <led_state>
        break;
 26e:	03 c0       	rjmp	.+6      	; 0x276 <LEDS_Tick+0x30>
        default:
        led_state=L0;
 270:	81 e0       	ldi	r24, 0x01	; 1
 272:	80 93 4a 07 	sts	0x074A, r24	; 0x80074a <led_state>
        break;
    }
	//Actions
	switch(led_state){
		case L0:
		PORTD = 0x15;
 276:	85 e1       	ldi	r24, 0x15	; 21
 278:	8b b9       	out	0x0b, r24	; 11
 27a:	08 95       	ret

0000027c <LedSecTask>:
#include "task.h" 
#include "croutine.h" 
enum LEDState {INIT,L0,L1,L2,L3,L4,L5,L6,L7} led_state;

void LEDS_Init(){
	led_state = INIT;
 27c:	10 92 4a 07 	sts	0x074A, r1	; 0x80074a <led_state>
{
	LEDS_Init();
   for(;;) 
   { 	
	LEDS_Tick();
	vTaskDelay(1000); 
 280:	e2 df       	rcall	.-60     	; 0x246 <LEDS_Tick>
 282:	88 ee       	ldi	r24, 0xE8	; 232
 284:	93 e0       	ldi	r25, 0x03	; 3
 286:	1c d4       	rcall	.+2104   	; 0xac0 <vTaskDelay>
 288:	fb cf       	rjmp	.-10     	; 0x280 <LedSecTask+0x4>

0000028a <StartSecPulse>:
   } 
}

void StartSecPulse(unsigned portBASE_TYPE Priority)
{
 28a:	af 92       	push	r10
 28c:	bf 92       	push	r11
 28e:	cf 92       	push	r12
 290:	df 92       	push	r13
 292:	ef 92       	push	r14
 294:	ff 92       	push	r15
 296:	0f 93       	push	r16
	xTaskCreate(LedSecTask, (signed portCHAR *)"LedSecTask", configMINIMAL_STACK_SIZE, NULL, Priority, NULL );
 298:	a1 2c       	mov	r10, r1
 29a:	b1 2c       	mov	r11, r1
 29c:	c1 2c       	mov	r12, r1
 29e:	d1 2c       	mov	r13, r1
 2a0:	e1 2c       	mov	r14, r1
 2a2:	f1 2c       	mov	r15, r1
 2a4:	08 2f       	mov	r16, r24
 2a6:	20 e0       	ldi	r18, 0x00	; 0
 2a8:	30 e0       	ldi	r19, 0x00	; 0
 2aa:	45 e5       	ldi	r20, 0x55	; 85
 2ac:	50 e0       	ldi	r21, 0x00	; 0
 2ae:	62 e0       	ldi	r22, 0x02	; 2
 2b0:	71 e0       	ldi	r23, 0x01	; 1
 2b2:	8e e3       	ldi	r24, 0x3E	; 62
 2b4:	91 e0       	ldi	r25, 0x01	; 1
 2b6:	a0 d1       	rcall	.+832    	; 0x5f8 <xTaskGenericCreate>
}	
 2b8:	0f 91       	pop	r16
 2ba:	ff 90       	pop	r15
 2bc:	ef 90       	pop	r14
 2be:	df 90       	pop	r13
 2c0:	cf 90       	pop	r12
 2c2:	bf 90       	pop	r11
 2c4:	af 90       	pop	r10
 2c6:	08 95       	ret

000002c8 <main>:
 
int main(void) 
{ 
   DDRA = 0x00; PORTA=0xFF;
 2c8:	11 b8       	out	0x01, r1	; 1
 2ca:	8f ef       	ldi	r24, 0xFF	; 255
 2cc:	82 b9       	out	0x02, r24	; 2
   DDRD = 0xFF;
 2ce:	8a b9       	out	0x0a, r24	; 10
   //Start Tasks  
   StartSecPulse(1);
 2d0:	81 e0       	ldi	r24, 0x01	; 1
    //RunSchedular 
   vTaskStartScheduler(); 
 2d2:	db df       	rcall	.-74     	; 0x28a <StartSecPulse>
 2d4:	84 d2       	rcall	.+1288   	; 0x7de <vTaskStartScheduler>
 
   return 0; 
 2d6:	80 e0       	ldi	r24, 0x00	; 0
 2d8:	90 e0       	ldi	r25, 0x00	; 0
 2da:	08 95       	ret

000002dc <pxPortInitialiseStack>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
 2dc:	31 e1       	ldi	r19, 0x11	; 17
 2de:	fc 01       	movw	r30, r24
 2e0:	30 83       	st	Z, r19
 2e2:	31 97       	sbiw	r30, 0x01	; 1
 2e4:	22 e2       	ldi	r18, 0x22	; 34
 2e6:	20 83       	st	Z, r18
 2e8:	31 97       	sbiw	r30, 0x01	; 1
 2ea:	a3 e3       	ldi	r26, 0x33	; 51
 2ec:	a0 83       	st	Z, r26
 2ee:	31 97       	sbiw	r30, 0x01	; 1
 2f0:	60 83       	st	Z, r22
 2f2:	31 97       	sbiw	r30, 0x01	; 1
 2f4:	70 83       	st	Z, r23
 2f6:	31 97       	sbiw	r30, 0x01	; 1
 2f8:	10 82       	st	Z, r1
 2fa:	31 97       	sbiw	r30, 0x01	; 1
 2fc:	60 e8       	ldi	r22, 0x80	; 128
 2fe:	60 83       	st	Z, r22
 300:	31 97       	sbiw	r30, 0x01	; 1
 302:	10 82       	st	Z, r1
 304:	31 97       	sbiw	r30, 0x01	; 1
 306:	62 e0       	ldi	r22, 0x02	; 2
 308:	60 83       	st	Z, r22
 30a:	31 97       	sbiw	r30, 0x01	; 1
 30c:	63 e0       	ldi	r22, 0x03	; 3
 30e:	60 83       	st	Z, r22
 310:	31 97       	sbiw	r30, 0x01	; 1
 312:	64 e0       	ldi	r22, 0x04	; 4
 314:	60 83       	st	Z, r22
 316:	31 97       	sbiw	r30, 0x01	; 1
 318:	65 e0       	ldi	r22, 0x05	; 5
 31a:	60 83       	st	Z, r22
 31c:	31 97       	sbiw	r30, 0x01	; 1
 31e:	66 e0       	ldi	r22, 0x06	; 6
 320:	60 83       	st	Z, r22
 322:	31 97       	sbiw	r30, 0x01	; 1
 324:	67 e0       	ldi	r22, 0x07	; 7
 326:	60 83       	st	Z, r22
 328:	31 97       	sbiw	r30, 0x01	; 1
 32a:	68 e0       	ldi	r22, 0x08	; 8
 32c:	60 83       	st	Z, r22
 32e:	31 97       	sbiw	r30, 0x01	; 1
 330:	69 e0       	ldi	r22, 0x09	; 9
 332:	60 83       	st	Z, r22
 334:	31 97       	sbiw	r30, 0x01	; 1
 336:	60 e1       	ldi	r22, 0x10	; 16
 338:	60 83       	st	Z, r22
 33a:	31 97       	sbiw	r30, 0x01	; 1
 33c:	30 83       	st	Z, r19
 33e:	31 97       	sbiw	r30, 0x01	; 1
 340:	32 e1       	ldi	r19, 0x12	; 18
 342:	30 83       	st	Z, r19
 344:	31 97       	sbiw	r30, 0x01	; 1
 346:	33 e1       	ldi	r19, 0x13	; 19
 348:	30 83       	st	Z, r19
 34a:	31 97       	sbiw	r30, 0x01	; 1
 34c:	34 e1       	ldi	r19, 0x14	; 20
 34e:	30 83       	st	Z, r19
 350:	31 97       	sbiw	r30, 0x01	; 1
 352:	35 e1       	ldi	r19, 0x15	; 21
 354:	30 83       	st	Z, r19
 356:	31 97       	sbiw	r30, 0x01	; 1
 358:	36 e1       	ldi	r19, 0x16	; 22
 35a:	30 83       	st	Z, r19
 35c:	31 97       	sbiw	r30, 0x01	; 1
 35e:	37 e1       	ldi	r19, 0x17	; 23
 360:	30 83       	st	Z, r19
 362:	31 97       	sbiw	r30, 0x01	; 1
 364:	38 e1       	ldi	r19, 0x18	; 24
 366:	30 83       	st	Z, r19
 368:	31 97       	sbiw	r30, 0x01	; 1
 36a:	39 e1       	ldi	r19, 0x19	; 25
 36c:	30 83       	st	Z, r19
 36e:	31 97       	sbiw	r30, 0x01	; 1
 370:	30 e2       	ldi	r19, 0x20	; 32
 372:	30 83       	st	Z, r19
 374:	31 97       	sbiw	r30, 0x01	; 1
 376:	31 e2       	ldi	r19, 0x21	; 33
 378:	30 83       	st	Z, r19
 37a:	31 97       	sbiw	r30, 0x01	; 1
 37c:	20 83       	st	Z, r18
 37e:	31 97       	sbiw	r30, 0x01	; 1
 380:	23 e2       	ldi	r18, 0x23	; 35
 382:	20 83       	st	Z, r18
 384:	31 97       	sbiw	r30, 0x01	; 1
 386:	40 83       	st	Z, r20
 388:	31 97       	sbiw	r30, 0x01	; 1
 38a:	50 83       	st	Z, r21
 38c:	31 97       	sbiw	r30, 0x01	; 1
 38e:	26 e2       	ldi	r18, 0x26	; 38
 390:	20 83       	st	Z, r18
 392:	31 97       	sbiw	r30, 0x01	; 1
 394:	27 e2       	ldi	r18, 0x27	; 39
 396:	20 83       	st	Z, r18
 398:	31 97       	sbiw	r30, 0x01	; 1
 39a:	28 e2       	ldi	r18, 0x28	; 40
 39c:	20 83       	st	Z, r18
 39e:	31 97       	sbiw	r30, 0x01	; 1
 3a0:	29 e2       	ldi	r18, 0x29	; 41
 3a2:	20 83       	st	Z, r18
 3a4:	31 97       	sbiw	r30, 0x01	; 1
 3a6:	20 e3       	ldi	r18, 0x30	; 48
 3a8:	20 83       	st	Z, r18
 3aa:	31 97       	sbiw	r30, 0x01	; 1
 3ac:	21 e3       	ldi	r18, 0x31	; 49
 3ae:	20 83       	st	Z, r18
 3b0:	86 97       	sbiw	r24, 0x26	; 38
 3b2:	08 95       	ret

000003b4 <xPortStartScheduler>:
 3b4:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 3b8:	8c e7       	ldi	r24, 0x7C	; 124
 3ba:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 3be:	8b e0       	ldi	r24, 0x0B	; 11
 3c0:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 3c4:	ef e6       	ldi	r30, 0x6F	; 111
 3c6:	f0 e0       	ldi	r31, 0x00	; 0
 3c8:	80 81       	ld	r24, Z
 3ca:	82 60       	ori	r24, 0x02	; 2
 3cc:	80 83       	st	Z, r24
 3ce:	a0 91 48 07 	lds	r26, 0x0748	; 0x800748 <pxCurrentTCB>
 3d2:	b0 91 49 07 	lds	r27, 0x0749	; 0x800749 <pxCurrentTCB+0x1>
 3d6:	cd 91       	ld	r28, X+
 3d8:	cd bf       	out	0x3d, r28	; 61
 3da:	dd 91       	ld	r29, X+
 3dc:	de bf       	out	0x3e, r29	; 62
 3de:	ff 91       	pop	r31
 3e0:	ef 91       	pop	r30
 3e2:	df 91       	pop	r29
 3e4:	cf 91       	pop	r28
 3e6:	bf 91       	pop	r27
 3e8:	af 91       	pop	r26
 3ea:	9f 91       	pop	r25
 3ec:	8f 91       	pop	r24
 3ee:	7f 91       	pop	r23
 3f0:	6f 91       	pop	r22
 3f2:	5f 91       	pop	r21
 3f4:	4f 91       	pop	r20
 3f6:	3f 91       	pop	r19
 3f8:	2f 91       	pop	r18
 3fa:	1f 91       	pop	r17
 3fc:	0f 91       	pop	r16
 3fe:	ff 90       	pop	r15
 400:	ef 90       	pop	r14
 402:	df 90       	pop	r13
 404:	cf 90       	pop	r12
 406:	bf 90       	pop	r11
 408:	af 90       	pop	r10
 40a:	9f 90       	pop	r9
 40c:	8f 90       	pop	r8
 40e:	7f 90       	pop	r7
 410:	6f 90       	pop	r6
 412:	5f 90       	pop	r5
 414:	4f 90       	pop	r4
 416:	3f 90       	pop	r3
 418:	2f 90       	pop	r2
 41a:	1f 90       	pop	r1
 41c:	0f 90       	pop	r0
 41e:	0f be       	out	0x3f, r0	; 63
 420:	0f 90       	pop	r0
 422:	08 95       	ret
 424:	81 e0       	ldi	r24, 0x01	; 1
 426:	08 95       	ret

00000428 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
 428:	0f 92       	push	r0
 42a:	0f b6       	in	r0, 0x3f	; 63
 42c:	f8 94       	cli
 42e:	0f 92       	push	r0
 430:	1f 92       	push	r1
 432:	11 24       	eor	r1, r1
 434:	2f 92       	push	r2
 436:	3f 92       	push	r3
 438:	4f 92       	push	r4
 43a:	5f 92       	push	r5
 43c:	6f 92       	push	r6
 43e:	7f 92       	push	r7
 440:	8f 92       	push	r8
 442:	9f 92       	push	r9
 444:	af 92       	push	r10
 446:	bf 92       	push	r11
 448:	cf 92       	push	r12
 44a:	df 92       	push	r13
 44c:	ef 92       	push	r14
 44e:	ff 92       	push	r15
 450:	0f 93       	push	r16
 452:	1f 93       	push	r17
 454:	2f 93       	push	r18
 456:	3f 93       	push	r19
 458:	4f 93       	push	r20
 45a:	5f 93       	push	r21
 45c:	6f 93       	push	r22
 45e:	7f 93       	push	r23
 460:	8f 93       	push	r24
 462:	9f 93       	push	r25
 464:	af 93       	push	r26
 466:	bf 93       	push	r27
 468:	cf 93       	push	r28
 46a:	df 93       	push	r29
 46c:	ef 93       	push	r30
 46e:	ff 93       	push	r31
 470:	a0 91 48 07 	lds	r26, 0x0748	; 0x800748 <pxCurrentTCB>
 474:	b0 91 49 07 	lds	r27, 0x0749	; 0x800749 <pxCurrentTCB+0x1>
 478:	0d b6       	in	r0, 0x3d	; 61
 47a:	0d 92       	st	X+, r0
 47c:	0e b6       	in	r0, 0x3e	; 62
	vTaskSwitchContext();
 47e:	0d 92       	st	X+, r0
	portRESTORE_CONTEXT();
 480:	70 d3       	rcall	.+1760   	; 0xb62 <vTaskSwitchContext>
 482:	a0 91 48 07 	lds	r26, 0x0748	; 0x800748 <pxCurrentTCB>
 486:	b0 91 49 07 	lds	r27, 0x0749	; 0x800749 <pxCurrentTCB+0x1>
 48a:	cd 91       	ld	r28, X+
 48c:	cd bf       	out	0x3d, r28	; 61
 48e:	dd 91       	ld	r29, X+
 490:	de bf       	out	0x3e, r29	; 62
 492:	ff 91       	pop	r31
 494:	ef 91       	pop	r30
 496:	df 91       	pop	r29
 498:	cf 91       	pop	r28
 49a:	bf 91       	pop	r27
 49c:	af 91       	pop	r26
 49e:	9f 91       	pop	r25
 4a0:	8f 91       	pop	r24
 4a2:	7f 91       	pop	r23
 4a4:	6f 91       	pop	r22
 4a6:	5f 91       	pop	r21
 4a8:	4f 91       	pop	r20
 4aa:	3f 91       	pop	r19
 4ac:	2f 91       	pop	r18
 4ae:	1f 91       	pop	r17
 4b0:	0f 91       	pop	r16
 4b2:	ff 90       	pop	r15
 4b4:	ef 90       	pop	r14
 4b6:	df 90       	pop	r13
 4b8:	cf 90       	pop	r12
 4ba:	bf 90       	pop	r11
 4bc:	af 90       	pop	r10
 4be:	9f 90       	pop	r9
 4c0:	8f 90       	pop	r8
 4c2:	7f 90       	pop	r7
 4c4:	6f 90       	pop	r6
 4c6:	5f 90       	pop	r5
 4c8:	4f 90       	pop	r4
 4ca:	3f 90       	pop	r3
 4cc:	2f 90       	pop	r2
 4ce:	1f 90       	pop	r1
 4d0:	0f 90       	pop	r0
 4d2:	0f be       	out	0x3f, r0	; 63

	asm volatile ( "ret" );
 4d4:	0f 90       	pop	r0
 4d6:	08 95       	ret

000004d8 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
 4d8:	0f 92       	push	r0
 4da:	0f b6       	in	r0, 0x3f	; 63
 4dc:	f8 94       	cli
 4de:	0f 92       	push	r0
 4e0:	1f 92       	push	r1
 4e2:	11 24       	eor	r1, r1
 4e4:	2f 92       	push	r2
 4e6:	3f 92       	push	r3
 4e8:	4f 92       	push	r4
 4ea:	5f 92       	push	r5
 4ec:	6f 92       	push	r6
 4ee:	7f 92       	push	r7
 4f0:	8f 92       	push	r8
 4f2:	9f 92       	push	r9
 4f4:	af 92       	push	r10
 4f6:	bf 92       	push	r11
 4f8:	cf 92       	push	r12
 4fa:	df 92       	push	r13
 4fc:	ef 92       	push	r14
 4fe:	ff 92       	push	r15
 500:	0f 93       	push	r16
 502:	1f 93       	push	r17
 504:	2f 93       	push	r18
 506:	3f 93       	push	r19
 508:	4f 93       	push	r20
 50a:	5f 93       	push	r21
 50c:	6f 93       	push	r22
 50e:	7f 93       	push	r23
 510:	8f 93       	push	r24
 512:	9f 93       	push	r25
 514:	af 93       	push	r26
 516:	bf 93       	push	r27
 518:	cf 93       	push	r28
 51a:	df 93       	push	r29
 51c:	ef 93       	push	r30
 51e:	ff 93       	push	r31
 520:	a0 91 48 07 	lds	r26, 0x0748	; 0x800748 <pxCurrentTCB>
 524:	b0 91 49 07 	lds	r27, 0x0749	; 0x800749 <pxCurrentTCB+0x1>
 528:	0d b6       	in	r0, 0x3d	; 61
 52a:	0d 92       	st	X+, r0
 52c:	0e b6       	in	r0, 0x3e	; 62
	vTaskIncrementTick();
	vTaskSwitchContext();
 52e:	0d 92       	st	X+, r0
 530:	85 d1       	rcall	.+778    	; 0x83c <vTaskIncrementTick>
	portRESTORE_CONTEXT();
 532:	17 d3       	rcall	.+1582   	; 0xb62 <vTaskSwitchContext>
 534:	a0 91 48 07 	lds	r26, 0x0748	; 0x800748 <pxCurrentTCB>
 538:	b0 91 49 07 	lds	r27, 0x0749	; 0x800749 <pxCurrentTCB+0x1>
 53c:	cd 91       	ld	r28, X+
 53e:	cd bf       	out	0x3d, r28	; 61
 540:	dd 91       	ld	r29, X+
 542:	de bf       	out	0x3e, r29	; 62
 544:	ff 91       	pop	r31
 546:	ef 91       	pop	r30
 548:	df 91       	pop	r29
 54a:	cf 91       	pop	r28
 54c:	bf 91       	pop	r27
 54e:	af 91       	pop	r26
 550:	9f 91       	pop	r25
 552:	8f 91       	pop	r24
 554:	7f 91       	pop	r23
 556:	6f 91       	pop	r22
 558:	5f 91       	pop	r21
 55a:	4f 91       	pop	r20
 55c:	3f 91       	pop	r19
 55e:	2f 91       	pop	r18
 560:	1f 91       	pop	r17
 562:	0f 91       	pop	r16
 564:	ff 90       	pop	r15
 566:	ef 90       	pop	r14
 568:	df 90       	pop	r13
 56a:	cf 90       	pop	r12
 56c:	bf 90       	pop	r11
 56e:	af 90       	pop	r10
 570:	9f 90       	pop	r9
 572:	8f 90       	pop	r8
 574:	7f 90       	pop	r7
 576:	6f 90       	pop	r6
 578:	5f 90       	pop	r5
 57a:	4f 90       	pop	r4
 57c:	3f 90       	pop	r3
 57e:	2f 90       	pop	r2
 580:	1f 90       	pop	r1
 582:	0f 90       	pop	r0
 584:	0f be       	out	0x3f, r0	; 63

	asm volatile ( "ret" );
 586:	0f 90       	pop	r0
 588:	08 95       	ret

0000058a <__vector_13>:
}
 58a:	a6 df       	rcall	.-180    	; 0x4d8 <vPortYieldFromTick>
 58c:	18 95       	reti

0000058e <prvAddCurrentTaskToDelayedList>:
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
		{
			portYIELD_WITHIN_API();
		}
	}
 58e:	cf 93       	push	r28
 590:	df 93       	push	r29
 592:	ec 01       	movw	r28, r24
 594:	e0 91 48 07 	lds	r30, 0x0748	; 0x800748 <pxCurrentTCB>
 598:	f0 91 49 07 	lds	r31, 0x0749	; 0x800749 <pxCurrentTCB+0x1>
 59c:	93 83       	std	Z+3, r25	; 0x03
 59e:	82 83       	std	Z+2, r24	; 0x02
 5a0:	80 91 f8 06 	lds	r24, 0x06F8	; 0x8006f8 <xTickCount>
 5a4:	90 91 f9 06 	lds	r25, 0x06F9	; 0x8006f9 <xTickCount+0x1>
 5a8:	c8 17       	cp	r28, r24
 5aa:	d9 07       	cpc	r29, r25
 5ac:	60 f4       	brcc	.+24     	; 0x5c6 <prvAddCurrentTaskToDelayedList+0x38>
 5ae:	60 91 48 07 	lds	r22, 0x0748	; 0x800748 <pxCurrentTCB>
 5b2:	70 91 49 07 	lds	r23, 0x0749	; 0x800749 <pxCurrentTCB+0x1>
 5b6:	80 91 0e 07 	lds	r24, 0x070E	; 0x80070e <pxOverflowDelayedTaskList>
 5ba:	90 91 0f 07 	lds	r25, 0x070F	; 0x80070f <pxOverflowDelayedTaskList+0x1>
 5be:	6e 5f       	subi	r22, 0xFE	; 254
 5c0:	7f 4f       	sbci	r23, 0xFF	; 255
 5c2:	e0 dd       	rcall	.-1088   	; 0x184 <vListInsert>
 5c4:	16 c0       	rjmp	.+44     	; 0x5f2 <prvAddCurrentTaskToDelayedList+0x64>
 5c6:	60 91 48 07 	lds	r22, 0x0748	; 0x800748 <pxCurrentTCB>
 5ca:	70 91 49 07 	lds	r23, 0x0749	; 0x800749 <pxCurrentTCB+0x1>
 5ce:	80 91 10 07 	lds	r24, 0x0710	; 0x800710 <pxDelayedTaskList>
 5d2:	90 91 11 07 	lds	r25, 0x0711	; 0x800711 <pxDelayedTaskList+0x1>
 5d6:	6e 5f       	subi	r22, 0xFE	; 254
 5d8:	7f 4f       	sbci	r23, 0xFF	; 255
 5da:	d4 dd       	rcall	.-1112   	; 0x184 <vListInsert>
 5dc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 5e0:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 5e4:	c8 17       	cp	r28, r24
 5e6:	d9 07       	cpc	r29, r25
 5e8:	20 f4       	brcc	.+8      	; 0x5f2 <prvAddCurrentTaskToDelayedList+0x64>
 5ea:	d0 93 01 01 	sts	0x0101, r29	; 0x800101 <__data_start+0x1>
 5ee:	c0 93 00 01 	sts	0x0100, r28	; 0x800100 <__data_start>
 5f2:	df 91       	pop	r29
 5f4:	cf 91       	pop	r28
 5f6:	08 95       	ret

000005f8 <xTaskGenericCreate>:
 5f8:	4f 92       	push	r4
 5fa:	5f 92       	push	r5
 5fc:	6f 92       	push	r6
 5fe:	7f 92       	push	r7
 600:	8f 92       	push	r8
 602:	9f 92       	push	r9
 604:	af 92       	push	r10
 606:	bf 92       	push	r11
 608:	cf 92       	push	r12
 60a:	df 92       	push	r13
 60c:	ef 92       	push	r14
 60e:	ff 92       	push	r15
 610:	0f 93       	push	r16
 612:	1f 93       	push	r17
 614:	cf 93       	push	r28
 616:	df 93       	push	r29
 618:	5c 01       	movw	r10, r24
 61a:	4b 01       	movw	r8, r22
 61c:	3a 01       	movw	r6, r20
 61e:	29 01       	movw	r4, r18
 620:	81 e2       	ldi	r24, 0x21	; 33
 622:	90 e0       	ldi	r25, 0x00	; 0
 624:	51 dd       	rcall	.-1374   	; 0xc8 <pvPortMalloc>
 626:	ec 01       	movw	r28, r24
 628:	89 2b       	or	r24, r25
 62a:	09 f4       	brne	.+2      	; 0x62e <xTaskGenericCreate+0x36>
 62c:	c6 c0       	rjmp	.+396    	; 0x7ba <xTaskGenericCreate+0x1c2>
 62e:	c1 14       	cp	r12, r1
 630:	d1 04       	cpc	r13, r1
 632:	09 f0       	breq	.+2      	; 0x636 <xTaskGenericCreate+0x3e>
 634:	be c0       	rjmp	.+380    	; 0x7b2 <xTaskGenericCreate+0x1ba>
 636:	c3 01       	movw	r24, r6
 638:	47 dd       	rcall	.-1394   	; 0xc8 <pvPortMalloc>
 63a:	98 8f       	std	Y+24, r25	; 0x18
 63c:	8f 8b       	std	Y+23, r24	; 0x17
 63e:	00 97       	sbiw	r24, 0x00	; 0
 640:	19 f4       	brne	.+6      	; 0x648 <xTaskGenericCreate+0x50>
 642:	ce 01       	movw	r24, r28
 644:	65 dd       	rcall	.-1334   	; 0x110 <vPortFree>
 646:	b9 c0       	rjmp	.+370    	; 0x7ba <xTaskGenericCreate+0x1c2>
 648:	a3 01       	movw	r20, r6
 64a:	65 ea       	ldi	r22, 0xA5	; 165
 64c:	70 e0       	ldi	r23, 0x00	; 0
 64e:	f5 d2       	rcall	.+1514   	; 0xc3a <memset>
 650:	93 01       	movw	r18, r6
 652:	21 50       	subi	r18, 0x01	; 1
 654:	31 09       	sbc	r19, r1
 656:	8f 89       	ldd	r24, Y+23	; 0x17
 658:	98 8d       	ldd	r25, Y+24	; 0x18
 65a:	3c 01       	movw	r6, r24
 65c:	62 0e       	add	r6, r18
 65e:	73 1e       	adc	r7, r19
 660:	48 e0       	ldi	r20, 0x08	; 8
 662:	50 e0       	ldi	r21, 0x00	; 0
 664:	b4 01       	movw	r22, r8
 666:	ce 01       	movw	r24, r28
 668:	49 96       	adiw	r24, 0x19	; 25
 66a:	ee d2       	rcall	.+1500   	; 0xc48 <strncpy>
 66c:	18 a2       	std	Y+32, r1	; 0x20
 66e:	10 2f       	mov	r17, r16
 670:	04 30       	cpi	r16, 0x04	; 4
 672:	08 f0       	brcs	.+2      	; 0x676 <xTaskGenericCreate+0x7e>
 674:	13 e0       	ldi	r17, 0x03	; 3
 676:	1e 8b       	std	Y+22, r17	; 0x16
 678:	6e 01       	movw	r12, r28
 67a:	82 e0       	ldi	r24, 0x02	; 2
 67c:	c8 0e       	add	r12, r24
 67e:	d1 1c       	adc	r13, r1
 680:	c6 01       	movw	r24, r12
 682:	55 dd       	rcall	.-1366   	; 0x12e <vListInitialiseItem>
 684:	ce 01       	movw	r24, r28
 686:	0c 96       	adiw	r24, 0x0c	; 12
 688:	52 dd       	rcall	.-1372   	; 0x12e <vListInitialiseItem>
 68a:	d9 87       	std	Y+9, r29	; 0x09
 68c:	c8 87       	std	Y+8, r28	; 0x08
 68e:	84 e0       	ldi	r24, 0x04	; 4
 690:	90 e0       	ldi	r25, 0x00	; 0
 692:	81 1b       	sub	r24, r17
 694:	91 09       	sbc	r25, r1
 696:	9d 87       	std	Y+13, r25	; 0x0d
 698:	8c 87       	std	Y+12, r24	; 0x0c
 69a:	db 8b       	std	Y+19, r29	; 0x13
 69c:	ca 8b       	std	Y+18, r28	; 0x12
 69e:	a2 01       	movw	r20, r4
 6a0:	b5 01       	movw	r22, r10
 6a2:	c3 01       	movw	r24, r6
 6a4:	1b de       	rcall	.-970    	; 0x2dc <pxPortInitialiseStack>
 6a6:	99 83       	std	Y+1, r25	; 0x01
 6a8:	88 83       	st	Y, r24
 6aa:	e1 14       	cp	r14, r1
 6ac:	f1 04       	cpc	r15, r1
 6ae:	19 f0       	breq	.+6      	; 0x6b6 <xTaskGenericCreate+0xbe>
 6b0:	f7 01       	movw	r30, r14
 6b2:	d1 83       	std	Z+1, r29	; 0x01
 6b4:	c0 83       	st	Z, r28
 6b6:	0f b6       	in	r0, 0x3f	; 63
 6b8:	f8 94       	cli
 6ba:	0f 92       	push	r0
 6bc:	80 91 fa 06 	lds	r24, 0x06FA	; 0x8006fa <uxCurrentNumberOfTasks>
 6c0:	8f 5f       	subi	r24, 0xFF	; 255
 6c2:	80 93 fa 06 	sts	0x06FA, r24	; 0x8006fa <uxCurrentNumberOfTasks>
 6c6:	80 91 48 07 	lds	r24, 0x0748	; 0x800748 <pxCurrentTCB>
 6ca:	90 91 49 07 	lds	r25, 0x0749	; 0x800749 <pxCurrentTCB+0x1>
 6ce:	89 2b       	or	r24, r25
 6d0:	69 f5       	brne	.+90     	; 0x72c <xTaskGenericCreate+0x134>
 6d2:	d0 93 49 07 	sts	0x0749, r29	; 0x800749 <pxCurrentTCB+0x1>
 6d6:	c0 93 48 07 	sts	0x0748, r28	; 0x800748 <pxCurrentTCB>
 6da:	80 91 fa 06 	lds	r24, 0x06FA	; 0x8006fa <uxCurrentNumberOfTasks>
 6de:	81 30       	cpi	r24, 0x01	; 1
 6e0:	a1 f5       	brne	.+104    	; 0x74a <xTaskGenericCreate+0x152>
 6e2:	84 e2       	ldi	r24, 0x24	; 36
 6e4:	97 e0       	ldi	r25, 0x07	; 7
 6e6:	15 dd       	rcall	.-1494   	; 0x112 <vListInitialise>
 6e8:	8d e2       	ldi	r24, 0x2D	; 45
 6ea:	97 e0       	ldi	r25, 0x07	; 7
 6ec:	12 dd       	rcall	.-1500   	; 0x112 <vListInitialise>
 6ee:	86 e3       	ldi	r24, 0x36	; 54
 6f0:	97 e0       	ldi	r25, 0x07	; 7
 6f2:	0f dd       	rcall	.-1506   	; 0x112 <vListInitialise>
 6f4:	8f e3       	ldi	r24, 0x3F	; 63
 6f6:	97 e0       	ldi	r25, 0x07	; 7
 6f8:	0c dd       	rcall	.-1512   	; 0x112 <vListInitialise>
 6fa:	8b e1       	ldi	r24, 0x1B	; 27
 6fc:	97 e0       	ldi	r25, 0x07	; 7
 6fe:	09 dd       	rcall	.-1518   	; 0x112 <vListInitialise>
 700:	82 e1       	ldi	r24, 0x12	; 18
 702:	97 e0       	ldi	r25, 0x07	; 7
 704:	06 dd       	rcall	.-1524   	; 0x112 <vListInitialise>
 706:	85 e0       	ldi	r24, 0x05	; 5
 708:	97 e0       	ldi	r25, 0x07	; 7
 70a:	03 dd       	rcall	.-1530   	; 0x112 <vListInitialise>
 70c:	8c ef       	ldi	r24, 0xFC	; 252
 70e:	96 e0       	ldi	r25, 0x06	; 6
 710:	00 dd       	rcall	.-1536   	; 0x112 <vListInitialise>
 712:	8b e1       	ldi	r24, 0x1B	; 27
 714:	97 e0       	ldi	r25, 0x07	; 7
 716:	90 93 11 07 	sts	0x0711, r25	; 0x800711 <pxDelayedTaskList+0x1>
 71a:	80 93 10 07 	sts	0x0710, r24	; 0x800710 <pxDelayedTaskList>
 71e:	82 e1       	ldi	r24, 0x12	; 18
 720:	97 e0       	ldi	r25, 0x07	; 7
 722:	90 93 0f 07 	sts	0x070F, r25	; 0x80070f <pxOverflowDelayedTaskList+0x1>
 726:	80 93 0e 07 	sts	0x070E, r24	; 0x80070e <pxOverflowDelayedTaskList>
 72a:	0f c0       	rjmp	.+30     	; 0x74a <xTaskGenericCreate+0x152>
 72c:	80 91 f5 06 	lds	r24, 0x06F5	; 0x8006f5 <xSchedulerRunning>
 730:	81 11       	cpse	r24, r1
 732:	0b c0       	rjmp	.+22     	; 0x74a <xTaskGenericCreate+0x152>
 734:	e0 91 48 07 	lds	r30, 0x0748	; 0x800748 <pxCurrentTCB>
 738:	f0 91 49 07 	lds	r31, 0x0749	; 0x800749 <pxCurrentTCB+0x1>
 73c:	86 89       	ldd	r24, Z+22	; 0x16
 73e:	08 17       	cp	r16, r24
 740:	20 f0       	brcs	.+8      	; 0x74a <xTaskGenericCreate+0x152>
 742:	d0 93 49 07 	sts	0x0749, r29	; 0x800749 <pxCurrentTCB+0x1>
 746:	c0 93 48 07 	sts	0x0748, r28	; 0x800748 <pxCurrentTCB>
 74a:	8e 89       	ldd	r24, Y+22	; 0x16
 74c:	90 91 f7 06 	lds	r25, 0x06F7	; 0x8006f7 <uxTopUsedPriority>
 750:	98 17       	cp	r25, r24
 752:	10 f4       	brcc	.+4      	; 0x758 <xTaskGenericCreate+0x160>
 754:	80 93 f7 06 	sts	0x06F7, r24	; 0x8006f7 <uxTopUsedPriority>
 758:	90 91 f0 06 	lds	r25, 0x06F0	; 0x8006f0 <uxTaskNumber>
 75c:	9f 5f       	subi	r25, 0xFF	; 255
 75e:	90 93 f0 06 	sts	0x06F0, r25	; 0x8006f0 <uxTaskNumber>
 762:	90 91 f6 06 	lds	r25, 0x06F6	; 0x8006f6 <uxTopReadyPriority>
 766:	98 17       	cp	r25, r24
 768:	10 f4       	brcc	.+4      	; 0x76e <xTaskGenericCreate+0x176>
 76a:	80 93 f6 06 	sts	0x06F6, r24	; 0x8006f6 <uxTopReadyPriority>
 76e:	90 e0       	ldi	r25, 0x00	; 0
 770:	9c 01       	movw	r18, r24
 772:	22 0f       	add	r18, r18
 774:	33 1f       	adc	r19, r19
 776:	22 0f       	add	r18, r18
 778:	33 1f       	adc	r19, r19
 77a:	22 0f       	add	r18, r18
 77c:	33 1f       	adc	r19, r19
 77e:	82 0f       	add	r24, r18
 780:	93 1f       	adc	r25, r19
 782:	b6 01       	movw	r22, r12
 784:	8c 5d       	subi	r24, 0xDC	; 220
 786:	98 4f       	sbci	r25, 0xF8	; 248
 788:	d6 dc       	rcall	.-1620   	; 0x136 <vListInsertEnd>
 78a:	0f 90       	pop	r0
 78c:	0f be       	out	0x3f, r0	; 63
 78e:	80 91 f5 06 	lds	r24, 0x06F5	; 0x8006f5 <xSchedulerRunning>
 792:	88 23       	and	r24, r24
 794:	51 f0       	breq	.+20     	; 0x7aa <xTaskGenericCreate+0x1b2>
 796:	e0 91 48 07 	lds	r30, 0x0748	; 0x800748 <pxCurrentTCB>
 79a:	f0 91 49 07 	lds	r31, 0x0749	; 0x800749 <pxCurrentTCB+0x1>
 79e:	86 89       	ldd	r24, Z+22	; 0x16
 7a0:	80 17       	cp	r24, r16
 7a2:	28 f4       	brcc	.+10     	; 0x7ae <xTaskGenericCreate+0x1b6>
 7a4:	41 de       	rcall	.-894    	; 0x428 <vPortYield>
 7a6:	81 e0       	ldi	r24, 0x01	; 1
 7a8:	09 c0       	rjmp	.+18     	; 0x7bc <xTaskGenericCreate+0x1c4>
 7aa:	81 e0       	ldi	r24, 0x01	; 1
 7ac:	07 c0       	rjmp	.+14     	; 0x7bc <xTaskGenericCreate+0x1c4>
 7ae:	81 e0       	ldi	r24, 0x01	; 1
 7b0:	05 c0       	rjmp	.+10     	; 0x7bc <xTaskGenericCreate+0x1c4>
 7b2:	d8 8e       	std	Y+24, r13	; 0x18
 7b4:	cf 8a       	std	Y+23, r12	; 0x17
 7b6:	c6 01       	movw	r24, r12
 7b8:	47 cf       	rjmp	.-370    	; 0x648 <xTaskGenericCreate+0x50>
 7ba:	8f ef       	ldi	r24, 0xFF	; 255
 7bc:	df 91       	pop	r29
 7be:	cf 91       	pop	r28
 7c0:	1f 91       	pop	r17
 7c2:	0f 91       	pop	r16
 7c4:	ff 90       	pop	r15
 7c6:	ef 90       	pop	r14
 7c8:	df 90       	pop	r13
 7ca:	cf 90       	pop	r12
 7cc:	bf 90       	pop	r11
 7ce:	af 90       	pop	r10
 7d0:	9f 90       	pop	r9
 7d2:	8f 90       	pop	r8
 7d4:	7f 90       	pop	r7
 7d6:	6f 90       	pop	r6
 7d8:	5f 90       	pop	r5
 7da:	4f 90       	pop	r4
 7dc:	08 95       	ret

000007de <vTaskStartScheduler>:
 7de:	af 92       	push	r10
 7e0:	bf 92       	push	r11
 7e2:	cf 92       	push	r12
 7e4:	df 92       	push	r13
 7e6:	ef 92       	push	r14
 7e8:	ff 92       	push	r15
 7ea:	0f 93       	push	r16
 7ec:	a1 2c       	mov	r10, r1
 7ee:	b1 2c       	mov	r11, r1
 7f0:	c1 2c       	mov	r12, r1
 7f2:	d1 2c       	mov	r13, r1
 7f4:	e1 2c       	mov	r14, r1
 7f6:	f1 2c       	mov	r15, r1
 7f8:	00 e0       	ldi	r16, 0x00	; 0
 7fa:	20 e0       	ldi	r18, 0x00	; 0
 7fc:	30 e0       	ldi	r19, 0x00	; 0
 7fe:	45 e5       	ldi	r20, 0x55	; 85
 800:	50 e0       	ldi	r21, 0x00	; 0
 802:	6d e0       	ldi	r22, 0x0D	; 13
 804:	71 e0       	ldi	r23, 0x01	; 1
 806:	8b e7       	ldi	r24, 0x7B	; 123
 808:	95 e0       	ldi	r25, 0x05	; 5
 80a:	f6 de       	rcall	.-532    	; 0x5f8 <xTaskGenericCreate>
 80c:	81 30       	cpi	r24, 0x01	; 1
 80e:	41 f4       	brne	.+16     	; 0x820 <vTaskStartScheduler+0x42>
 810:	f8 94       	cli
 812:	80 93 f5 06 	sts	0x06F5, r24	; 0x8006f5 <xSchedulerRunning>
 816:	10 92 f9 06 	sts	0x06F9, r1	; 0x8006f9 <xTickCount+0x1>
 81a:	10 92 f8 06 	sts	0x06F8, r1	; 0x8006f8 <xTickCount>
 81e:	ca dd       	rcall	.-1132   	; 0x3b4 <xPortStartScheduler>
 820:	0f 91       	pop	r16
 822:	ff 90       	pop	r15
 824:	ef 90       	pop	r14
 826:	df 90       	pop	r13
 828:	cf 90       	pop	r12
 82a:	bf 90       	pop	r11
 82c:	af 90       	pop	r10
 82e:	08 95       	ret

00000830 <vTaskSuspendAll>:
 830:	80 91 f4 06 	lds	r24, 0x06F4	; 0x8006f4 <uxSchedulerSuspended>
 834:	8f 5f       	subi	r24, 0xFF	; 255
 836:	80 93 f4 06 	sts	0x06F4, r24	; 0x8006f4 <uxSchedulerSuspended>
 83a:	08 95       	ret

0000083c <vTaskIncrementTick>:
 83c:	0f 93       	push	r16
 83e:	1f 93       	push	r17
 840:	cf 93       	push	r28
 842:	df 93       	push	r29
 844:	80 91 f4 06 	lds	r24, 0x06F4	; 0x8006f4 <uxSchedulerSuspended>
 848:	81 11       	cpse	r24, r1
 84a:	af c0       	rjmp	.+350    	; 0x9aa <vTaskIncrementTick+0x16e>
 84c:	80 91 f8 06 	lds	r24, 0x06F8	; 0x8006f8 <xTickCount>
 850:	90 91 f9 06 	lds	r25, 0x06F9	; 0x8006f9 <xTickCount+0x1>
 854:	01 96       	adiw	r24, 0x01	; 1
 856:	90 93 f9 06 	sts	0x06F9, r25	; 0x8006f9 <xTickCount+0x1>
 85a:	80 93 f8 06 	sts	0x06F8, r24	; 0x8006f8 <xTickCount>
 85e:	80 91 f8 06 	lds	r24, 0x06F8	; 0x8006f8 <xTickCount>
 862:	90 91 f9 06 	lds	r25, 0x06F9	; 0x8006f9 <xTickCount+0x1>
 866:	89 2b       	or	r24, r25
 868:	99 f5       	brne	.+102    	; 0x8d0 <vTaskIncrementTick+0x94>
 86a:	80 91 10 07 	lds	r24, 0x0710	; 0x800710 <pxDelayedTaskList>
 86e:	90 91 11 07 	lds	r25, 0x0711	; 0x800711 <pxDelayedTaskList+0x1>
 872:	20 91 0e 07 	lds	r18, 0x070E	; 0x80070e <pxOverflowDelayedTaskList>
 876:	30 91 0f 07 	lds	r19, 0x070F	; 0x80070f <pxOverflowDelayedTaskList+0x1>
 87a:	30 93 11 07 	sts	0x0711, r19	; 0x800711 <pxDelayedTaskList+0x1>
 87e:	20 93 10 07 	sts	0x0710, r18	; 0x800710 <pxDelayedTaskList>
 882:	90 93 0f 07 	sts	0x070F, r25	; 0x80070f <pxOverflowDelayedTaskList+0x1>
 886:	80 93 0e 07 	sts	0x070E, r24	; 0x80070e <pxOverflowDelayedTaskList>
 88a:	80 91 f1 06 	lds	r24, 0x06F1	; 0x8006f1 <xNumOfOverflows>
 88e:	8f 5f       	subi	r24, 0xFF	; 255
 890:	80 93 f1 06 	sts	0x06F1, r24	; 0x8006f1 <xNumOfOverflows>
 894:	e0 91 10 07 	lds	r30, 0x0710	; 0x800710 <pxDelayedTaskList>
 898:	f0 91 11 07 	lds	r31, 0x0711	; 0x800711 <pxDelayedTaskList+0x1>
 89c:	80 81       	ld	r24, Z
 89e:	81 11       	cpse	r24, r1
 8a0:	07 c0       	rjmp	.+14     	; 0x8b0 <vTaskIncrementTick+0x74>
 8a2:	8f ef       	ldi	r24, 0xFF	; 255
 8a4:	9f ef       	ldi	r25, 0xFF	; 255
 8a6:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 8aa:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 8ae:	10 c0       	rjmp	.+32     	; 0x8d0 <vTaskIncrementTick+0x94>
 8b0:	e0 91 10 07 	lds	r30, 0x0710	; 0x800710 <pxDelayedTaskList>
 8b4:	f0 91 11 07 	lds	r31, 0x0711	; 0x800711 <pxDelayedTaskList+0x1>
 8b8:	05 80       	ldd	r0, Z+5	; 0x05
 8ba:	f6 81       	ldd	r31, Z+6	; 0x06
 8bc:	e0 2d       	mov	r30, r0
 8be:	06 80       	ldd	r0, Z+6	; 0x06
 8c0:	f7 81       	ldd	r31, Z+7	; 0x07
 8c2:	e0 2d       	mov	r30, r0
 8c4:	82 81       	ldd	r24, Z+2	; 0x02
 8c6:	93 81       	ldd	r25, Z+3	; 0x03
 8c8:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 8cc:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 8d0:	20 91 f8 06 	lds	r18, 0x06F8	; 0x8006f8 <xTickCount>
 8d4:	30 91 f9 06 	lds	r19, 0x06F9	; 0x8006f9 <xTickCount+0x1>
 8d8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 8dc:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 8e0:	28 17       	cp	r18, r24
 8e2:	39 07       	cpc	r19, r25
 8e4:	08 f4       	brcc	.+2      	; 0x8e8 <vTaskIncrementTick+0xac>
 8e6:	66 c0       	rjmp	.+204    	; 0x9b4 <vTaskIncrementTick+0x178>
 8e8:	e0 91 10 07 	lds	r30, 0x0710	; 0x800710 <pxDelayedTaskList>
 8ec:	f0 91 11 07 	lds	r31, 0x0711	; 0x800711 <pxDelayedTaskList+0x1>
 8f0:	80 81       	ld	r24, Z
 8f2:	88 23       	and	r24, r24
 8f4:	99 f0       	breq	.+38     	; 0x91c <vTaskIncrementTick+0xe0>
 8f6:	e0 91 10 07 	lds	r30, 0x0710	; 0x800710 <pxDelayedTaskList>
 8fa:	f0 91 11 07 	lds	r31, 0x0711	; 0x800711 <pxDelayedTaskList+0x1>
 8fe:	05 80       	ldd	r0, Z+5	; 0x05
 900:	f6 81       	ldd	r31, Z+6	; 0x06
 902:	e0 2d       	mov	r30, r0
 904:	c6 81       	ldd	r28, Z+6	; 0x06
 906:	d7 81       	ldd	r29, Z+7	; 0x07
 908:	8a 81       	ldd	r24, Y+2	; 0x02
 90a:	9b 81       	ldd	r25, Y+3	; 0x03
 90c:	20 91 f8 06 	lds	r18, 0x06F8	; 0x8006f8 <xTickCount>
 910:	30 91 f9 06 	lds	r19, 0x06F9	; 0x8006f9 <xTickCount+0x1>
 914:	28 17       	cp	r18, r24
 916:	39 07       	cpc	r19, r25
 918:	f8 f4       	brcc	.+62     	; 0x958 <vTaskIncrementTick+0x11c>
 91a:	19 c0       	rjmp	.+50     	; 0x94e <vTaskIncrementTick+0x112>
 91c:	8f ef       	ldi	r24, 0xFF	; 255
 91e:	9f ef       	ldi	r25, 0xFF	; 255
 920:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 924:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 928:	45 c0       	rjmp	.+138    	; 0x9b4 <vTaskIncrementTick+0x178>
 92a:	e0 91 10 07 	lds	r30, 0x0710	; 0x800710 <pxDelayedTaskList>
 92e:	f0 91 11 07 	lds	r31, 0x0711	; 0x800711 <pxDelayedTaskList+0x1>
 932:	05 80       	ldd	r0, Z+5	; 0x05
 934:	f6 81       	ldd	r31, Z+6	; 0x06
 936:	e0 2d       	mov	r30, r0
 938:	c6 81       	ldd	r28, Z+6	; 0x06
 93a:	d7 81       	ldd	r29, Z+7	; 0x07
 93c:	8a 81       	ldd	r24, Y+2	; 0x02
 93e:	9b 81       	ldd	r25, Y+3	; 0x03
 940:	20 91 f8 06 	lds	r18, 0x06F8	; 0x8006f8 <xTickCount>
 944:	30 91 f9 06 	lds	r19, 0x06F9	; 0x8006f9 <xTickCount+0x1>
 948:	28 17       	cp	r18, r24
 94a:	39 07       	cpc	r19, r25
 94c:	28 f4       	brcc	.+10     	; 0x958 <vTaskIncrementTick+0x11c>
 94e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 952:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 956:	2e c0       	rjmp	.+92     	; 0x9b4 <vTaskIncrementTick+0x178>
 958:	8e 01       	movw	r16, r28
 95a:	0e 5f       	subi	r16, 0xFE	; 254
 95c:	1f 4f       	sbci	r17, 0xFF	; 255
 95e:	c8 01       	movw	r24, r16
 960:	4c dc       	rcall	.-1896   	; 0x1fa <vListRemove>
 962:	8c 89       	ldd	r24, Y+20	; 0x14
 964:	9d 89       	ldd	r25, Y+21	; 0x15
 966:	89 2b       	or	r24, r25
 968:	19 f0       	breq	.+6      	; 0x970 <vTaskIncrementTick+0x134>
 96a:	ce 01       	movw	r24, r28
 96c:	0c 96       	adiw	r24, 0x0c	; 12
 96e:	45 dc       	rcall	.-1910   	; 0x1fa <vListRemove>
 970:	8e 89       	ldd	r24, Y+22	; 0x16
 972:	90 91 f6 06 	lds	r25, 0x06F6	; 0x8006f6 <uxTopReadyPriority>
 976:	98 17       	cp	r25, r24
 978:	10 f4       	brcc	.+4      	; 0x97e <vTaskIncrementTick+0x142>
 97a:	80 93 f6 06 	sts	0x06F6, r24	; 0x8006f6 <uxTopReadyPriority>
 97e:	90 e0       	ldi	r25, 0x00	; 0
 980:	9c 01       	movw	r18, r24
 982:	22 0f       	add	r18, r18
 984:	33 1f       	adc	r19, r19
 986:	22 0f       	add	r18, r18
 988:	33 1f       	adc	r19, r19
 98a:	22 0f       	add	r18, r18
 98c:	33 1f       	adc	r19, r19
 98e:	82 0f       	add	r24, r18
 990:	93 1f       	adc	r25, r19
 992:	b8 01       	movw	r22, r16
 994:	8c 5d       	subi	r24, 0xDC	; 220
 996:	98 4f       	sbci	r25, 0xF8	; 248
 998:	ce db       	rcall	.-2148   	; 0x136 <vListInsertEnd>
 99a:	e0 91 10 07 	lds	r30, 0x0710	; 0x800710 <pxDelayedTaskList>
 99e:	f0 91 11 07 	lds	r31, 0x0711	; 0x800711 <pxDelayedTaskList+0x1>
 9a2:	80 81       	ld	r24, Z
 9a4:	81 11       	cpse	r24, r1
 9a6:	c1 cf       	rjmp	.-126    	; 0x92a <vTaskIncrementTick+0xee>
 9a8:	b9 cf       	rjmp	.-142    	; 0x91c <vTaskIncrementTick+0xe0>
 9aa:	80 91 f3 06 	lds	r24, 0x06F3	; 0x8006f3 <uxMissedTicks>
 9ae:	8f 5f       	subi	r24, 0xFF	; 255
 9b0:	80 93 f3 06 	sts	0x06F3, r24	; 0x8006f3 <uxMissedTicks>
 9b4:	df 91       	pop	r29
 9b6:	cf 91       	pop	r28
 9b8:	1f 91       	pop	r17
 9ba:	0f 91       	pop	r16
 9bc:	08 95       	ret

000009be <xTaskResumeAll>:
 9be:	cf 92       	push	r12
 9c0:	df 92       	push	r13
 9c2:	ef 92       	push	r14
 9c4:	ff 92       	push	r15
 9c6:	0f 93       	push	r16
 9c8:	1f 93       	push	r17
 9ca:	cf 93       	push	r28
 9cc:	df 93       	push	r29
 9ce:	0f b6       	in	r0, 0x3f	; 63
 9d0:	f8 94       	cli
 9d2:	0f 92       	push	r0
 9d4:	80 91 f4 06 	lds	r24, 0x06F4	; 0x8006f4 <uxSchedulerSuspended>
 9d8:	81 50       	subi	r24, 0x01	; 1
 9da:	80 93 f4 06 	sts	0x06F4, r24	; 0x8006f4 <uxSchedulerSuspended>
 9de:	80 91 f4 06 	lds	r24, 0x06F4	; 0x8006f4 <uxSchedulerSuspended>
 9e2:	81 11       	cpse	r24, r1
 9e4:	5f c0       	rjmp	.+190    	; 0xaa4 <xTaskResumeAll+0xe6>
 9e6:	80 91 fa 06 	lds	r24, 0x06FA	; 0x8006fa <uxCurrentNumberOfTasks>
 9ea:	81 11       	cpse	r24, r1
 9ec:	2f c0       	rjmp	.+94     	; 0xa4c <xTaskResumeAll+0x8e>
 9ee:	5d c0       	rjmp	.+186    	; 0xaaa <xTaskResumeAll+0xec>
 9f0:	d7 01       	movw	r26, r14
 9f2:	15 96       	adiw	r26, 0x05	; 5
 9f4:	ed 91       	ld	r30, X+
 9f6:	fc 91       	ld	r31, X
 9f8:	16 97       	sbiw	r26, 0x06	; 6
 9fa:	c6 81       	ldd	r28, Z+6	; 0x06
 9fc:	d7 81       	ldd	r29, Z+7	; 0x07
 9fe:	ce 01       	movw	r24, r28
 a00:	0c 96       	adiw	r24, 0x0c	; 12
 a02:	fb db       	rcall	.-2058   	; 0x1fa <vListRemove>
 a04:	8e 01       	movw	r16, r28
 a06:	0e 5f       	subi	r16, 0xFE	; 254
 a08:	1f 4f       	sbci	r17, 0xFF	; 255
 a0a:	c8 01       	movw	r24, r16
 a0c:	f6 db       	rcall	.-2068   	; 0x1fa <vListRemove>
 a0e:	8e 89       	ldd	r24, Y+22	; 0x16
 a10:	90 91 f6 06 	lds	r25, 0x06F6	; 0x8006f6 <uxTopReadyPriority>
 a14:	98 17       	cp	r25, r24
 a16:	10 f4       	brcc	.+4      	; 0xa1c <xTaskResumeAll+0x5e>
 a18:	80 93 f6 06 	sts	0x06F6, r24	; 0x8006f6 <uxTopReadyPriority>
 a1c:	90 e0       	ldi	r25, 0x00	; 0
 a1e:	9c 01       	movw	r18, r24
 a20:	22 0f       	add	r18, r18
 a22:	33 1f       	adc	r19, r19
 a24:	22 0f       	add	r18, r18
 a26:	33 1f       	adc	r19, r19
 a28:	22 0f       	add	r18, r18
 a2a:	33 1f       	adc	r19, r19
 a2c:	82 0f       	add	r24, r18
 a2e:	93 1f       	adc	r25, r19
 a30:	b8 01       	movw	r22, r16
 a32:	8c 5d       	subi	r24, 0xDC	; 220
 a34:	98 4f       	sbci	r25, 0xF8	; 248
 a36:	7f db       	rcall	.-2306   	; 0x136 <vListInsertEnd>
 a38:	e0 91 48 07 	lds	r30, 0x0748	; 0x800748 <pxCurrentTCB>
 a3c:	f0 91 49 07 	lds	r31, 0x0749	; 0x800749 <pxCurrentTCB+0x1>
 a40:	9e 89       	ldd	r25, Y+22	; 0x16
 a42:	86 89       	ldd	r24, Z+22	; 0x16
 a44:	98 17       	cp	r25, r24
 a46:	58 f0       	brcs	.+22     	; 0xa5e <xTaskResumeAll+0xa0>
 a48:	dc 2c       	mov	r13, r12
 a4a:	09 c0       	rjmp	.+18     	; 0xa5e <xTaskResumeAll+0xa0>
 a4c:	d1 2c       	mov	r13, r1
 a4e:	0f 2e       	mov	r0, r31
 a50:	f5 e0       	ldi	r31, 0x05	; 5
 a52:	ef 2e       	mov	r14, r31
 a54:	f7 e0       	ldi	r31, 0x07	; 7
 a56:	ff 2e       	mov	r15, r31
 a58:	f0 2d       	mov	r31, r0
 a5a:	cc 24       	eor	r12, r12
 a5c:	c3 94       	inc	r12
 a5e:	f7 01       	movw	r30, r14
 a60:	80 81       	ld	r24, Z
 a62:	81 11       	cpse	r24, r1
 a64:	c5 cf       	rjmp	.-118    	; 0x9f0 <xTaskResumeAll+0x32>
 a66:	80 91 f3 06 	lds	r24, 0x06F3	; 0x8006f3 <uxMissedTicks>
 a6a:	88 23       	and	r24, r24
 a6c:	79 f0       	breq	.+30     	; 0xa8c <xTaskResumeAll+0xce>
 a6e:	80 91 f3 06 	lds	r24, 0x06F3	; 0x8006f3 <uxMissedTicks>
 a72:	88 23       	and	r24, r24
 a74:	91 f0       	breq	.+36     	; 0xa9a <xTaskResumeAll+0xdc>
 a76:	e2 de       	rcall	.-572    	; 0x83c <vTaskIncrementTick>
 a78:	80 91 f3 06 	lds	r24, 0x06F3	; 0x8006f3 <uxMissedTicks>
 a7c:	81 50       	subi	r24, 0x01	; 1
 a7e:	80 93 f3 06 	sts	0x06F3, r24	; 0x8006f3 <uxMissedTicks>
 a82:	80 91 f3 06 	lds	r24, 0x06F3	; 0x8006f3 <uxMissedTicks>
 a86:	81 11       	cpse	r24, r1
 a88:	f6 cf       	rjmp	.-20     	; 0xa76 <xTaskResumeAll+0xb8>
 a8a:	07 c0       	rjmp	.+14     	; 0xa9a <xTaskResumeAll+0xdc>
 a8c:	f1 e0       	ldi	r31, 0x01	; 1
 a8e:	df 16       	cp	r13, r31
 a90:	21 f0       	breq	.+8      	; 0xa9a <xTaskResumeAll+0xdc>
 a92:	80 91 f2 06 	lds	r24, 0x06F2	; 0x8006f2 <xMissedYield>
 a96:	81 30       	cpi	r24, 0x01	; 1
 a98:	39 f4       	brne	.+14     	; 0xaa8 <xTaskResumeAll+0xea>
 a9a:	10 92 f2 06 	sts	0x06F2, r1	; 0x8006f2 <xMissedYield>
 a9e:	c4 dc       	rcall	.-1656   	; 0x428 <vPortYield>
 aa0:	81 e0       	ldi	r24, 0x01	; 1
 aa2:	03 c0       	rjmp	.+6      	; 0xaaa <xTaskResumeAll+0xec>
 aa4:	80 e0       	ldi	r24, 0x00	; 0
 aa6:	01 c0       	rjmp	.+2      	; 0xaaa <xTaskResumeAll+0xec>
 aa8:	80 e0       	ldi	r24, 0x00	; 0
 aaa:	0f 90       	pop	r0
 aac:	0f be       	out	0x3f, r0	; 63
 aae:	df 91       	pop	r29
 ab0:	cf 91       	pop	r28
 ab2:	1f 91       	pop	r17
 ab4:	0f 91       	pop	r16
 ab6:	ff 90       	pop	r15
 ab8:	ef 90       	pop	r14
 aba:	df 90       	pop	r13
 abc:	cf 90       	pop	r12
 abe:	08 95       	ret

00000ac0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
 ac0:	cf 93       	push	r28
 ac2:	df 93       	push	r29
 ac4:	ec 01       	movw	r28, r24
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
 ac6:	89 2b       	or	r24, r25
		{
			vTaskSuspendAll();
 ac8:	91 f0       	breq	.+36     	; 0xaee <vTaskDelay+0x2e>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
 aca:	b2 de       	rcall	.-668    	; 0x830 <vTaskSuspendAll>
 acc:	80 91 f8 06 	lds	r24, 0x06F8	; 0x8006f8 <xTickCount>
 ad0:	90 91 f9 06 	lds	r25, 0x06F9	; 0x8006f9 <xTickCount+0x1>
 ad4:	c8 0f       	add	r28, r24

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 ad6:	d9 1f       	adc	r29, r25
 ad8:	80 91 48 07 	lds	r24, 0x0748	; 0x800748 <pxCurrentTCB>
 adc:	90 91 49 07 	lds	r25, 0x0749	; 0x800749 <pxCurrentTCB+0x1>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
			}
			xAlreadyYielded = xTaskResumeAll();
 ae0:	02 96       	adiw	r24, 0x02	; 2
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 ae2:	8b db       	rcall	.-2282   	; 0x1fa <vListRemove>
 ae4:	ce 01       	movw	r24, r28
		{
			portYIELD_WITHIN_API();
 ae6:	53 dd       	rcall	.-1370   	; 0x58e <prvAddCurrentTaskToDelayedList>
 ae8:	6a df       	rcall	.-300    	; 0x9be <xTaskResumeAll>
		}
	}
 aea:	81 11       	cpse	r24, r1
 aec:	01 c0       	rjmp	.+2      	; 0xaf0 <vTaskDelay+0x30>
 aee:	9c dc       	rcall	.-1736   	; 0x428 <vPortYield>
 af0:	df 91       	pop	r29
 af2:	cf 91       	pop	r28
 af4:	08 95       	ret

00000af6 <prvIdleTask>:
		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
		{
			vTaskSuspendAll();
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 af6:	0f 2e       	mov	r0, r31
 af8:	fc ef       	ldi	r31, 0xFC	; 252
 afa:	ef 2e       	mov	r14, r31
 afc:	f6 e0       	ldi	r31, 0x06	; 6
 afe:	ff 2e       	mov	r15, r31
 b00:	f0 2d       	mov	r31, r0

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
 b02:	c4 e2       	ldi	r28, 0x24	; 36
 b04:	d7 e0       	ldi	r29, 0x07	; 7
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
 b06:	80 91 fb 06 	lds	r24, 0x06FB	; 0x8006fb <uxTasksDeleted>
 b0a:	88 23       	and	r24, r24
		{
			vTaskSuspendAll();
 b0c:	29 f1       	breq	.+74     	; 0xb58 <prvIdleTask+0x62>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 b0e:	90 de       	rcall	.-736    	; 0x830 <vTaskSuspendAll>
			xTaskResumeAll();
 b10:	d7 01       	movw	r26, r14
 b12:	1c 91       	ld	r17, X

			if( xListIsEmpty == pdFALSE )
 b14:	54 df       	rcall	.-344    	; 0x9be <xTaskResumeAll>
 b16:	11 23       	and	r17, r17
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
 b18:	f9 f0       	breq	.+62     	; 0xb58 <prvIdleTask+0x62>
 b1a:	0f b6       	in	r0, 0x3f	; 63
 b1c:	f8 94       	cli
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
 b1e:	0f 92       	push	r0
 b20:	d7 01       	movw	r26, r14
 b22:	15 96       	adiw	r26, 0x05	; 5
 b24:	ed 91       	ld	r30, X+
 b26:	fc 91       	ld	r31, X
 b28:	16 97       	sbiw	r26, 0x06	; 6
					vListRemove( &( pxTCB->xGenericListItem ) );
 b2a:	06 81       	ldd	r16, Z+6	; 0x06
 b2c:	17 81       	ldd	r17, Z+7	; 0x07
 b2e:	c8 01       	movw	r24, r16
					--uxCurrentNumberOfTasks;
 b30:	02 96       	adiw	r24, 0x02	; 2
 b32:	63 db       	rcall	.-2362   	; 0x1fa <vListRemove>
 b34:	80 91 fa 06 	lds	r24, 0x06FA	; 0x8006fa <uxCurrentNumberOfTasks>
 b38:	81 50       	subi	r24, 0x01	; 1
					--uxTasksDeleted;
 b3a:	80 93 fa 06 	sts	0x06FA, r24	; 0x8006fa <uxCurrentNumberOfTasks>
 b3e:	80 91 fb 06 	lds	r24, 0x06FB	; 0x8006fb <uxTasksDeleted>
 b42:	81 50       	subi	r24, 0x01	; 1
				}
				taskEXIT_CRITICAL();
 b44:	80 93 fb 06 	sts	0x06FB, r24	; 0x8006fb <uxTasksDeleted>
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
 b48:	0f 90       	pop	r0
 b4a:	0f be       	out	0x3f, r0	; 63
		vPortFree( pxTCB );
 b4c:	f8 01       	movw	r30, r16
 b4e:	87 89       	ldd	r24, Z+23	; 0x17

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
 b50:	90 8d       	ldd	r25, Z+24	; 0x18
 b52:	de da       	rcall	.-2628   	; 0x110 <vPortFree>
 b54:	c8 01       	movw	r24, r16
			{
				taskYIELD();
 b56:	dc da       	rcall	.-2632   	; 0x110 <vPortFree>
 b58:	88 81       	ld	r24, Y
 b5a:	82 30       	cpi	r24, 0x02	; 2
 b5c:	a0 f2       	brcs	.-88     	; 0xb06 <prvIdleTask+0x10>
 b5e:	64 dc       	rcall	.-1848   	; 0x428 <vPortYield>
 b60:	d2 cf       	rjmp	.-92     	; 0xb06 <prvIdleTask+0x10>

00000b62 <vTaskSwitchContext>:
#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
 b62:	80 91 f4 06 	lds	r24, 0x06F4	; 0x8006f4 <uxSchedulerSuspended>
 b66:	81 11       	cpse	r24, r1
 b68:	13 c0       	rjmp	.+38     	; 0xb90 <vTaskSwitchContext+0x2e>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
 b6a:	80 91 f6 06 	lds	r24, 0x06F6	; 0x8006f6 <uxTopReadyPriority>
 b6e:	90 e0       	ldi	r25, 0x00	; 0
 b70:	fc 01       	movw	r30, r24
 b72:	ee 0f       	add	r30, r30
 b74:	ff 1f       	adc	r31, r31
 b76:	ee 0f       	add	r30, r30
 b78:	ff 1f       	adc	r31, r31
 b7a:	ee 0f       	add	r30, r30
 b7c:	ff 1f       	adc	r31, r31
 b7e:	8e 0f       	add	r24, r30
 b80:	9f 1f       	adc	r25, r31
 b82:	fc 01       	movw	r30, r24
 b84:	ec 5d       	subi	r30, 0xDC	; 220
 b86:	f8 4f       	sbci	r31, 0xF8	; 248
 b88:	80 81       	ld	r24, Z
 b8a:	88 23       	and	r24, r24
 b8c:	29 f0       	breq	.+10     	; 0xb98 <vTaskSwitchContext+0x36>
 b8e:	1b c0       	rjmp	.+54     	; 0xbc6 <vTaskSwitchContext+0x64>
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
 b90:	81 e0       	ldi	r24, 0x01	; 1
 b92:	80 93 f2 06 	sts	0x06F2, r24	; 0x8006f2 <xMissedYield>
 b96:	08 95       	ret
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
 b98:	80 91 f6 06 	lds	r24, 0x06F6	; 0x8006f6 <uxTopReadyPriority>
 b9c:	81 50       	subi	r24, 0x01	; 1
 b9e:	80 93 f6 06 	sts	0x06F6, r24	; 0x8006f6 <uxTopReadyPriority>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
 ba2:	80 91 f6 06 	lds	r24, 0x06F6	; 0x8006f6 <uxTopReadyPriority>
 ba6:	90 e0       	ldi	r25, 0x00	; 0
 ba8:	fc 01       	movw	r30, r24
 baa:	ee 0f       	add	r30, r30
 bac:	ff 1f       	adc	r31, r31
 bae:	ee 0f       	add	r30, r30
 bb0:	ff 1f       	adc	r31, r31
 bb2:	ee 0f       	add	r30, r30
 bb4:	ff 1f       	adc	r31, r31
 bb6:	8e 0f       	add	r24, r30
 bb8:	9f 1f       	adc	r25, r31
 bba:	fc 01       	movw	r30, r24
 bbc:	ec 5d       	subi	r30, 0xDC	; 220
 bbe:	f8 4f       	sbci	r31, 0xF8	; 248
 bc0:	80 81       	ld	r24, Z
 bc2:	88 23       	and	r24, r24
 bc4:	49 f3       	breq	.-46     	; 0xb98 <vTaskSwitchContext+0x36>
			--uxTopReadyPriority;
		}
	
		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
 bc6:	80 91 f6 06 	lds	r24, 0x06F6	; 0x8006f6 <uxTopReadyPriority>
 bca:	90 e0       	ldi	r25, 0x00	; 0
 bcc:	9c 01       	movw	r18, r24
 bce:	22 0f       	add	r18, r18
 bd0:	33 1f       	adc	r19, r19
 bd2:	22 0f       	add	r18, r18
 bd4:	33 1f       	adc	r19, r19
 bd6:	22 0f       	add	r18, r18
 bd8:	33 1f       	adc	r19, r19
 bda:	28 0f       	add	r18, r24
 bdc:	39 1f       	adc	r19, r25
 bde:	d9 01       	movw	r26, r18
 be0:	ac 5d       	subi	r26, 0xDC	; 220
 be2:	b8 4f       	sbci	r27, 0xF8	; 248
 be4:	11 96       	adiw	r26, 0x01	; 1
 be6:	ed 91       	ld	r30, X+
 be8:	fc 91       	ld	r31, X
 bea:	12 97       	sbiw	r26, 0x02	; 2
 bec:	02 80       	ldd	r0, Z+2	; 0x02
 bee:	f3 81       	ldd	r31, Z+3	; 0x03
 bf0:	e0 2d       	mov	r30, r0
 bf2:	12 96       	adiw	r26, 0x02	; 2
 bf4:	fc 93       	st	X, r31
 bf6:	ee 93       	st	-X, r30
 bf8:	11 97       	sbiw	r26, 0x01	; 1
 bfa:	29 5d       	subi	r18, 0xD9	; 217
 bfc:	38 4f       	sbci	r19, 0xF8	; 248
 bfe:	e2 17       	cp	r30, r18
 c00:	f3 07       	cpc	r31, r19
 c02:	29 f4       	brne	.+10     	; 0xc0e <vTaskSwitchContext+0xac>
 c04:	22 81       	ldd	r18, Z+2	; 0x02
 c06:	33 81       	ldd	r19, Z+3	; 0x03
 c08:	fd 01       	movw	r30, r26
 c0a:	32 83       	std	Z+2, r19	; 0x02
 c0c:	21 83       	std	Z+1, r18	; 0x01
 c0e:	fc 01       	movw	r30, r24
 c10:	ee 0f       	add	r30, r30
 c12:	ff 1f       	adc	r31, r31
 c14:	ee 0f       	add	r30, r30
 c16:	ff 1f       	adc	r31, r31
 c18:	ee 0f       	add	r30, r30
 c1a:	ff 1f       	adc	r31, r31
 c1c:	8e 0f       	add	r24, r30
 c1e:	9f 1f       	adc	r25, r31
 c20:	fc 01       	movw	r30, r24
 c22:	ec 5d       	subi	r30, 0xDC	; 220
 c24:	f8 4f       	sbci	r31, 0xF8	; 248
 c26:	01 80       	ldd	r0, Z+1	; 0x01
 c28:	f2 81       	ldd	r31, Z+2	; 0x02
 c2a:	e0 2d       	mov	r30, r0
 c2c:	86 81       	ldd	r24, Z+6	; 0x06
 c2e:	97 81       	ldd	r25, Z+7	; 0x07
 c30:	90 93 49 07 	sts	0x0749, r25	; 0x800749 <pxCurrentTCB+0x1>
 c34:	80 93 48 07 	sts	0x0748, r24	; 0x800748 <pxCurrentTCB>
 c38:	08 95       	ret

00000c3a <memset>:
 c3a:	dc 01       	movw	r26, r24
 c3c:	01 c0       	rjmp	.+2      	; 0xc40 <memset+0x6>
 c3e:	6d 93       	st	X+, r22
 c40:	41 50       	subi	r20, 0x01	; 1
 c42:	50 40       	sbci	r21, 0x00	; 0
 c44:	e0 f7       	brcc	.-8      	; 0xc3e <memset+0x4>
 c46:	08 95       	ret

00000c48 <strncpy>:
 c48:	fb 01       	movw	r30, r22
 c4a:	dc 01       	movw	r26, r24
 c4c:	41 50       	subi	r20, 0x01	; 1
 c4e:	50 40       	sbci	r21, 0x00	; 0
 c50:	48 f0       	brcs	.+18     	; 0xc64 <strncpy+0x1c>
 c52:	01 90       	ld	r0, Z+
 c54:	0d 92       	st	X+, r0
 c56:	00 20       	and	r0, r0
 c58:	c9 f7       	brne	.-14     	; 0xc4c <strncpy+0x4>
 c5a:	01 c0       	rjmp	.+2      	; 0xc5e <strncpy+0x16>
 c5c:	1d 92       	st	X+, r1
 c5e:	41 50       	subi	r20, 0x01	; 1
 c60:	50 40       	sbci	r21, 0x00	; 0
 c62:	e0 f7       	brcc	.-8      	; 0xc5c <strncpy+0x14>
 c64:	08 95       	ret

00000c66 <_exit>:
 c66:	f8 94       	cli

00000c68 <__stop_program>:
 c68:	ff cf       	rjmp	.-2      	; 0xc68 <__stop_program>
