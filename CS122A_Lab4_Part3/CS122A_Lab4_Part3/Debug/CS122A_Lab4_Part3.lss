
CS122A_Lab4_Part3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002a  00800100  00000d1a  00000dae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d1a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000063b  0080012a  0080012a  00000dd8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000dd8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000e08  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001e8  00000000  00000000  00000e48  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000023d8  00000000  00000000  00001030  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eb4  00000000  00000000  00003408  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001377  00000000  00000000  000042bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004ac  00000000  00000000  00005634  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000d11  00000000  00000000  00005ae0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000011bb  00000000  00000000  000067f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001e0  00000000  00000000  000079ac  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	02 c3       	rjmp	.+1540   	; 0x63a <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea e1       	ldi	r30, 0x1A	; 26
  a0:	fd e0       	ldi	r31, 0x0D	; 13
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 32       	cpi	r26, 0x2A	; 42
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	27 e0       	ldi	r18, 0x07	; 7
  b4:	aa e2       	ldi	r26, 0x2A	; 42
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a5 36       	cpi	r26, 0x65	; 101
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	5a d1       	rcall	.+692    	; 0x378 <main>
  c4:	28 c6       	rjmp	.+3152   	; 0xd16 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <pvPortMalloc>:

static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	#endif

	vTaskSuspendAll();
  cc:	ec 01       	movw	r28, r24
	{
		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
  ce:	08 d4       	rcall	.+2064   	; 0x8e0 <vTaskSuspendAll>
  d0:	20 91 2a 01 	lds	r18, 0x012A	; 0x80012a <__data_end>
  d4:	30 91 2b 01 	lds	r19, 0x012B	; 0x80012b <__data_end+0x1>
  d8:	c9 01       	movw	r24, r18
  da:	8c 0f       	add	r24, r28
  dc:	9d 1f       	adc	r25, r29
  de:	8c 3d       	cpi	r24, 0xDC	; 220
  e0:	45 e0       	ldi	r20, 0x05	; 5
  e2:	94 07       	cpc	r25, r20
  e4:	58 f4       	brcc	.+22     	; 0xfc <pvPortMalloc+0x34>
  e6:	28 17       	cp	r18, r24
  e8:	39 07       	cpc	r19, r25
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
  ea:	58 f4       	brcc	.+22     	; 0x102 <pvPortMalloc+0x3a>
  ec:	e9 01       	movw	r28, r18
  ee:	c4 5d       	subi	r28, 0xD4	; 212
			xNextFreeByte += xWantedSize;			
  f0:	de 4f       	sbci	r29, 0xFE	; 254
  f2:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <__data_end+0x1>
  f6:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <__data_end>
static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL; 
  fa:	05 c0       	rjmp	.+10     	; 0x106 <pvPortMalloc+0x3e>
  fc:	c0 e0       	ldi	r28, 0x00	; 0
  fe:	d0 e0       	ldi	r29, 0x00	; 0
 100:	02 c0       	rjmp	.+4      	; 0x106 <pvPortMalloc+0x3e>
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
			xNextFreeByte += xWantedSize;			
		}	
	}
	xTaskResumeAll();
 102:	c0 e0       	ldi	r28, 0x00	; 0
 104:	d0 e0       	ldi	r29, 0x00	; 0
		}
	}
	#endif	

	return pvReturn;
}
 106:	b3 d4       	rcall	.+2406   	; 0xa6e <xTaskResumeAll>
 108:	ce 01       	movw	r24, r28
 10a:	df 91       	pop	r29
 10c:	cf 91       	pop	r28
 10e:	08 95       	ret

00000110 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 110:	08 95       	ret

00000112 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
 112:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
 114:	03 96       	adiw	r24, 0x03	; 3
 116:	92 83       	std	Z+2, r25	; 0x02
 118:	81 83       	std	Z+1, r24	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 11a:	2f ef       	ldi	r18, 0xFF	; 255
 11c:	3f ef       	ldi	r19, 0xFF	; 255
 11e:	34 83       	std	Z+4, r19	; 0x04
 120:	23 83       	std	Z+3, r18	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
 122:	96 83       	std	Z+6, r25	; 0x06
 124:	85 83       	std	Z+5, r24	; 0x05
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
 126:	90 87       	std	Z+8, r25	; 0x08
 128:	87 83       	std	Z+7, r24	; 0x07

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
 12a:	10 82       	st	Z, r1
 12c:	08 95       	ret

0000012e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 12e:	fc 01       	movw	r30, r24
 130:	11 86       	std	Z+9, r1	; 0x09
 132:	10 86       	std	Z+8, r1	; 0x08
 134:	08 95       	ret

00000136 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
 136:	cf 93       	push	r28
 138:	df 93       	push	r29
 13a:	fc 01       	movw	r30, r24
 13c:	db 01       	movw	r26, r22

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
 13e:	21 81       	ldd	r18, Z+1	; 0x01
 140:	32 81       	ldd	r19, Z+2	; 0x02

	pxNewListItem->pxNext = pxIndex->pxNext;
 142:	e9 01       	movw	r28, r18
 144:	8a 81       	ldd	r24, Y+2	; 0x02
 146:	9b 81       	ldd	r25, Y+3	; 0x03
 148:	13 96       	adiw	r26, 0x03	; 3
 14a:	9c 93       	st	X, r25
 14c:	8e 93       	st	-X, r24
 14e:	12 97       	sbiw	r26, 0x02	; 2
	pxNewListItem->pxPrevious = pxList->pxIndex;
 150:	81 81       	ldd	r24, Z+1	; 0x01
 152:	92 81       	ldd	r25, Z+2	; 0x02
 154:	15 96       	adiw	r26, 0x05	; 5
 156:	9c 93       	st	X, r25
 158:	8e 93       	st	-X, r24
 15a:	14 97       	sbiw	r26, 0x04	; 4
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
 15c:	8a 81       	ldd	r24, Y+2	; 0x02
 15e:	9b 81       	ldd	r25, Y+3	; 0x03
 160:	ec 01       	movw	r28, r24
 162:	7d 83       	std	Y+5, r23	; 0x05
 164:	6c 83       	std	Y+4, r22	; 0x04
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
 166:	e9 01       	movw	r28, r18
 168:	7b 83       	std	Y+3, r23	; 0x03
 16a:	6a 83       	std	Y+2, r22	; 0x02
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
 16c:	72 83       	std	Z+2, r23	; 0x02
 16e:	61 83       	std	Z+1, r22	; 0x01

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 170:	19 96       	adiw	r26, 0x09	; 9
 172:	fc 93       	st	X, r31
 174:	ee 93       	st	-X, r30
 176:	18 97       	sbiw	r26, 0x08	; 8

	( pxList->uxNumberOfItems )++;
 178:	80 81       	ld	r24, Z
 17a:	8f 5f       	subi	r24, 0xFF	; 255
 17c:	80 83       	st	Z, r24
}
 17e:	df 91       	pop	r29
 180:	cf 91       	pop	r28
 182:	08 95       	ret

00000184 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
 184:	cf 93       	push	r28
 186:	df 93       	push	r29
 188:	eb 01       	movw	r28, r22
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
 18a:	48 81       	ld	r20, Y
 18c:	59 81       	ldd	r21, Y+1	; 0x01
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 18e:	4f 3f       	cpi	r20, 0xFF	; 255
 190:	2f ef       	ldi	r18, 0xFF	; 255
 192:	52 07       	cpc	r21, r18
 194:	31 f4       	brne	.+12     	; 0x1a2 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 196:	dc 01       	movw	r26, r24
 198:	17 96       	adiw	r26, 0x07	; 7
 19a:	ed 91       	ld	r30, X+
 19c:	fc 91       	ld	r31, X
 19e:	18 97       	sbiw	r26, 0x08	; 8
 1a0:	17 c0       	rjmp	.+46     	; 0x1d0 <vListInsert+0x4c>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 1a2:	fc 01       	movw	r30, r24
 1a4:	33 96       	adiw	r30, 0x03	; 3
 1a6:	dc 01       	movw	r26, r24
 1a8:	15 96       	adiw	r26, 0x05	; 5
 1aa:	2d 91       	ld	r18, X+
 1ac:	3c 91       	ld	r19, X
 1ae:	16 97       	sbiw	r26, 0x06	; 6
 1b0:	d9 01       	movw	r26, r18
 1b2:	2d 91       	ld	r18, X+
 1b4:	3c 91       	ld	r19, X
 1b6:	42 17       	cp	r20, r18
 1b8:	53 07       	cpc	r21, r19
 1ba:	50 f0       	brcs	.+20     	; 0x1d0 <vListInsert+0x4c>
 1bc:	02 80       	ldd	r0, Z+2	; 0x02
 1be:	f3 81       	ldd	r31, Z+3	; 0x03
 1c0:	e0 2d       	mov	r30, r0
 1c2:	a2 81       	ldd	r26, Z+2	; 0x02
 1c4:	b3 81       	ldd	r27, Z+3	; 0x03
 1c6:	2d 91       	ld	r18, X+
 1c8:	3c 91       	ld	r19, X
 1ca:	42 17       	cp	r20, r18
 1cc:	53 07       	cpc	r21, r19
 1ce:	b0 f7       	brcc	.-20     	; 0x1bc <vListInsert+0x38>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 1d0:	a2 81       	ldd	r26, Z+2	; 0x02
 1d2:	b3 81       	ldd	r27, Z+3	; 0x03
 1d4:	bb 83       	std	Y+3, r27	; 0x03
 1d6:	aa 83       	std	Y+2, r26	; 0x02
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
 1d8:	15 96       	adiw	r26, 0x05	; 5
 1da:	dc 93       	st	X, r29
 1dc:	ce 93       	st	-X, r28
 1de:	14 97       	sbiw	r26, 0x04	; 4
	pxNewListItem->pxPrevious = pxIterator;
 1e0:	fd 83       	std	Y+5, r31	; 0x05
 1e2:	ec 83       	std	Y+4, r30	; 0x04
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
 1e4:	d3 83       	std	Z+3, r29	; 0x03
 1e6:	c2 83       	std	Z+2, r28	; 0x02

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 1e8:	99 87       	std	Y+9, r25	; 0x09
 1ea:	88 87       	std	Y+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
 1ec:	fc 01       	movw	r30, r24
 1ee:	20 81       	ld	r18, Z
 1f0:	2f 5f       	subi	r18, 0xFF	; 255
 1f2:	20 83       	st	Z, r18
}
 1f4:	df 91       	pop	r29
 1f6:	cf 91       	pop	r28
 1f8:	08 95       	ret

000001fa <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
 1fa:	fc 01       	movw	r30, r24
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 1fc:	a2 81       	ldd	r26, Z+2	; 0x02
 1fe:	b3 81       	ldd	r27, Z+3	; 0x03
 200:	84 81       	ldd	r24, Z+4	; 0x04
 202:	95 81       	ldd	r25, Z+5	; 0x05
 204:	15 96       	adiw	r26, 0x05	; 5
 206:	9c 93       	st	X, r25
 208:	8e 93       	st	-X, r24
 20a:	14 97       	sbiw	r26, 0x04	; 4
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 20c:	a4 81       	ldd	r26, Z+4	; 0x04
 20e:	b5 81       	ldd	r27, Z+5	; 0x05
 210:	82 81       	ldd	r24, Z+2	; 0x02
 212:	93 81       	ldd	r25, Z+3	; 0x03
 214:	13 96       	adiw	r26, 0x03	; 3
 216:	9c 93       	st	X, r25
 218:	8e 93       	st	-X, r24
 21a:	12 97       	sbiw	r26, 0x02	; 2
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
 21c:	a0 85       	ldd	r26, Z+8	; 0x08
 21e:	b1 85       	ldd	r27, Z+9	; 0x09

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 220:	11 96       	adiw	r26, 0x01	; 1
 222:	8d 91       	ld	r24, X+
 224:	9c 91       	ld	r25, X
 226:	12 97       	sbiw	r26, 0x02	; 2
 228:	e8 17       	cp	r30, r24
 22a:	f9 07       	cpc	r31, r25
 22c:	31 f4       	brne	.+12     	; 0x23a <vListRemove+0x40>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 22e:	84 81       	ldd	r24, Z+4	; 0x04
 230:	95 81       	ldd	r25, Z+5	; 0x05
 232:	12 96       	adiw	r26, 0x02	; 2
 234:	9c 93       	st	X, r25
 236:	8e 93       	st	-X, r24
 238:	11 97       	sbiw	r26, 0x01	; 1
	}

	pxItemToRemove->pvContainer = NULL;
 23a:	11 86       	std	Z+9, r1	; 0x09
 23c:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
 23e:	8c 91       	ld	r24, X
 240:	81 50       	subi	r24, 0x01	; 1
 242:	8c 93       	st	X, r24
 244:	08 95       	ret

00000246 <LEDS_Tick>:
}

enum LEDState2 {INIT2,L02,L12} led_state2;

void LEDS_Init2(){
    led_state2 = INIT2;
 246:	80 91 63 07 	lds	r24, 0x0763	; 0x800763 <led_state>
 24a:	81 30       	cpi	r24, 0x01	; 1
 24c:	41 f0       	breq	.+16     	; 0x25e <LEDS_Tick+0x18>
 24e:	18 f0       	brcs	.+6      	; 0x256 <LEDS_Tick+0x10>
 250:	82 30       	cpi	r24, 0x02	; 2
 252:	51 f0       	breq	.+20     	; 0x268 <LEDS_Tick+0x22>
 254:	0d c0       	rjmp	.+26     	; 0x270 <LEDS_Tick+0x2a>
 256:	81 e0       	ldi	r24, 0x01	; 1
 258:	80 93 63 07 	sts	0x0763, r24	; 0x800763 <led_state>
 25c:	0d c0       	rjmp	.+26     	; 0x278 <LEDS_Tick+0x32>
 25e:	82 e0       	ldi	r24, 0x02	; 2
 260:	80 93 63 07 	sts	0x0763, r24	; 0x800763 <led_state>
 264:	58 98       	cbi	0x0b, 0	; 11
 266:	08 95       	ret
 268:	81 e0       	ldi	r24, 0x01	; 1
 26a:	80 93 63 07 	sts	0x0763, r24	; 0x800763 <led_state>
 26e:	04 c0       	rjmp	.+8      	; 0x278 <LEDS_Tick+0x32>
 270:	10 92 63 07 	sts	0x0763, r1	; 0x800763 <led_state>
 274:	1b b8       	out	0x0b, r1	; 11
 276:	08 95       	ret
 278:	58 9a       	sbi	0x0b, 0	; 11
 27a:	08 95       	ret

0000027c <LedSecTask>:
 27c:	10 92 63 07 	sts	0x0763, r1	; 0x800763 <led_state>
 280:	e2 df       	rcall	.-60     	; 0x246 <LEDS_Tick>
 282:	84 ef       	ldi	r24, 0xF4	; 244
 284:	91 e0       	ldi	r25, 0x01	; 1
 286:	74 d4       	rcall	.+2280   	; 0xb70 <vTaskDelay>
 288:	fb cf       	rjmp	.-10     	; 0x280 <LedSecTask+0x4>

0000028a <LEDS_Tick1>:
 28a:	80 91 62 07 	lds	r24, 0x0762	; 0x800762 <led_state1>
 28e:	81 30       	cpi	r24, 0x01	; 1
 290:	41 f0       	breq	.+16     	; 0x2a2 <LEDS_Tick1+0x18>
 292:	18 f0       	brcs	.+6      	; 0x29a <LEDS_Tick1+0x10>
 294:	82 30       	cpi	r24, 0x02	; 2
 296:	51 f0       	breq	.+20     	; 0x2ac <LEDS_Tick1+0x22>
 298:	0d c0       	rjmp	.+26     	; 0x2b4 <LEDS_Tick1+0x2a>
 29a:	81 e0       	ldi	r24, 0x01	; 1
 29c:	80 93 62 07 	sts	0x0762, r24	; 0x800762 <led_state1>
 2a0:	0d c0       	rjmp	.+26     	; 0x2bc <LEDS_Tick1+0x32>
 2a2:	82 e0       	ldi	r24, 0x02	; 2
 2a4:	80 93 62 07 	sts	0x0762, r24	; 0x800762 <led_state1>
 2a8:	5a 98       	cbi	0x0b, 2	; 11
 2aa:	08 95       	ret
 2ac:	81 e0       	ldi	r24, 0x01	; 1
 2ae:	80 93 62 07 	sts	0x0762, r24	; 0x800762 <led_state1>
 2b2:	04 c0       	rjmp	.+8      	; 0x2bc <LEDS_Tick1+0x32>
 2b4:	10 92 62 07 	sts	0x0762, r1	; 0x800762 <led_state1>
 2b8:	1b b8       	out	0x0b, r1	; 11
 2ba:	08 95       	ret
 2bc:	5a 9a       	sbi	0x0b, 2	; 11
 2be:	08 95       	ret

000002c0 <LedSecTask1>:
 2c0:	10 92 62 07 	sts	0x0762, r1	; 0x800762 <led_state1>
 2c4:	e2 df       	rcall	.-60     	; 0x28a <LEDS_Tick1>
 2c6:	88 ee       	ldi	r24, 0xE8	; 232
 2c8:	93 e0       	ldi	r25, 0x03	; 3
 2ca:	52 d4       	rcall	.+2212   	; 0xb70 <vTaskDelay>
 2cc:	fb cf       	rjmp	.-10     	; 0x2c4 <LedSecTask1+0x4>

000002ce <LEDS_Tick2>:
}

void LEDS_Tick2(){
    //Transitions
    switch(led_state2){
 2ce:	80 91 64 07 	lds	r24, 0x0764	; 0x800764 <led_state2>
 2d2:	81 30       	cpi	r24, 0x01	; 1
 2d4:	41 f0       	breq	.+16     	; 0x2e6 <LEDS_Tick2+0x18>
 2d6:	18 f0       	brcs	.+6      	; 0x2de <LEDS_Tick2+0x10>
 2d8:	82 30       	cpi	r24, 0x02	; 2
 2da:	51 f0       	breq	.+20     	; 0x2f0 <LEDS_Tick2+0x22>
 2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <LEDS_Tick2+0x2a>
        case INIT2:
        led_state2 = L02;
 2de:	81 e0       	ldi	r24, 0x01	; 1
 2e0:	80 93 64 07 	sts	0x0764, r24	; 0x800764 <led_state2>
        break;
 2e4:	0d c0       	rjmp	.+26     	; 0x300 <LEDS_Tick2+0x32>
        case L02:
        led_state2 = L12;
 2e6:	82 e0       	ldi	r24, 0x02	; 2
 2e8:	80 93 64 07 	sts	0x0764, r24	; 0x800764 <led_state2>
        break;
        case L02:
        PORTD = PORTD|0x10;
        break;
        case L12:
        PORTD = PORTD&0xEF;
 2ec:	5c 98       	cbi	0x0b, 4	; 11
        break;
 2ee:	08 95       	ret
        break;
        case L02:
        led_state2 = L12;
        break;
        case L12:
        led_state2 = L02;
 2f0:	81 e0       	ldi	r24, 0x01	; 1
 2f2:	80 93 64 07 	sts	0x0764, r24	; 0x800764 <led_state2>
        break;
 2f6:	04 c0       	rjmp	.+8      	; 0x300 <LEDS_Tick2+0x32>
        default:
        led_state2 = INIT2;
 2f8:	10 92 64 07 	sts	0x0764, r1	; 0x800764 <led_state2>
        break;
    }
    //Actions
    switch(led_state2){
        case INIT2:
        PORTD = 0;
 2fc:	1b b8       	out	0x0b, r1	; 11
        case L12:
        PORTD = PORTD&0xEF;
        break;
        default:break;
    }
}
 2fe:	08 95       	ret
    switch(led_state2){
        case INIT2:
        PORTD = 0;
        break;
        case L02:
        PORTD = PORTD|0x10;
 300:	5c 9a       	sbi	0x0b, 4	; 11
 302:	08 95       	ret

00000304 <LedSecTask2>:
}

enum LEDState2 {INIT2,L02,L12} led_state2;

void LEDS_Init2(){
    led_state2 = INIT2;
 304:	10 92 64 07 	sts	0x0764, r1	; 0x800764 <led_state2>
{
    LEDS_Init2();
    for(;;)
    {
        LEDS_Tick2();
        vTaskDelay(1500);
 308:	e2 df       	rcall	.-60     	; 0x2ce <LEDS_Tick2>
 30a:	8c ed       	ldi	r24, 0xDC	; 220
 30c:	95 e0       	ldi	r25, 0x05	; 5
 30e:	30 d4       	rcall	.+2144   	; 0xb70 <vTaskDelay>
 310:	fb cf       	rjmp	.-10     	; 0x308 <LedSecTask2+0x4>

00000312 <StartSecPulse>:
    }
}

void StartSecPulse(unsigned portBASE_TYPE Priority)
{
 312:	af 92       	push	r10
 314:	bf 92       	push	r11
 316:	cf 92       	push	r12
 318:	df 92       	push	r13
 31a:	ef 92       	push	r14
 31c:	ff 92       	push	r15
 31e:	0f 93       	push	r16
 320:	cf 93       	push	r28
	xTaskCreate(LedSecTask, (signed portCHAR *)"LedSecTask", configMINIMAL_STACK_SIZE, NULL, Priority, NULL );
 322:	a1 2c       	mov	r10, r1
 324:	b1 2c       	mov	r11, r1
 326:	c1 2c       	mov	r12, r1
 328:	d1 2c       	mov	r13, r1
 32a:	e1 2c       	mov	r14, r1
 32c:	f1 2c       	mov	r15, r1
 32e:	08 2f       	mov	r16, r24
 330:	20 e0       	ldi	r18, 0x00	; 0
 332:	30 e0       	ldi	r19, 0x00	; 0
 334:	45 e5       	ldi	r20, 0x55	; 85
 336:	50 e0       	ldi	r21, 0x00	; 0
 338:	62 e0       	ldi	r22, 0x02	; 2
 33a:	71 e0       	ldi	r23, 0x01	; 1
 33c:	8e e3       	ldi	r24, 0x3E	; 62
 33e:	91 e0       	ldi	r25, 0x01	; 1
 340:	b3 d1       	rcall	.+870    	; 0x6a8 <xTaskGenericCreate>
    xTaskCreate(LedSecTask1, (signed portCHAR *)"LedSecTask1", configMINIMAL_STACK_SIZE, NULL, Priority, NULL );
 342:	20 e0       	ldi	r18, 0x00	; 0
 344:	30 e0       	ldi	r19, 0x00	; 0
 346:	45 e5       	ldi	r20, 0x55	; 85
 348:	50 e0       	ldi	r21, 0x00	; 0
 34a:	6d e0       	ldi	r22, 0x0D	; 13
 34c:	71 e0       	ldi	r23, 0x01	; 1
 34e:	80 e6       	ldi	r24, 0x60	; 96
 350:	91 e0       	ldi	r25, 0x01	; 1
 352:	aa d1       	rcall	.+852    	; 0x6a8 <xTaskGenericCreate>
    xTaskCreate(LedSecTask2, (signed portCHAR *)"LedSecTask2", configMINIMAL_STACK_SIZE, NULL, Priority, NULL );
 354:	20 e0       	ldi	r18, 0x00	; 0
 356:	30 e0       	ldi	r19, 0x00	; 0
 358:	45 e5       	ldi	r20, 0x55	; 85
 35a:	50 e0       	ldi	r21, 0x00	; 0
 35c:	69 e1       	ldi	r22, 0x19	; 25
 35e:	71 e0       	ldi	r23, 0x01	; 1
 360:	82 e8       	ldi	r24, 0x82	; 130
 362:	91 e0       	ldi	r25, 0x01	; 1
 364:	a1 d1       	rcall	.+834    	; 0x6a8 <xTaskGenericCreate>
}	
 366:	cf 91       	pop	r28
 368:	0f 91       	pop	r16
 36a:	ff 90       	pop	r15
 36c:	ef 90       	pop	r14
 36e:	df 90       	pop	r13
 370:	cf 90       	pop	r12
 372:	bf 90       	pop	r11
 374:	af 90       	pop	r10
 376:	08 95       	ret

00000378 <main>:
 
int main(void) 
{ 
   DDRA = 0x00; PORTA=0xFF;
 378:	11 b8       	out	0x01, r1	; 1
 37a:	8f ef       	ldi	r24, 0xFF	; 255
 37c:	82 b9       	out	0x02, r24	; 2
   DDRD = 0xFF;
 37e:	8a b9       	out	0x0a, r24	; 10
   //Start Tasks  
   StartSecPulse(1);
 380:	81 e0       	ldi	r24, 0x01	; 1
    //RunSchedular 
   vTaskStartScheduler(); 
 382:	c7 df       	rcall	.-114    	; 0x312 <StartSecPulse>
 384:	84 d2       	rcall	.+1288   	; 0x88e <vTaskStartScheduler>
 
   return 0; 
 386:	80 e0       	ldi	r24, 0x00	; 0
 388:	90 e0       	ldi	r25, 0x00	; 0
 38a:	08 95       	ret

0000038c <pxPortInitialiseStack>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
 38c:	31 e1       	ldi	r19, 0x11	; 17
 38e:	fc 01       	movw	r30, r24
 390:	30 83       	st	Z, r19
 392:	31 97       	sbiw	r30, 0x01	; 1
 394:	22 e2       	ldi	r18, 0x22	; 34
 396:	20 83       	st	Z, r18
 398:	31 97       	sbiw	r30, 0x01	; 1
 39a:	a3 e3       	ldi	r26, 0x33	; 51
 39c:	a0 83       	st	Z, r26
 39e:	31 97       	sbiw	r30, 0x01	; 1
 3a0:	60 83       	st	Z, r22
 3a2:	31 97       	sbiw	r30, 0x01	; 1
 3a4:	70 83       	st	Z, r23
 3a6:	31 97       	sbiw	r30, 0x01	; 1
 3a8:	10 82       	st	Z, r1
 3aa:	31 97       	sbiw	r30, 0x01	; 1
 3ac:	60 e8       	ldi	r22, 0x80	; 128
 3ae:	60 83       	st	Z, r22
 3b0:	31 97       	sbiw	r30, 0x01	; 1
 3b2:	10 82       	st	Z, r1
 3b4:	31 97       	sbiw	r30, 0x01	; 1
 3b6:	62 e0       	ldi	r22, 0x02	; 2
 3b8:	60 83       	st	Z, r22
 3ba:	31 97       	sbiw	r30, 0x01	; 1
 3bc:	63 e0       	ldi	r22, 0x03	; 3
 3be:	60 83       	st	Z, r22
 3c0:	31 97       	sbiw	r30, 0x01	; 1
 3c2:	64 e0       	ldi	r22, 0x04	; 4
 3c4:	60 83       	st	Z, r22
 3c6:	31 97       	sbiw	r30, 0x01	; 1
 3c8:	65 e0       	ldi	r22, 0x05	; 5
 3ca:	60 83       	st	Z, r22
 3cc:	31 97       	sbiw	r30, 0x01	; 1
 3ce:	66 e0       	ldi	r22, 0x06	; 6
 3d0:	60 83       	st	Z, r22
 3d2:	31 97       	sbiw	r30, 0x01	; 1
 3d4:	67 e0       	ldi	r22, 0x07	; 7
 3d6:	60 83       	st	Z, r22
 3d8:	31 97       	sbiw	r30, 0x01	; 1
 3da:	68 e0       	ldi	r22, 0x08	; 8
 3dc:	60 83       	st	Z, r22
 3de:	31 97       	sbiw	r30, 0x01	; 1
 3e0:	69 e0       	ldi	r22, 0x09	; 9
 3e2:	60 83       	st	Z, r22
 3e4:	31 97       	sbiw	r30, 0x01	; 1
 3e6:	60 e1       	ldi	r22, 0x10	; 16
 3e8:	60 83       	st	Z, r22
 3ea:	31 97       	sbiw	r30, 0x01	; 1
 3ec:	30 83       	st	Z, r19
 3ee:	31 97       	sbiw	r30, 0x01	; 1
 3f0:	32 e1       	ldi	r19, 0x12	; 18
 3f2:	30 83       	st	Z, r19
 3f4:	31 97       	sbiw	r30, 0x01	; 1
 3f6:	33 e1       	ldi	r19, 0x13	; 19
 3f8:	30 83       	st	Z, r19
 3fa:	31 97       	sbiw	r30, 0x01	; 1
 3fc:	34 e1       	ldi	r19, 0x14	; 20
 3fe:	30 83       	st	Z, r19
 400:	31 97       	sbiw	r30, 0x01	; 1
 402:	35 e1       	ldi	r19, 0x15	; 21
 404:	30 83       	st	Z, r19
 406:	31 97       	sbiw	r30, 0x01	; 1
 408:	36 e1       	ldi	r19, 0x16	; 22
 40a:	30 83       	st	Z, r19
 40c:	31 97       	sbiw	r30, 0x01	; 1
 40e:	37 e1       	ldi	r19, 0x17	; 23
 410:	30 83       	st	Z, r19
 412:	31 97       	sbiw	r30, 0x01	; 1
 414:	38 e1       	ldi	r19, 0x18	; 24
 416:	30 83       	st	Z, r19
 418:	31 97       	sbiw	r30, 0x01	; 1
 41a:	39 e1       	ldi	r19, 0x19	; 25
 41c:	30 83       	st	Z, r19
 41e:	31 97       	sbiw	r30, 0x01	; 1
 420:	30 e2       	ldi	r19, 0x20	; 32
 422:	30 83       	st	Z, r19
 424:	31 97       	sbiw	r30, 0x01	; 1
 426:	31 e2       	ldi	r19, 0x21	; 33
 428:	30 83       	st	Z, r19
 42a:	31 97       	sbiw	r30, 0x01	; 1
 42c:	20 83       	st	Z, r18
 42e:	31 97       	sbiw	r30, 0x01	; 1
 430:	23 e2       	ldi	r18, 0x23	; 35
 432:	20 83       	st	Z, r18
 434:	31 97       	sbiw	r30, 0x01	; 1
 436:	40 83       	st	Z, r20
 438:	31 97       	sbiw	r30, 0x01	; 1
 43a:	50 83       	st	Z, r21
 43c:	31 97       	sbiw	r30, 0x01	; 1
 43e:	26 e2       	ldi	r18, 0x26	; 38
 440:	20 83       	st	Z, r18
 442:	31 97       	sbiw	r30, 0x01	; 1
 444:	27 e2       	ldi	r18, 0x27	; 39
 446:	20 83       	st	Z, r18
 448:	31 97       	sbiw	r30, 0x01	; 1
 44a:	28 e2       	ldi	r18, 0x28	; 40
 44c:	20 83       	st	Z, r18
 44e:	31 97       	sbiw	r30, 0x01	; 1
 450:	29 e2       	ldi	r18, 0x29	; 41
 452:	20 83       	st	Z, r18
 454:	31 97       	sbiw	r30, 0x01	; 1
 456:	20 e3       	ldi	r18, 0x30	; 48
 458:	20 83       	st	Z, r18
 45a:	31 97       	sbiw	r30, 0x01	; 1
 45c:	21 e3       	ldi	r18, 0x31	; 49
 45e:	20 83       	st	Z, r18
 460:	86 97       	sbiw	r24, 0x26	; 38
 462:	08 95       	ret

00000464 <xPortStartScheduler>:
 464:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 468:	8c e7       	ldi	r24, 0x7C	; 124
 46a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 46e:	8b e0       	ldi	r24, 0x0B	; 11
 470:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 474:	ef e6       	ldi	r30, 0x6F	; 111
 476:	f0 e0       	ldi	r31, 0x00	; 0
 478:	80 81       	ld	r24, Z
 47a:	82 60       	ori	r24, 0x02	; 2
 47c:	80 83       	st	Z, r24
 47e:	a0 91 60 07 	lds	r26, 0x0760	; 0x800760 <pxCurrentTCB>
 482:	b0 91 61 07 	lds	r27, 0x0761	; 0x800761 <pxCurrentTCB+0x1>
 486:	cd 91       	ld	r28, X+
 488:	cd bf       	out	0x3d, r28	; 61
 48a:	dd 91       	ld	r29, X+
 48c:	de bf       	out	0x3e, r29	; 62
 48e:	ff 91       	pop	r31
 490:	ef 91       	pop	r30
 492:	df 91       	pop	r29
 494:	cf 91       	pop	r28
 496:	bf 91       	pop	r27
 498:	af 91       	pop	r26
 49a:	9f 91       	pop	r25
 49c:	8f 91       	pop	r24
 49e:	7f 91       	pop	r23
 4a0:	6f 91       	pop	r22
 4a2:	5f 91       	pop	r21
 4a4:	4f 91       	pop	r20
 4a6:	3f 91       	pop	r19
 4a8:	2f 91       	pop	r18
 4aa:	1f 91       	pop	r17
 4ac:	0f 91       	pop	r16
 4ae:	ff 90       	pop	r15
 4b0:	ef 90       	pop	r14
 4b2:	df 90       	pop	r13
 4b4:	cf 90       	pop	r12
 4b6:	bf 90       	pop	r11
 4b8:	af 90       	pop	r10
 4ba:	9f 90       	pop	r9
 4bc:	8f 90       	pop	r8
 4be:	7f 90       	pop	r7
 4c0:	6f 90       	pop	r6
 4c2:	5f 90       	pop	r5
 4c4:	4f 90       	pop	r4
 4c6:	3f 90       	pop	r3
 4c8:	2f 90       	pop	r2
 4ca:	1f 90       	pop	r1
 4cc:	0f 90       	pop	r0
 4ce:	0f be       	out	0x3f, r0	; 63
 4d0:	0f 90       	pop	r0
 4d2:	08 95       	ret
 4d4:	81 e0       	ldi	r24, 0x01	; 1
 4d6:	08 95       	ret

000004d8 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
 4d8:	0f 92       	push	r0
 4da:	0f b6       	in	r0, 0x3f	; 63
 4dc:	f8 94       	cli
 4de:	0f 92       	push	r0
 4e0:	1f 92       	push	r1
 4e2:	11 24       	eor	r1, r1
 4e4:	2f 92       	push	r2
 4e6:	3f 92       	push	r3
 4e8:	4f 92       	push	r4
 4ea:	5f 92       	push	r5
 4ec:	6f 92       	push	r6
 4ee:	7f 92       	push	r7
 4f0:	8f 92       	push	r8
 4f2:	9f 92       	push	r9
 4f4:	af 92       	push	r10
 4f6:	bf 92       	push	r11
 4f8:	cf 92       	push	r12
 4fa:	df 92       	push	r13
 4fc:	ef 92       	push	r14
 4fe:	ff 92       	push	r15
 500:	0f 93       	push	r16
 502:	1f 93       	push	r17
 504:	2f 93       	push	r18
 506:	3f 93       	push	r19
 508:	4f 93       	push	r20
 50a:	5f 93       	push	r21
 50c:	6f 93       	push	r22
 50e:	7f 93       	push	r23
 510:	8f 93       	push	r24
 512:	9f 93       	push	r25
 514:	af 93       	push	r26
 516:	bf 93       	push	r27
 518:	cf 93       	push	r28
 51a:	df 93       	push	r29
 51c:	ef 93       	push	r30
 51e:	ff 93       	push	r31
 520:	a0 91 60 07 	lds	r26, 0x0760	; 0x800760 <pxCurrentTCB>
 524:	b0 91 61 07 	lds	r27, 0x0761	; 0x800761 <pxCurrentTCB+0x1>
 528:	0d b6       	in	r0, 0x3d	; 61
 52a:	0d 92       	st	X+, r0
 52c:	0e b6       	in	r0, 0x3e	; 62
	vTaskSwitchContext();
 52e:	0d 92       	st	X+, r0
	portRESTORE_CONTEXT();
 530:	70 d3       	rcall	.+1760   	; 0xc12 <vTaskSwitchContext>
 532:	a0 91 60 07 	lds	r26, 0x0760	; 0x800760 <pxCurrentTCB>
 536:	b0 91 61 07 	lds	r27, 0x0761	; 0x800761 <pxCurrentTCB+0x1>
 53a:	cd 91       	ld	r28, X+
 53c:	cd bf       	out	0x3d, r28	; 61
 53e:	dd 91       	ld	r29, X+
 540:	de bf       	out	0x3e, r29	; 62
 542:	ff 91       	pop	r31
 544:	ef 91       	pop	r30
 546:	df 91       	pop	r29
 548:	cf 91       	pop	r28
 54a:	bf 91       	pop	r27
 54c:	af 91       	pop	r26
 54e:	9f 91       	pop	r25
 550:	8f 91       	pop	r24
 552:	7f 91       	pop	r23
 554:	6f 91       	pop	r22
 556:	5f 91       	pop	r21
 558:	4f 91       	pop	r20
 55a:	3f 91       	pop	r19
 55c:	2f 91       	pop	r18
 55e:	1f 91       	pop	r17
 560:	0f 91       	pop	r16
 562:	ff 90       	pop	r15
 564:	ef 90       	pop	r14
 566:	df 90       	pop	r13
 568:	cf 90       	pop	r12
 56a:	bf 90       	pop	r11
 56c:	af 90       	pop	r10
 56e:	9f 90       	pop	r9
 570:	8f 90       	pop	r8
 572:	7f 90       	pop	r7
 574:	6f 90       	pop	r6
 576:	5f 90       	pop	r5
 578:	4f 90       	pop	r4
 57a:	3f 90       	pop	r3
 57c:	2f 90       	pop	r2
 57e:	1f 90       	pop	r1
 580:	0f 90       	pop	r0
 582:	0f be       	out	0x3f, r0	; 63

	asm volatile ( "ret" );
 584:	0f 90       	pop	r0
 586:	08 95       	ret

00000588 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
 588:	0f 92       	push	r0
 58a:	0f b6       	in	r0, 0x3f	; 63
 58c:	f8 94       	cli
 58e:	0f 92       	push	r0
 590:	1f 92       	push	r1
 592:	11 24       	eor	r1, r1
 594:	2f 92       	push	r2
 596:	3f 92       	push	r3
 598:	4f 92       	push	r4
 59a:	5f 92       	push	r5
 59c:	6f 92       	push	r6
 59e:	7f 92       	push	r7
 5a0:	8f 92       	push	r8
 5a2:	9f 92       	push	r9
 5a4:	af 92       	push	r10
 5a6:	bf 92       	push	r11
 5a8:	cf 92       	push	r12
 5aa:	df 92       	push	r13
 5ac:	ef 92       	push	r14
 5ae:	ff 92       	push	r15
 5b0:	0f 93       	push	r16
 5b2:	1f 93       	push	r17
 5b4:	2f 93       	push	r18
 5b6:	3f 93       	push	r19
 5b8:	4f 93       	push	r20
 5ba:	5f 93       	push	r21
 5bc:	6f 93       	push	r22
 5be:	7f 93       	push	r23
 5c0:	8f 93       	push	r24
 5c2:	9f 93       	push	r25
 5c4:	af 93       	push	r26
 5c6:	bf 93       	push	r27
 5c8:	cf 93       	push	r28
 5ca:	df 93       	push	r29
 5cc:	ef 93       	push	r30
 5ce:	ff 93       	push	r31
 5d0:	a0 91 60 07 	lds	r26, 0x0760	; 0x800760 <pxCurrentTCB>
 5d4:	b0 91 61 07 	lds	r27, 0x0761	; 0x800761 <pxCurrentTCB+0x1>
 5d8:	0d b6       	in	r0, 0x3d	; 61
 5da:	0d 92       	st	X+, r0
 5dc:	0e b6       	in	r0, 0x3e	; 62
	vTaskIncrementTick();
	vTaskSwitchContext();
 5de:	0d 92       	st	X+, r0
 5e0:	85 d1       	rcall	.+778    	; 0x8ec <vTaskIncrementTick>
	portRESTORE_CONTEXT();
 5e2:	17 d3       	rcall	.+1582   	; 0xc12 <vTaskSwitchContext>
 5e4:	a0 91 60 07 	lds	r26, 0x0760	; 0x800760 <pxCurrentTCB>
 5e8:	b0 91 61 07 	lds	r27, 0x0761	; 0x800761 <pxCurrentTCB+0x1>
 5ec:	cd 91       	ld	r28, X+
 5ee:	cd bf       	out	0x3d, r28	; 61
 5f0:	dd 91       	ld	r29, X+
 5f2:	de bf       	out	0x3e, r29	; 62
 5f4:	ff 91       	pop	r31
 5f6:	ef 91       	pop	r30
 5f8:	df 91       	pop	r29
 5fa:	cf 91       	pop	r28
 5fc:	bf 91       	pop	r27
 5fe:	af 91       	pop	r26
 600:	9f 91       	pop	r25
 602:	8f 91       	pop	r24
 604:	7f 91       	pop	r23
 606:	6f 91       	pop	r22
 608:	5f 91       	pop	r21
 60a:	4f 91       	pop	r20
 60c:	3f 91       	pop	r19
 60e:	2f 91       	pop	r18
 610:	1f 91       	pop	r17
 612:	0f 91       	pop	r16
 614:	ff 90       	pop	r15
 616:	ef 90       	pop	r14
 618:	df 90       	pop	r13
 61a:	cf 90       	pop	r12
 61c:	bf 90       	pop	r11
 61e:	af 90       	pop	r10
 620:	9f 90       	pop	r9
 622:	8f 90       	pop	r8
 624:	7f 90       	pop	r7
 626:	6f 90       	pop	r6
 628:	5f 90       	pop	r5
 62a:	4f 90       	pop	r4
 62c:	3f 90       	pop	r3
 62e:	2f 90       	pop	r2
 630:	1f 90       	pop	r1
 632:	0f 90       	pop	r0
 634:	0f be       	out	0x3f, r0	; 63

	asm volatile ( "ret" );
 636:	0f 90       	pop	r0
 638:	08 95       	ret

0000063a <__vector_13>:
}
 63a:	a6 df       	rcall	.-180    	; 0x588 <vPortYieldFromTick>
 63c:	18 95       	reti

0000063e <prvAddCurrentTaskToDelayedList>:
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
		{
			portYIELD_WITHIN_API();
		}
	}
 63e:	cf 93       	push	r28
 640:	df 93       	push	r29
 642:	ec 01       	movw	r28, r24
 644:	e0 91 60 07 	lds	r30, 0x0760	; 0x800760 <pxCurrentTCB>
 648:	f0 91 61 07 	lds	r31, 0x0761	; 0x800761 <pxCurrentTCB+0x1>
 64c:	93 83       	std	Z+3, r25	; 0x03
 64e:	82 83       	std	Z+2, r24	; 0x02
 650:	80 91 10 07 	lds	r24, 0x0710	; 0x800710 <xTickCount>
 654:	90 91 11 07 	lds	r25, 0x0711	; 0x800711 <xTickCount+0x1>
 658:	c8 17       	cp	r28, r24
 65a:	d9 07       	cpc	r29, r25
 65c:	60 f4       	brcc	.+24     	; 0x676 <prvAddCurrentTaskToDelayedList+0x38>
 65e:	60 91 60 07 	lds	r22, 0x0760	; 0x800760 <pxCurrentTCB>
 662:	70 91 61 07 	lds	r23, 0x0761	; 0x800761 <pxCurrentTCB+0x1>
 666:	80 91 26 07 	lds	r24, 0x0726	; 0x800726 <pxOverflowDelayedTaskList>
 66a:	90 91 27 07 	lds	r25, 0x0727	; 0x800727 <pxOverflowDelayedTaskList+0x1>
 66e:	6e 5f       	subi	r22, 0xFE	; 254
 670:	7f 4f       	sbci	r23, 0xFF	; 255
 672:	88 dd       	rcall	.-1264   	; 0x184 <vListInsert>
 674:	16 c0       	rjmp	.+44     	; 0x6a2 <prvAddCurrentTaskToDelayedList+0x64>
 676:	60 91 60 07 	lds	r22, 0x0760	; 0x800760 <pxCurrentTCB>
 67a:	70 91 61 07 	lds	r23, 0x0761	; 0x800761 <pxCurrentTCB+0x1>
 67e:	80 91 28 07 	lds	r24, 0x0728	; 0x800728 <pxDelayedTaskList>
 682:	90 91 29 07 	lds	r25, 0x0729	; 0x800729 <pxDelayedTaskList+0x1>
 686:	6e 5f       	subi	r22, 0xFE	; 254
 688:	7f 4f       	sbci	r23, 0xFF	; 255
 68a:	7c dd       	rcall	.-1288   	; 0x184 <vListInsert>
 68c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 690:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 694:	c8 17       	cp	r28, r24
 696:	d9 07       	cpc	r29, r25
 698:	20 f4       	brcc	.+8      	; 0x6a2 <prvAddCurrentTaskToDelayedList+0x64>
 69a:	d0 93 01 01 	sts	0x0101, r29	; 0x800101 <__data_start+0x1>
 69e:	c0 93 00 01 	sts	0x0100, r28	; 0x800100 <__data_start>
 6a2:	df 91       	pop	r29
 6a4:	cf 91       	pop	r28
 6a6:	08 95       	ret

000006a8 <xTaskGenericCreate>:
 6a8:	4f 92       	push	r4
 6aa:	5f 92       	push	r5
 6ac:	6f 92       	push	r6
 6ae:	7f 92       	push	r7
 6b0:	8f 92       	push	r8
 6b2:	9f 92       	push	r9
 6b4:	af 92       	push	r10
 6b6:	bf 92       	push	r11
 6b8:	cf 92       	push	r12
 6ba:	df 92       	push	r13
 6bc:	ef 92       	push	r14
 6be:	ff 92       	push	r15
 6c0:	0f 93       	push	r16
 6c2:	1f 93       	push	r17
 6c4:	cf 93       	push	r28
 6c6:	df 93       	push	r29
 6c8:	5c 01       	movw	r10, r24
 6ca:	4b 01       	movw	r8, r22
 6cc:	3a 01       	movw	r6, r20
 6ce:	29 01       	movw	r4, r18
 6d0:	81 e2       	ldi	r24, 0x21	; 33
 6d2:	90 e0       	ldi	r25, 0x00	; 0
 6d4:	f9 dc       	rcall	.-1550   	; 0xc8 <pvPortMalloc>
 6d6:	ec 01       	movw	r28, r24
 6d8:	89 2b       	or	r24, r25
 6da:	09 f4       	brne	.+2      	; 0x6de <xTaskGenericCreate+0x36>
 6dc:	c6 c0       	rjmp	.+396    	; 0x86a <xTaskGenericCreate+0x1c2>
 6de:	c1 14       	cp	r12, r1
 6e0:	d1 04       	cpc	r13, r1
 6e2:	09 f0       	breq	.+2      	; 0x6e6 <xTaskGenericCreate+0x3e>
 6e4:	be c0       	rjmp	.+380    	; 0x862 <xTaskGenericCreate+0x1ba>
 6e6:	c3 01       	movw	r24, r6
 6e8:	ef dc       	rcall	.-1570   	; 0xc8 <pvPortMalloc>
 6ea:	98 8f       	std	Y+24, r25	; 0x18
 6ec:	8f 8b       	std	Y+23, r24	; 0x17
 6ee:	00 97       	sbiw	r24, 0x00	; 0
 6f0:	19 f4       	brne	.+6      	; 0x6f8 <xTaskGenericCreate+0x50>
 6f2:	ce 01       	movw	r24, r28
 6f4:	0d dd       	rcall	.-1510   	; 0x110 <vPortFree>
 6f6:	b9 c0       	rjmp	.+370    	; 0x86a <xTaskGenericCreate+0x1c2>
 6f8:	a3 01       	movw	r20, r6
 6fa:	65 ea       	ldi	r22, 0xA5	; 165
 6fc:	70 e0       	ldi	r23, 0x00	; 0
 6fe:	f5 d2       	rcall	.+1514   	; 0xcea <memset>
 700:	93 01       	movw	r18, r6
 702:	21 50       	subi	r18, 0x01	; 1
 704:	31 09       	sbc	r19, r1
 706:	8f 89       	ldd	r24, Y+23	; 0x17
 708:	98 8d       	ldd	r25, Y+24	; 0x18
 70a:	3c 01       	movw	r6, r24
 70c:	62 0e       	add	r6, r18
 70e:	73 1e       	adc	r7, r19
 710:	48 e0       	ldi	r20, 0x08	; 8
 712:	50 e0       	ldi	r21, 0x00	; 0
 714:	b4 01       	movw	r22, r8
 716:	ce 01       	movw	r24, r28
 718:	49 96       	adiw	r24, 0x19	; 25
 71a:	ee d2       	rcall	.+1500   	; 0xcf8 <strncpy>
 71c:	18 a2       	std	Y+32, r1	; 0x20
 71e:	10 2f       	mov	r17, r16
 720:	04 30       	cpi	r16, 0x04	; 4
 722:	08 f0       	brcs	.+2      	; 0x726 <xTaskGenericCreate+0x7e>
 724:	13 e0       	ldi	r17, 0x03	; 3
 726:	1e 8b       	std	Y+22, r17	; 0x16
 728:	6e 01       	movw	r12, r28
 72a:	82 e0       	ldi	r24, 0x02	; 2
 72c:	c8 0e       	add	r12, r24
 72e:	d1 1c       	adc	r13, r1
 730:	c6 01       	movw	r24, r12
 732:	fd dc       	rcall	.-1542   	; 0x12e <vListInitialiseItem>
 734:	ce 01       	movw	r24, r28
 736:	0c 96       	adiw	r24, 0x0c	; 12
 738:	fa dc       	rcall	.-1548   	; 0x12e <vListInitialiseItem>
 73a:	d9 87       	std	Y+9, r29	; 0x09
 73c:	c8 87       	std	Y+8, r28	; 0x08
 73e:	84 e0       	ldi	r24, 0x04	; 4
 740:	90 e0       	ldi	r25, 0x00	; 0
 742:	81 1b       	sub	r24, r17
 744:	91 09       	sbc	r25, r1
 746:	9d 87       	std	Y+13, r25	; 0x0d
 748:	8c 87       	std	Y+12, r24	; 0x0c
 74a:	db 8b       	std	Y+19, r29	; 0x13
 74c:	ca 8b       	std	Y+18, r28	; 0x12
 74e:	a2 01       	movw	r20, r4
 750:	b5 01       	movw	r22, r10
 752:	c3 01       	movw	r24, r6
 754:	1b de       	rcall	.-970    	; 0x38c <pxPortInitialiseStack>
 756:	99 83       	std	Y+1, r25	; 0x01
 758:	88 83       	st	Y, r24
 75a:	e1 14       	cp	r14, r1
 75c:	f1 04       	cpc	r15, r1
 75e:	19 f0       	breq	.+6      	; 0x766 <xTaskGenericCreate+0xbe>
 760:	f7 01       	movw	r30, r14
 762:	d1 83       	std	Z+1, r29	; 0x01
 764:	c0 83       	st	Z, r28
 766:	0f b6       	in	r0, 0x3f	; 63
 768:	f8 94       	cli
 76a:	0f 92       	push	r0
 76c:	80 91 12 07 	lds	r24, 0x0712	; 0x800712 <uxCurrentNumberOfTasks>
 770:	8f 5f       	subi	r24, 0xFF	; 255
 772:	80 93 12 07 	sts	0x0712, r24	; 0x800712 <uxCurrentNumberOfTasks>
 776:	80 91 60 07 	lds	r24, 0x0760	; 0x800760 <pxCurrentTCB>
 77a:	90 91 61 07 	lds	r25, 0x0761	; 0x800761 <pxCurrentTCB+0x1>
 77e:	89 2b       	or	r24, r25
 780:	69 f5       	brne	.+90     	; 0x7dc <xTaskGenericCreate+0x134>
 782:	d0 93 61 07 	sts	0x0761, r29	; 0x800761 <pxCurrentTCB+0x1>
 786:	c0 93 60 07 	sts	0x0760, r28	; 0x800760 <pxCurrentTCB>
 78a:	80 91 12 07 	lds	r24, 0x0712	; 0x800712 <uxCurrentNumberOfTasks>
 78e:	81 30       	cpi	r24, 0x01	; 1
 790:	a1 f5       	brne	.+104    	; 0x7fa <xTaskGenericCreate+0x152>
 792:	8c e3       	ldi	r24, 0x3C	; 60
 794:	97 e0       	ldi	r25, 0x07	; 7
 796:	bd dc       	rcall	.-1670   	; 0x112 <vListInitialise>
 798:	85 e4       	ldi	r24, 0x45	; 69
 79a:	97 e0       	ldi	r25, 0x07	; 7
 79c:	ba dc       	rcall	.-1676   	; 0x112 <vListInitialise>
 79e:	8e e4       	ldi	r24, 0x4E	; 78
 7a0:	97 e0       	ldi	r25, 0x07	; 7
 7a2:	b7 dc       	rcall	.-1682   	; 0x112 <vListInitialise>
 7a4:	87 e5       	ldi	r24, 0x57	; 87
 7a6:	97 e0       	ldi	r25, 0x07	; 7
 7a8:	b4 dc       	rcall	.-1688   	; 0x112 <vListInitialise>
 7aa:	83 e3       	ldi	r24, 0x33	; 51
 7ac:	97 e0       	ldi	r25, 0x07	; 7
 7ae:	b1 dc       	rcall	.-1694   	; 0x112 <vListInitialise>
 7b0:	8a e2       	ldi	r24, 0x2A	; 42
 7b2:	97 e0       	ldi	r25, 0x07	; 7
 7b4:	ae dc       	rcall	.-1700   	; 0x112 <vListInitialise>
 7b6:	8d e1       	ldi	r24, 0x1D	; 29
 7b8:	97 e0       	ldi	r25, 0x07	; 7
 7ba:	ab dc       	rcall	.-1706   	; 0x112 <vListInitialise>
 7bc:	84 e1       	ldi	r24, 0x14	; 20
 7be:	97 e0       	ldi	r25, 0x07	; 7
 7c0:	a8 dc       	rcall	.-1712   	; 0x112 <vListInitialise>
 7c2:	83 e3       	ldi	r24, 0x33	; 51
 7c4:	97 e0       	ldi	r25, 0x07	; 7
 7c6:	90 93 29 07 	sts	0x0729, r25	; 0x800729 <pxDelayedTaskList+0x1>
 7ca:	80 93 28 07 	sts	0x0728, r24	; 0x800728 <pxDelayedTaskList>
 7ce:	8a e2       	ldi	r24, 0x2A	; 42
 7d0:	97 e0       	ldi	r25, 0x07	; 7
 7d2:	90 93 27 07 	sts	0x0727, r25	; 0x800727 <pxOverflowDelayedTaskList+0x1>
 7d6:	80 93 26 07 	sts	0x0726, r24	; 0x800726 <pxOverflowDelayedTaskList>
 7da:	0f c0       	rjmp	.+30     	; 0x7fa <xTaskGenericCreate+0x152>
 7dc:	80 91 0d 07 	lds	r24, 0x070D	; 0x80070d <xSchedulerRunning>
 7e0:	81 11       	cpse	r24, r1
 7e2:	0b c0       	rjmp	.+22     	; 0x7fa <xTaskGenericCreate+0x152>
 7e4:	e0 91 60 07 	lds	r30, 0x0760	; 0x800760 <pxCurrentTCB>
 7e8:	f0 91 61 07 	lds	r31, 0x0761	; 0x800761 <pxCurrentTCB+0x1>
 7ec:	86 89       	ldd	r24, Z+22	; 0x16
 7ee:	08 17       	cp	r16, r24
 7f0:	20 f0       	brcs	.+8      	; 0x7fa <xTaskGenericCreate+0x152>
 7f2:	d0 93 61 07 	sts	0x0761, r29	; 0x800761 <pxCurrentTCB+0x1>
 7f6:	c0 93 60 07 	sts	0x0760, r28	; 0x800760 <pxCurrentTCB>
 7fa:	8e 89       	ldd	r24, Y+22	; 0x16
 7fc:	90 91 0f 07 	lds	r25, 0x070F	; 0x80070f <uxTopUsedPriority>
 800:	98 17       	cp	r25, r24
 802:	10 f4       	brcc	.+4      	; 0x808 <xTaskGenericCreate+0x160>
 804:	80 93 0f 07 	sts	0x070F, r24	; 0x80070f <uxTopUsedPriority>
 808:	90 91 08 07 	lds	r25, 0x0708	; 0x800708 <uxTaskNumber>
 80c:	9f 5f       	subi	r25, 0xFF	; 255
 80e:	90 93 08 07 	sts	0x0708, r25	; 0x800708 <uxTaskNumber>
 812:	90 91 0e 07 	lds	r25, 0x070E	; 0x80070e <uxTopReadyPriority>
 816:	98 17       	cp	r25, r24
 818:	10 f4       	brcc	.+4      	; 0x81e <xTaskGenericCreate+0x176>
 81a:	80 93 0e 07 	sts	0x070E, r24	; 0x80070e <uxTopReadyPriority>
 81e:	90 e0       	ldi	r25, 0x00	; 0
 820:	9c 01       	movw	r18, r24
 822:	22 0f       	add	r18, r18
 824:	33 1f       	adc	r19, r19
 826:	22 0f       	add	r18, r18
 828:	33 1f       	adc	r19, r19
 82a:	22 0f       	add	r18, r18
 82c:	33 1f       	adc	r19, r19
 82e:	82 0f       	add	r24, r18
 830:	93 1f       	adc	r25, r19
 832:	b6 01       	movw	r22, r12
 834:	84 5c       	subi	r24, 0xC4	; 196
 836:	98 4f       	sbci	r25, 0xF8	; 248
 838:	7e dc       	rcall	.-1796   	; 0x136 <vListInsertEnd>
 83a:	0f 90       	pop	r0
 83c:	0f be       	out	0x3f, r0	; 63
 83e:	80 91 0d 07 	lds	r24, 0x070D	; 0x80070d <xSchedulerRunning>
 842:	88 23       	and	r24, r24
 844:	51 f0       	breq	.+20     	; 0x85a <xTaskGenericCreate+0x1b2>
 846:	e0 91 60 07 	lds	r30, 0x0760	; 0x800760 <pxCurrentTCB>
 84a:	f0 91 61 07 	lds	r31, 0x0761	; 0x800761 <pxCurrentTCB+0x1>
 84e:	86 89       	ldd	r24, Z+22	; 0x16
 850:	80 17       	cp	r24, r16
 852:	28 f4       	brcc	.+10     	; 0x85e <xTaskGenericCreate+0x1b6>
 854:	41 de       	rcall	.-894    	; 0x4d8 <vPortYield>
 856:	81 e0       	ldi	r24, 0x01	; 1
 858:	09 c0       	rjmp	.+18     	; 0x86c <xTaskGenericCreate+0x1c4>
 85a:	81 e0       	ldi	r24, 0x01	; 1
 85c:	07 c0       	rjmp	.+14     	; 0x86c <xTaskGenericCreate+0x1c4>
 85e:	81 e0       	ldi	r24, 0x01	; 1
 860:	05 c0       	rjmp	.+10     	; 0x86c <xTaskGenericCreate+0x1c4>
 862:	d8 8e       	std	Y+24, r13	; 0x18
 864:	cf 8a       	std	Y+23, r12	; 0x17
 866:	c6 01       	movw	r24, r12
 868:	47 cf       	rjmp	.-370    	; 0x6f8 <xTaskGenericCreate+0x50>
 86a:	8f ef       	ldi	r24, 0xFF	; 255
 86c:	df 91       	pop	r29
 86e:	cf 91       	pop	r28
 870:	1f 91       	pop	r17
 872:	0f 91       	pop	r16
 874:	ff 90       	pop	r15
 876:	ef 90       	pop	r14
 878:	df 90       	pop	r13
 87a:	cf 90       	pop	r12
 87c:	bf 90       	pop	r11
 87e:	af 90       	pop	r10
 880:	9f 90       	pop	r9
 882:	8f 90       	pop	r8
 884:	7f 90       	pop	r7
 886:	6f 90       	pop	r6
 888:	5f 90       	pop	r5
 88a:	4f 90       	pop	r4
 88c:	08 95       	ret

0000088e <vTaskStartScheduler>:
 88e:	af 92       	push	r10
 890:	bf 92       	push	r11
 892:	cf 92       	push	r12
 894:	df 92       	push	r13
 896:	ef 92       	push	r14
 898:	ff 92       	push	r15
 89a:	0f 93       	push	r16
 89c:	a1 2c       	mov	r10, r1
 89e:	b1 2c       	mov	r11, r1
 8a0:	c1 2c       	mov	r12, r1
 8a2:	d1 2c       	mov	r13, r1
 8a4:	e1 2c       	mov	r14, r1
 8a6:	f1 2c       	mov	r15, r1
 8a8:	00 e0       	ldi	r16, 0x00	; 0
 8aa:	20 e0       	ldi	r18, 0x00	; 0
 8ac:	30 e0       	ldi	r19, 0x00	; 0
 8ae:	45 e5       	ldi	r20, 0x55	; 85
 8b0:	50 e0       	ldi	r21, 0x00	; 0
 8b2:	65 e2       	ldi	r22, 0x25	; 37
 8b4:	71 e0       	ldi	r23, 0x01	; 1
 8b6:	83 ed       	ldi	r24, 0xD3	; 211
 8b8:	95 e0       	ldi	r25, 0x05	; 5
 8ba:	f6 de       	rcall	.-532    	; 0x6a8 <xTaskGenericCreate>
 8bc:	81 30       	cpi	r24, 0x01	; 1
 8be:	41 f4       	brne	.+16     	; 0x8d0 <vTaskStartScheduler+0x42>
 8c0:	f8 94       	cli
 8c2:	80 93 0d 07 	sts	0x070D, r24	; 0x80070d <xSchedulerRunning>
 8c6:	10 92 11 07 	sts	0x0711, r1	; 0x800711 <xTickCount+0x1>
 8ca:	10 92 10 07 	sts	0x0710, r1	; 0x800710 <xTickCount>
 8ce:	ca dd       	rcall	.-1132   	; 0x464 <xPortStartScheduler>
 8d0:	0f 91       	pop	r16
 8d2:	ff 90       	pop	r15
 8d4:	ef 90       	pop	r14
 8d6:	df 90       	pop	r13
 8d8:	cf 90       	pop	r12
 8da:	bf 90       	pop	r11
 8dc:	af 90       	pop	r10
 8de:	08 95       	ret

000008e0 <vTaskSuspendAll>:
 8e0:	80 91 0c 07 	lds	r24, 0x070C	; 0x80070c <uxSchedulerSuspended>
 8e4:	8f 5f       	subi	r24, 0xFF	; 255
 8e6:	80 93 0c 07 	sts	0x070C, r24	; 0x80070c <uxSchedulerSuspended>
 8ea:	08 95       	ret

000008ec <vTaskIncrementTick>:
 8ec:	0f 93       	push	r16
 8ee:	1f 93       	push	r17
 8f0:	cf 93       	push	r28
 8f2:	df 93       	push	r29
 8f4:	80 91 0c 07 	lds	r24, 0x070C	; 0x80070c <uxSchedulerSuspended>
 8f8:	81 11       	cpse	r24, r1
 8fa:	af c0       	rjmp	.+350    	; 0xa5a <vTaskIncrementTick+0x16e>
 8fc:	80 91 10 07 	lds	r24, 0x0710	; 0x800710 <xTickCount>
 900:	90 91 11 07 	lds	r25, 0x0711	; 0x800711 <xTickCount+0x1>
 904:	01 96       	adiw	r24, 0x01	; 1
 906:	90 93 11 07 	sts	0x0711, r25	; 0x800711 <xTickCount+0x1>
 90a:	80 93 10 07 	sts	0x0710, r24	; 0x800710 <xTickCount>
 90e:	80 91 10 07 	lds	r24, 0x0710	; 0x800710 <xTickCount>
 912:	90 91 11 07 	lds	r25, 0x0711	; 0x800711 <xTickCount+0x1>
 916:	89 2b       	or	r24, r25
 918:	99 f5       	brne	.+102    	; 0x980 <vTaskIncrementTick+0x94>
 91a:	80 91 28 07 	lds	r24, 0x0728	; 0x800728 <pxDelayedTaskList>
 91e:	90 91 29 07 	lds	r25, 0x0729	; 0x800729 <pxDelayedTaskList+0x1>
 922:	20 91 26 07 	lds	r18, 0x0726	; 0x800726 <pxOverflowDelayedTaskList>
 926:	30 91 27 07 	lds	r19, 0x0727	; 0x800727 <pxOverflowDelayedTaskList+0x1>
 92a:	30 93 29 07 	sts	0x0729, r19	; 0x800729 <pxDelayedTaskList+0x1>
 92e:	20 93 28 07 	sts	0x0728, r18	; 0x800728 <pxDelayedTaskList>
 932:	90 93 27 07 	sts	0x0727, r25	; 0x800727 <pxOverflowDelayedTaskList+0x1>
 936:	80 93 26 07 	sts	0x0726, r24	; 0x800726 <pxOverflowDelayedTaskList>
 93a:	80 91 09 07 	lds	r24, 0x0709	; 0x800709 <xNumOfOverflows>
 93e:	8f 5f       	subi	r24, 0xFF	; 255
 940:	80 93 09 07 	sts	0x0709, r24	; 0x800709 <xNumOfOverflows>
 944:	e0 91 28 07 	lds	r30, 0x0728	; 0x800728 <pxDelayedTaskList>
 948:	f0 91 29 07 	lds	r31, 0x0729	; 0x800729 <pxDelayedTaskList+0x1>
 94c:	80 81       	ld	r24, Z
 94e:	81 11       	cpse	r24, r1
 950:	07 c0       	rjmp	.+14     	; 0x960 <vTaskIncrementTick+0x74>
 952:	8f ef       	ldi	r24, 0xFF	; 255
 954:	9f ef       	ldi	r25, 0xFF	; 255
 956:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 95a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 95e:	10 c0       	rjmp	.+32     	; 0x980 <vTaskIncrementTick+0x94>
 960:	e0 91 28 07 	lds	r30, 0x0728	; 0x800728 <pxDelayedTaskList>
 964:	f0 91 29 07 	lds	r31, 0x0729	; 0x800729 <pxDelayedTaskList+0x1>
 968:	05 80       	ldd	r0, Z+5	; 0x05
 96a:	f6 81       	ldd	r31, Z+6	; 0x06
 96c:	e0 2d       	mov	r30, r0
 96e:	06 80       	ldd	r0, Z+6	; 0x06
 970:	f7 81       	ldd	r31, Z+7	; 0x07
 972:	e0 2d       	mov	r30, r0
 974:	82 81       	ldd	r24, Z+2	; 0x02
 976:	93 81       	ldd	r25, Z+3	; 0x03
 978:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 97c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 980:	20 91 10 07 	lds	r18, 0x0710	; 0x800710 <xTickCount>
 984:	30 91 11 07 	lds	r19, 0x0711	; 0x800711 <xTickCount+0x1>
 988:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 98c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 990:	28 17       	cp	r18, r24
 992:	39 07       	cpc	r19, r25
 994:	08 f4       	brcc	.+2      	; 0x998 <vTaskIncrementTick+0xac>
 996:	66 c0       	rjmp	.+204    	; 0xa64 <vTaskIncrementTick+0x178>
 998:	e0 91 28 07 	lds	r30, 0x0728	; 0x800728 <pxDelayedTaskList>
 99c:	f0 91 29 07 	lds	r31, 0x0729	; 0x800729 <pxDelayedTaskList+0x1>
 9a0:	80 81       	ld	r24, Z
 9a2:	88 23       	and	r24, r24
 9a4:	99 f0       	breq	.+38     	; 0x9cc <vTaskIncrementTick+0xe0>
 9a6:	e0 91 28 07 	lds	r30, 0x0728	; 0x800728 <pxDelayedTaskList>
 9aa:	f0 91 29 07 	lds	r31, 0x0729	; 0x800729 <pxDelayedTaskList+0x1>
 9ae:	05 80       	ldd	r0, Z+5	; 0x05
 9b0:	f6 81       	ldd	r31, Z+6	; 0x06
 9b2:	e0 2d       	mov	r30, r0
 9b4:	c6 81       	ldd	r28, Z+6	; 0x06
 9b6:	d7 81       	ldd	r29, Z+7	; 0x07
 9b8:	8a 81       	ldd	r24, Y+2	; 0x02
 9ba:	9b 81       	ldd	r25, Y+3	; 0x03
 9bc:	20 91 10 07 	lds	r18, 0x0710	; 0x800710 <xTickCount>
 9c0:	30 91 11 07 	lds	r19, 0x0711	; 0x800711 <xTickCount+0x1>
 9c4:	28 17       	cp	r18, r24
 9c6:	39 07       	cpc	r19, r25
 9c8:	f8 f4       	brcc	.+62     	; 0xa08 <vTaskIncrementTick+0x11c>
 9ca:	19 c0       	rjmp	.+50     	; 0x9fe <vTaskIncrementTick+0x112>
 9cc:	8f ef       	ldi	r24, 0xFF	; 255
 9ce:	9f ef       	ldi	r25, 0xFF	; 255
 9d0:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 9d4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 9d8:	45 c0       	rjmp	.+138    	; 0xa64 <vTaskIncrementTick+0x178>
 9da:	e0 91 28 07 	lds	r30, 0x0728	; 0x800728 <pxDelayedTaskList>
 9de:	f0 91 29 07 	lds	r31, 0x0729	; 0x800729 <pxDelayedTaskList+0x1>
 9e2:	05 80       	ldd	r0, Z+5	; 0x05
 9e4:	f6 81       	ldd	r31, Z+6	; 0x06
 9e6:	e0 2d       	mov	r30, r0
 9e8:	c6 81       	ldd	r28, Z+6	; 0x06
 9ea:	d7 81       	ldd	r29, Z+7	; 0x07
 9ec:	8a 81       	ldd	r24, Y+2	; 0x02
 9ee:	9b 81       	ldd	r25, Y+3	; 0x03
 9f0:	20 91 10 07 	lds	r18, 0x0710	; 0x800710 <xTickCount>
 9f4:	30 91 11 07 	lds	r19, 0x0711	; 0x800711 <xTickCount+0x1>
 9f8:	28 17       	cp	r18, r24
 9fa:	39 07       	cpc	r19, r25
 9fc:	28 f4       	brcc	.+10     	; 0xa08 <vTaskIncrementTick+0x11c>
 9fe:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 a02:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 a06:	2e c0       	rjmp	.+92     	; 0xa64 <vTaskIncrementTick+0x178>
 a08:	8e 01       	movw	r16, r28
 a0a:	0e 5f       	subi	r16, 0xFE	; 254
 a0c:	1f 4f       	sbci	r17, 0xFF	; 255
 a0e:	c8 01       	movw	r24, r16
 a10:	f4 db       	rcall	.-2072   	; 0x1fa <vListRemove>
 a12:	8c 89       	ldd	r24, Y+20	; 0x14
 a14:	9d 89       	ldd	r25, Y+21	; 0x15
 a16:	89 2b       	or	r24, r25
 a18:	19 f0       	breq	.+6      	; 0xa20 <vTaskIncrementTick+0x134>
 a1a:	ce 01       	movw	r24, r28
 a1c:	0c 96       	adiw	r24, 0x0c	; 12
 a1e:	ed db       	rcall	.-2086   	; 0x1fa <vListRemove>
 a20:	8e 89       	ldd	r24, Y+22	; 0x16
 a22:	90 91 0e 07 	lds	r25, 0x070E	; 0x80070e <uxTopReadyPriority>
 a26:	98 17       	cp	r25, r24
 a28:	10 f4       	brcc	.+4      	; 0xa2e <vTaskIncrementTick+0x142>
 a2a:	80 93 0e 07 	sts	0x070E, r24	; 0x80070e <uxTopReadyPriority>
 a2e:	90 e0       	ldi	r25, 0x00	; 0
 a30:	9c 01       	movw	r18, r24
 a32:	22 0f       	add	r18, r18
 a34:	33 1f       	adc	r19, r19
 a36:	22 0f       	add	r18, r18
 a38:	33 1f       	adc	r19, r19
 a3a:	22 0f       	add	r18, r18
 a3c:	33 1f       	adc	r19, r19
 a3e:	82 0f       	add	r24, r18
 a40:	93 1f       	adc	r25, r19
 a42:	b8 01       	movw	r22, r16
 a44:	84 5c       	subi	r24, 0xC4	; 196
 a46:	98 4f       	sbci	r25, 0xF8	; 248
 a48:	76 db       	rcall	.-2324   	; 0x136 <vListInsertEnd>
 a4a:	e0 91 28 07 	lds	r30, 0x0728	; 0x800728 <pxDelayedTaskList>
 a4e:	f0 91 29 07 	lds	r31, 0x0729	; 0x800729 <pxDelayedTaskList+0x1>
 a52:	80 81       	ld	r24, Z
 a54:	81 11       	cpse	r24, r1
 a56:	c1 cf       	rjmp	.-126    	; 0x9da <vTaskIncrementTick+0xee>
 a58:	b9 cf       	rjmp	.-142    	; 0x9cc <vTaskIncrementTick+0xe0>
 a5a:	80 91 0b 07 	lds	r24, 0x070B	; 0x80070b <uxMissedTicks>
 a5e:	8f 5f       	subi	r24, 0xFF	; 255
 a60:	80 93 0b 07 	sts	0x070B, r24	; 0x80070b <uxMissedTicks>
 a64:	df 91       	pop	r29
 a66:	cf 91       	pop	r28
 a68:	1f 91       	pop	r17
 a6a:	0f 91       	pop	r16
 a6c:	08 95       	ret

00000a6e <xTaskResumeAll>:
 a6e:	cf 92       	push	r12
 a70:	df 92       	push	r13
 a72:	ef 92       	push	r14
 a74:	ff 92       	push	r15
 a76:	0f 93       	push	r16
 a78:	1f 93       	push	r17
 a7a:	cf 93       	push	r28
 a7c:	df 93       	push	r29
 a7e:	0f b6       	in	r0, 0x3f	; 63
 a80:	f8 94       	cli
 a82:	0f 92       	push	r0
 a84:	80 91 0c 07 	lds	r24, 0x070C	; 0x80070c <uxSchedulerSuspended>
 a88:	81 50       	subi	r24, 0x01	; 1
 a8a:	80 93 0c 07 	sts	0x070C, r24	; 0x80070c <uxSchedulerSuspended>
 a8e:	80 91 0c 07 	lds	r24, 0x070C	; 0x80070c <uxSchedulerSuspended>
 a92:	81 11       	cpse	r24, r1
 a94:	5f c0       	rjmp	.+190    	; 0xb54 <xTaskResumeAll+0xe6>
 a96:	80 91 12 07 	lds	r24, 0x0712	; 0x800712 <uxCurrentNumberOfTasks>
 a9a:	81 11       	cpse	r24, r1
 a9c:	2f c0       	rjmp	.+94     	; 0xafc <xTaskResumeAll+0x8e>
 a9e:	5d c0       	rjmp	.+186    	; 0xb5a <xTaskResumeAll+0xec>
 aa0:	d7 01       	movw	r26, r14
 aa2:	15 96       	adiw	r26, 0x05	; 5
 aa4:	ed 91       	ld	r30, X+
 aa6:	fc 91       	ld	r31, X
 aa8:	16 97       	sbiw	r26, 0x06	; 6
 aaa:	c6 81       	ldd	r28, Z+6	; 0x06
 aac:	d7 81       	ldd	r29, Z+7	; 0x07
 aae:	ce 01       	movw	r24, r28
 ab0:	0c 96       	adiw	r24, 0x0c	; 12
 ab2:	a3 db       	rcall	.-2234   	; 0x1fa <vListRemove>
 ab4:	8e 01       	movw	r16, r28
 ab6:	0e 5f       	subi	r16, 0xFE	; 254
 ab8:	1f 4f       	sbci	r17, 0xFF	; 255
 aba:	c8 01       	movw	r24, r16
 abc:	9e db       	rcall	.-2244   	; 0x1fa <vListRemove>
 abe:	8e 89       	ldd	r24, Y+22	; 0x16
 ac0:	90 91 0e 07 	lds	r25, 0x070E	; 0x80070e <uxTopReadyPriority>
 ac4:	98 17       	cp	r25, r24
 ac6:	10 f4       	brcc	.+4      	; 0xacc <xTaskResumeAll+0x5e>
 ac8:	80 93 0e 07 	sts	0x070E, r24	; 0x80070e <uxTopReadyPriority>
 acc:	90 e0       	ldi	r25, 0x00	; 0
 ace:	9c 01       	movw	r18, r24
 ad0:	22 0f       	add	r18, r18
 ad2:	33 1f       	adc	r19, r19
 ad4:	22 0f       	add	r18, r18
 ad6:	33 1f       	adc	r19, r19
 ad8:	22 0f       	add	r18, r18
 ada:	33 1f       	adc	r19, r19
 adc:	82 0f       	add	r24, r18
 ade:	93 1f       	adc	r25, r19
 ae0:	b8 01       	movw	r22, r16
 ae2:	84 5c       	subi	r24, 0xC4	; 196
 ae4:	98 4f       	sbci	r25, 0xF8	; 248
 ae6:	27 db       	rcall	.-2482   	; 0x136 <vListInsertEnd>
 ae8:	e0 91 60 07 	lds	r30, 0x0760	; 0x800760 <pxCurrentTCB>
 aec:	f0 91 61 07 	lds	r31, 0x0761	; 0x800761 <pxCurrentTCB+0x1>
 af0:	9e 89       	ldd	r25, Y+22	; 0x16
 af2:	86 89       	ldd	r24, Z+22	; 0x16
 af4:	98 17       	cp	r25, r24
 af6:	58 f0       	brcs	.+22     	; 0xb0e <xTaskResumeAll+0xa0>
 af8:	dc 2c       	mov	r13, r12
 afa:	09 c0       	rjmp	.+18     	; 0xb0e <xTaskResumeAll+0xa0>
 afc:	d1 2c       	mov	r13, r1
 afe:	0f 2e       	mov	r0, r31
 b00:	fd e1       	ldi	r31, 0x1D	; 29
 b02:	ef 2e       	mov	r14, r31
 b04:	f7 e0       	ldi	r31, 0x07	; 7
 b06:	ff 2e       	mov	r15, r31
 b08:	f0 2d       	mov	r31, r0
 b0a:	cc 24       	eor	r12, r12
 b0c:	c3 94       	inc	r12
 b0e:	f7 01       	movw	r30, r14
 b10:	80 81       	ld	r24, Z
 b12:	81 11       	cpse	r24, r1
 b14:	c5 cf       	rjmp	.-118    	; 0xaa0 <xTaskResumeAll+0x32>
 b16:	80 91 0b 07 	lds	r24, 0x070B	; 0x80070b <uxMissedTicks>
 b1a:	88 23       	and	r24, r24
 b1c:	79 f0       	breq	.+30     	; 0xb3c <xTaskResumeAll+0xce>
 b1e:	80 91 0b 07 	lds	r24, 0x070B	; 0x80070b <uxMissedTicks>
 b22:	88 23       	and	r24, r24
 b24:	91 f0       	breq	.+36     	; 0xb4a <xTaskResumeAll+0xdc>
 b26:	e2 de       	rcall	.-572    	; 0x8ec <vTaskIncrementTick>
 b28:	80 91 0b 07 	lds	r24, 0x070B	; 0x80070b <uxMissedTicks>
 b2c:	81 50       	subi	r24, 0x01	; 1
 b2e:	80 93 0b 07 	sts	0x070B, r24	; 0x80070b <uxMissedTicks>
 b32:	80 91 0b 07 	lds	r24, 0x070B	; 0x80070b <uxMissedTicks>
 b36:	81 11       	cpse	r24, r1
 b38:	f6 cf       	rjmp	.-20     	; 0xb26 <xTaskResumeAll+0xb8>
 b3a:	07 c0       	rjmp	.+14     	; 0xb4a <xTaskResumeAll+0xdc>
 b3c:	f1 e0       	ldi	r31, 0x01	; 1
 b3e:	df 16       	cp	r13, r31
 b40:	21 f0       	breq	.+8      	; 0xb4a <xTaskResumeAll+0xdc>
 b42:	80 91 0a 07 	lds	r24, 0x070A	; 0x80070a <xMissedYield>
 b46:	81 30       	cpi	r24, 0x01	; 1
 b48:	39 f4       	brne	.+14     	; 0xb58 <xTaskResumeAll+0xea>
 b4a:	10 92 0a 07 	sts	0x070A, r1	; 0x80070a <xMissedYield>
 b4e:	c4 dc       	rcall	.-1656   	; 0x4d8 <vPortYield>
 b50:	81 e0       	ldi	r24, 0x01	; 1
 b52:	03 c0       	rjmp	.+6      	; 0xb5a <xTaskResumeAll+0xec>
 b54:	80 e0       	ldi	r24, 0x00	; 0
 b56:	01 c0       	rjmp	.+2      	; 0xb5a <xTaskResumeAll+0xec>
 b58:	80 e0       	ldi	r24, 0x00	; 0
 b5a:	0f 90       	pop	r0
 b5c:	0f be       	out	0x3f, r0	; 63
 b5e:	df 91       	pop	r29
 b60:	cf 91       	pop	r28
 b62:	1f 91       	pop	r17
 b64:	0f 91       	pop	r16
 b66:	ff 90       	pop	r15
 b68:	ef 90       	pop	r14
 b6a:	df 90       	pop	r13
 b6c:	cf 90       	pop	r12
 b6e:	08 95       	ret

00000b70 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
 b70:	cf 93       	push	r28
 b72:	df 93       	push	r29
 b74:	ec 01       	movw	r28, r24
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
 b76:	89 2b       	or	r24, r25
		{
			vTaskSuspendAll();
 b78:	91 f0       	breq	.+36     	; 0xb9e <vTaskDelay+0x2e>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
 b7a:	b2 de       	rcall	.-668    	; 0x8e0 <vTaskSuspendAll>
 b7c:	80 91 10 07 	lds	r24, 0x0710	; 0x800710 <xTickCount>
 b80:	90 91 11 07 	lds	r25, 0x0711	; 0x800711 <xTickCount+0x1>
 b84:	c8 0f       	add	r28, r24

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 b86:	d9 1f       	adc	r29, r25
 b88:	80 91 60 07 	lds	r24, 0x0760	; 0x800760 <pxCurrentTCB>
 b8c:	90 91 61 07 	lds	r25, 0x0761	; 0x800761 <pxCurrentTCB+0x1>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
			}
			xAlreadyYielded = xTaskResumeAll();
 b90:	02 96       	adiw	r24, 0x02	; 2
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 b92:	33 db       	rcall	.-2458   	; 0x1fa <vListRemove>
 b94:	ce 01       	movw	r24, r28
		{
			portYIELD_WITHIN_API();
 b96:	53 dd       	rcall	.-1370   	; 0x63e <prvAddCurrentTaskToDelayedList>
 b98:	6a df       	rcall	.-300    	; 0xa6e <xTaskResumeAll>
		}
	}
 b9a:	81 11       	cpse	r24, r1
 b9c:	01 c0       	rjmp	.+2      	; 0xba0 <vTaskDelay+0x30>
 b9e:	9c dc       	rcall	.-1736   	; 0x4d8 <vPortYield>
 ba0:	df 91       	pop	r29
 ba2:	cf 91       	pop	r28
 ba4:	08 95       	ret

00000ba6 <prvIdleTask>:
		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
		{
			vTaskSuspendAll();
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 ba6:	0f 2e       	mov	r0, r31
 ba8:	f4 e1       	ldi	r31, 0x14	; 20
 baa:	ef 2e       	mov	r14, r31
 bac:	f7 e0       	ldi	r31, 0x07	; 7
 bae:	ff 2e       	mov	r15, r31
 bb0:	f0 2d       	mov	r31, r0

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
 bb2:	cc e3       	ldi	r28, 0x3C	; 60
 bb4:	d7 e0       	ldi	r29, 0x07	; 7
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
 bb6:	80 91 13 07 	lds	r24, 0x0713	; 0x800713 <uxTasksDeleted>
 bba:	88 23       	and	r24, r24
		{
			vTaskSuspendAll();
 bbc:	29 f1       	breq	.+74     	; 0xc08 <prvIdleTask+0x62>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 bbe:	90 de       	rcall	.-736    	; 0x8e0 <vTaskSuspendAll>
			xTaskResumeAll();
 bc0:	d7 01       	movw	r26, r14
 bc2:	1c 91       	ld	r17, X

			if( xListIsEmpty == pdFALSE )
 bc4:	54 df       	rcall	.-344    	; 0xa6e <xTaskResumeAll>
 bc6:	11 23       	and	r17, r17
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
 bc8:	f9 f0       	breq	.+62     	; 0xc08 <prvIdleTask+0x62>
 bca:	0f b6       	in	r0, 0x3f	; 63
 bcc:	f8 94       	cli
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
 bce:	0f 92       	push	r0
 bd0:	d7 01       	movw	r26, r14
 bd2:	15 96       	adiw	r26, 0x05	; 5
 bd4:	ed 91       	ld	r30, X+
 bd6:	fc 91       	ld	r31, X
 bd8:	16 97       	sbiw	r26, 0x06	; 6
					vListRemove( &( pxTCB->xGenericListItem ) );
 bda:	06 81       	ldd	r16, Z+6	; 0x06
 bdc:	17 81       	ldd	r17, Z+7	; 0x07
 bde:	c8 01       	movw	r24, r16
					--uxCurrentNumberOfTasks;
 be0:	02 96       	adiw	r24, 0x02	; 2
 be2:	0b db       	rcall	.-2538   	; 0x1fa <vListRemove>
 be4:	80 91 12 07 	lds	r24, 0x0712	; 0x800712 <uxCurrentNumberOfTasks>
 be8:	81 50       	subi	r24, 0x01	; 1
					--uxTasksDeleted;
 bea:	80 93 12 07 	sts	0x0712, r24	; 0x800712 <uxCurrentNumberOfTasks>
 bee:	80 91 13 07 	lds	r24, 0x0713	; 0x800713 <uxTasksDeleted>
 bf2:	81 50       	subi	r24, 0x01	; 1
				}
				taskEXIT_CRITICAL();
 bf4:	80 93 13 07 	sts	0x0713, r24	; 0x800713 <uxTasksDeleted>
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
 bf8:	0f 90       	pop	r0
 bfa:	0f be       	out	0x3f, r0	; 63
		vPortFree( pxTCB );
 bfc:	f8 01       	movw	r30, r16
 bfe:	87 89       	ldd	r24, Z+23	; 0x17

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
 c00:	90 8d       	ldd	r25, Z+24	; 0x18
 c02:	86 da       	rcall	.-2804   	; 0x110 <vPortFree>
 c04:	c8 01       	movw	r24, r16
			{
				taskYIELD();
 c06:	84 da       	rcall	.-2808   	; 0x110 <vPortFree>
 c08:	88 81       	ld	r24, Y
 c0a:	82 30       	cpi	r24, 0x02	; 2
 c0c:	a0 f2       	brcs	.-88     	; 0xbb6 <prvIdleTask+0x10>
 c0e:	64 dc       	rcall	.-1848   	; 0x4d8 <vPortYield>
 c10:	d2 cf       	rjmp	.-92     	; 0xbb6 <prvIdleTask+0x10>

00000c12 <vTaskSwitchContext>:
#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
 c12:	80 91 0c 07 	lds	r24, 0x070C	; 0x80070c <uxSchedulerSuspended>
 c16:	81 11       	cpse	r24, r1
 c18:	13 c0       	rjmp	.+38     	; 0xc40 <vTaskSwitchContext+0x2e>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
 c1a:	80 91 0e 07 	lds	r24, 0x070E	; 0x80070e <uxTopReadyPriority>
 c1e:	90 e0       	ldi	r25, 0x00	; 0
 c20:	fc 01       	movw	r30, r24
 c22:	ee 0f       	add	r30, r30
 c24:	ff 1f       	adc	r31, r31
 c26:	ee 0f       	add	r30, r30
 c28:	ff 1f       	adc	r31, r31
 c2a:	ee 0f       	add	r30, r30
 c2c:	ff 1f       	adc	r31, r31
 c2e:	8e 0f       	add	r24, r30
 c30:	9f 1f       	adc	r25, r31
 c32:	fc 01       	movw	r30, r24
 c34:	e4 5c       	subi	r30, 0xC4	; 196
 c36:	f8 4f       	sbci	r31, 0xF8	; 248
 c38:	80 81       	ld	r24, Z
 c3a:	88 23       	and	r24, r24
 c3c:	29 f0       	breq	.+10     	; 0xc48 <vTaskSwitchContext+0x36>
 c3e:	1b c0       	rjmp	.+54     	; 0xc76 <vTaskSwitchContext+0x64>
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
 c40:	81 e0       	ldi	r24, 0x01	; 1
 c42:	80 93 0a 07 	sts	0x070A, r24	; 0x80070a <xMissedYield>
 c46:	08 95       	ret
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
 c48:	80 91 0e 07 	lds	r24, 0x070E	; 0x80070e <uxTopReadyPriority>
 c4c:	81 50       	subi	r24, 0x01	; 1
 c4e:	80 93 0e 07 	sts	0x070E, r24	; 0x80070e <uxTopReadyPriority>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
 c52:	80 91 0e 07 	lds	r24, 0x070E	; 0x80070e <uxTopReadyPriority>
 c56:	90 e0       	ldi	r25, 0x00	; 0
 c58:	fc 01       	movw	r30, r24
 c5a:	ee 0f       	add	r30, r30
 c5c:	ff 1f       	adc	r31, r31
 c5e:	ee 0f       	add	r30, r30
 c60:	ff 1f       	adc	r31, r31
 c62:	ee 0f       	add	r30, r30
 c64:	ff 1f       	adc	r31, r31
 c66:	8e 0f       	add	r24, r30
 c68:	9f 1f       	adc	r25, r31
 c6a:	fc 01       	movw	r30, r24
 c6c:	e4 5c       	subi	r30, 0xC4	; 196
 c6e:	f8 4f       	sbci	r31, 0xF8	; 248
 c70:	80 81       	ld	r24, Z
 c72:	88 23       	and	r24, r24
 c74:	49 f3       	breq	.-46     	; 0xc48 <vTaskSwitchContext+0x36>
			--uxTopReadyPriority;
		}
	
		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
 c76:	80 91 0e 07 	lds	r24, 0x070E	; 0x80070e <uxTopReadyPriority>
 c7a:	90 e0       	ldi	r25, 0x00	; 0
 c7c:	9c 01       	movw	r18, r24
 c7e:	22 0f       	add	r18, r18
 c80:	33 1f       	adc	r19, r19
 c82:	22 0f       	add	r18, r18
 c84:	33 1f       	adc	r19, r19
 c86:	22 0f       	add	r18, r18
 c88:	33 1f       	adc	r19, r19
 c8a:	28 0f       	add	r18, r24
 c8c:	39 1f       	adc	r19, r25
 c8e:	d9 01       	movw	r26, r18
 c90:	a4 5c       	subi	r26, 0xC4	; 196
 c92:	b8 4f       	sbci	r27, 0xF8	; 248
 c94:	11 96       	adiw	r26, 0x01	; 1
 c96:	ed 91       	ld	r30, X+
 c98:	fc 91       	ld	r31, X
 c9a:	12 97       	sbiw	r26, 0x02	; 2
 c9c:	02 80       	ldd	r0, Z+2	; 0x02
 c9e:	f3 81       	ldd	r31, Z+3	; 0x03
 ca0:	e0 2d       	mov	r30, r0
 ca2:	12 96       	adiw	r26, 0x02	; 2
 ca4:	fc 93       	st	X, r31
 ca6:	ee 93       	st	-X, r30
 ca8:	11 97       	sbiw	r26, 0x01	; 1
 caa:	21 5c       	subi	r18, 0xC1	; 193
 cac:	38 4f       	sbci	r19, 0xF8	; 248
 cae:	e2 17       	cp	r30, r18
 cb0:	f3 07       	cpc	r31, r19
 cb2:	29 f4       	brne	.+10     	; 0xcbe <vTaskSwitchContext+0xac>
 cb4:	22 81       	ldd	r18, Z+2	; 0x02
 cb6:	33 81       	ldd	r19, Z+3	; 0x03
 cb8:	fd 01       	movw	r30, r26
 cba:	32 83       	std	Z+2, r19	; 0x02
 cbc:	21 83       	std	Z+1, r18	; 0x01
 cbe:	fc 01       	movw	r30, r24
 cc0:	ee 0f       	add	r30, r30
 cc2:	ff 1f       	adc	r31, r31
 cc4:	ee 0f       	add	r30, r30
 cc6:	ff 1f       	adc	r31, r31
 cc8:	ee 0f       	add	r30, r30
 cca:	ff 1f       	adc	r31, r31
 ccc:	8e 0f       	add	r24, r30
 cce:	9f 1f       	adc	r25, r31
 cd0:	fc 01       	movw	r30, r24
 cd2:	e4 5c       	subi	r30, 0xC4	; 196
 cd4:	f8 4f       	sbci	r31, 0xF8	; 248
 cd6:	01 80       	ldd	r0, Z+1	; 0x01
 cd8:	f2 81       	ldd	r31, Z+2	; 0x02
 cda:	e0 2d       	mov	r30, r0
 cdc:	86 81       	ldd	r24, Z+6	; 0x06
 cde:	97 81       	ldd	r25, Z+7	; 0x07
 ce0:	90 93 61 07 	sts	0x0761, r25	; 0x800761 <pxCurrentTCB+0x1>
 ce4:	80 93 60 07 	sts	0x0760, r24	; 0x800760 <pxCurrentTCB>
 ce8:	08 95       	ret

00000cea <memset>:
 cea:	dc 01       	movw	r26, r24
 cec:	01 c0       	rjmp	.+2      	; 0xcf0 <memset+0x6>
 cee:	6d 93       	st	X+, r22
 cf0:	41 50       	subi	r20, 0x01	; 1
 cf2:	50 40       	sbci	r21, 0x00	; 0
 cf4:	e0 f7       	brcc	.-8      	; 0xcee <memset+0x4>
 cf6:	08 95       	ret

00000cf8 <strncpy>:
 cf8:	fb 01       	movw	r30, r22
 cfa:	dc 01       	movw	r26, r24
 cfc:	41 50       	subi	r20, 0x01	; 1
 cfe:	50 40       	sbci	r21, 0x00	; 0
 d00:	48 f0       	brcs	.+18     	; 0xd14 <strncpy+0x1c>
 d02:	01 90       	ld	r0, Z+
 d04:	0d 92       	st	X+, r0
 d06:	00 20       	and	r0, r0
 d08:	c9 f7       	brne	.-14     	; 0xcfc <strncpy+0x4>
 d0a:	01 c0       	rjmp	.+2      	; 0xd0e <strncpy+0x16>
 d0c:	1d 92       	st	X+, r1
 d0e:	41 50       	subi	r20, 0x01	; 1
 d10:	50 40       	sbci	r21, 0x00	; 0
 d12:	e0 f7       	brcc	.-8      	; 0xd0c <strncpy+0x14>
 d14:	08 95       	ret

00000d16 <_exit>:
 d16:	f8 94       	cli

00000d18 <__stop_program>:
 d18:	ff cf       	rjmp	.-2      	; 0xd18 <__stop_program>
