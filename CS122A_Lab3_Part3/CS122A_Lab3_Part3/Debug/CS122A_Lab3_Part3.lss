
CS122A_Lab3_Part3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800100  0000057e  00000612  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000057e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800116  00800116  00000628  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000628  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000658  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f0  00000000  00000000  00000698  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000125b  00000000  00000000  00000788  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009ee  00000000  00000000  000019e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009a4  00000000  00000000  000023d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000208  00000000  00000000  00002d78  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000064e  00000000  00000000  00002f80  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000480  00000000  00000000  000035ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  00003a4e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	c4 c0       	rjmp	.+392    	; 0x1be <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ee e7       	ldi	r30, 0x7E	; 126
  a0:	f5 e0       	ldi	r31, 0x05	; 5
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a6 31       	cpi	r26, 0x16	; 22
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a6 e1       	ldi	r26, 0x16	; 22
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a0 32       	cpi	r26, 0x20	; 32
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	34 d2       	rcall	.+1128   	; 0x52c <main>
  c4:	5a c2       	rjmp	.+1204   	; 0x57a <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <delay_ms>:
unsigned char SetBit(unsigned char x, unsigned char k, unsigned char b) {
	return (b ? x | (0x01 << k) : x & ~(0x01 << k));
}
unsigned char GetBit(unsigned char x, unsigned char k) {
	return ((x & (0x01 << k)) != 0);
}
  c8:	18 16       	cp	r1, r24
  ca:	19 06       	cpc	r1, r25
  cc:	5c f0       	brlt	.+22     	; 0xe4 <delay_ms+0x1c>
  ce:	08 95       	ret
  d0:	00 00       	nop
  d2:	21 50       	subi	r18, 0x01	; 1
  d4:	31 09       	sbc	r19, r1
  d6:	e1 f7       	brne	.-8      	; 0xd0 <delay_ms+0x8>
  d8:	4f 5f       	subi	r20, 0xFF	; 255
  da:	5f 4f       	sbci	r21, 0xFF	; 255
  dc:	84 17       	cp	r24, r20
  de:	95 07       	cpc	r25, r21
  e0:	19 f4       	brne	.+6      	; 0xe8 <delay_ms+0x20>
  e2:	08 95       	ret
  e4:	40 e0       	ldi	r20, 0x00	; 0
  e6:	50 e0       	ldi	r21, 0x00	; 0
  e8:	27 e0       	ldi	r18, 0x07	; 7
  ea:	33 e0       	ldi	r19, 0x03	; 3
  ec:	f1 cf       	rjmp	.-30     	; 0xd0 <delay_ms+0x8>

000000ee <LCD_WriteCommand>:
  ee:	5e 98       	cbi	0x0b, 6	; 11
  f0:	88 b9       	out	0x08, r24	; 8
  f2:	5f 9a       	sbi	0x0b, 7	; 11
  f4:	00 00       	nop
  f6:	5f 98       	cbi	0x0b, 7	; 11
  f8:	82 e0       	ldi	r24, 0x02	; 2
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	e5 cf       	rjmp	.-54     	; 0xc8 <delay_ms>
  fe:	08 95       	ret

00000100 <LCD_ClearScreen>:
 100:	81 e0       	ldi	r24, 0x01	; 1
 102:	f5 cf       	rjmp	.-22     	; 0xee <LCD_WriteCommand>
 104:	08 95       	ret

00000106 <LCD_Cursor>:
 106:	81 31       	cpi	r24, 0x11	; 17
 108:	18 f4       	brcc	.+6      	; 0x110 <LCD_Cursor+0xa>
 10a:	81 58       	subi	r24, 0x81	; 129
 10c:	f0 cf       	rjmp	.-32     	; 0xee <LCD_WriteCommand>
 10e:	08 95       	ret
 110:	81 55       	subi	r24, 0x51	; 81
 112:	ed cf       	rjmp	.-38     	; 0xee <LCD_WriteCommand>
 114:	08 95       	ret

00000116 <LCD_init>:
 116:	84 e6       	ldi	r24, 0x64	; 100
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	d6 df       	rcall	.-84     	; 0xc8 <delay_ms>
 11c:	88 e3       	ldi	r24, 0x38	; 56
 11e:	e7 df       	rcall	.-50     	; 0xee <LCD_WriteCommand>
 120:	86 e0       	ldi	r24, 0x06	; 6
 122:	e5 df       	rcall	.-54     	; 0xee <LCD_WriteCommand>
 124:	8f e0       	ldi	r24, 0x0F	; 15
 126:	e3 df       	rcall	.-58     	; 0xee <LCD_WriteCommand>
 128:	81 e0       	ldi	r24, 0x01	; 1
 12a:	e1 df       	rcall	.-62     	; 0xee <LCD_WriteCommand>
 12c:	8a e0       	ldi	r24, 0x0A	; 10
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	cb cf       	rjmp	.-106    	; 0xc8 <delay_ms>
 132:	08 95       	ret

00000134 <LCD_WriteData>:
 134:	5e 9a       	sbi	0x0b, 6	; 11
 136:	88 b9       	out	0x08, r24	; 8
 138:	5f 9a       	sbi	0x0b, 7	; 11
 13a:	00 00       	nop
 13c:	5f 98       	cbi	0x0b, 7	; 11
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	c2 cf       	rjmp	.-124    	; 0xc8 <delay_ms>
 144:	08 95       	ret

00000146 <LCD_DisplayString>:
 146:	0f 93       	push	r16
 148:	1f 93       	push	r17
 14a:	cf 93       	push	r28
 14c:	df 93       	push	r29
 14e:	18 2f       	mov	r17, r24
 150:	eb 01       	movw	r28, r22
 152:	d6 df       	rcall	.-84     	; 0x100 <LCD_ClearScreen>
 154:	88 81       	ld	r24, Y
 156:	88 23       	and	r24, r24
 158:	51 f0       	breq	.+20     	; 0x16e <LCD_DisplayString+0x28>
 15a:	01 e0       	ldi	r16, 0x01	; 1
 15c:	01 0f       	add	r16, r17
 15e:	81 2f       	mov	r24, r17
 160:	d2 df       	rcall	.-92     	; 0x106 <LCD_Cursor>
 162:	89 91       	ld	r24, Y+
 164:	e7 df       	rcall	.-50     	; 0x134 <LCD_WriteData>
 166:	10 2f       	mov	r17, r16
 168:	88 81       	ld	r24, Y
 16a:	81 11       	cpse	r24, r1
 16c:	f6 cf       	rjmp	.-20     	; 0x15a <LCD_DisplayString+0x14>
 16e:	df 91       	pop	r29
 170:	cf 91       	pop	r28
 172:	1f 91       	pop	r17
 174:	0f 91       	pop	r16
 176:	08 95       	ret

00000178 <TimerOn>:
 178:	8b e0       	ldi	r24, 0x0B	; 11
 17a:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 17e:	8d e7       	ldi	r24, 0x7D	; 125
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 186:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 18a:	82 e0       	ldi	r24, 0x02	; 2
 18c:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 190:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 194:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 198:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <avr_timer_M>
 19c:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <avr_timer_M+0x1>
 1a0:	a0 91 07 01 	lds	r26, 0x0107	; 0x800107 <avr_timer_M+0x2>
 1a4:	b0 91 08 01 	lds	r27, 0x0108	; 0x800108 <avr_timer_M+0x3>
 1a8:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <avr_timer_cntcurr>
 1ac:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <avr_timer_cntcurr+0x1>
 1b0:	a0 93 1a 01 	sts	0x011A, r26	; 0x80011a <avr_timer_cntcurr+0x2>
 1b4:	b0 93 1b 01 	sts	0x011B, r27	; 0x80011b <avr_timer_cntcurr+0x3>
 1b8:	80 e8       	ldi	r24, 0x80	; 128
 1ba:	8f bf       	out	0x3f, r24	; 63
 1bc:	08 95       	ret

000001be <__vector_13>:
 1be:	1f 92       	push	r1
 1c0:	0f 92       	push	r0
 1c2:	0f b6       	in	r0, 0x3f	; 63
 1c4:	0f 92       	push	r0
 1c6:	11 24       	eor	r1, r1
 1c8:	8f 93       	push	r24
 1ca:	9f 93       	push	r25
 1cc:	af 93       	push	r26
 1ce:	bf 93       	push	r27
 1d0:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <avr_timer_cntcurr>
 1d4:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <avr_timer_cntcurr+0x1>
 1d8:	a0 91 1a 01 	lds	r26, 0x011A	; 0x80011a <avr_timer_cntcurr+0x2>
 1dc:	b0 91 1b 01 	lds	r27, 0x011B	; 0x80011b <avr_timer_cntcurr+0x3>
 1e0:	01 97       	sbiw	r24, 0x01	; 1
 1e2:	a1 09       	sbc	r26, r1
 1e4:	b1 09       	sbc	r27, r1
 1e6:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <avr_timer_cntcurr>
 1ea:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <avr_timer_cntcurr+0x1>
 1ee:	a0 93 1a 01 	sts	0x011A, r26	; 0x80011a <avr_timer_cntcurr+0x2>
 1f2:	b0 93 1b 01 	sts	0x011B, r27	; 0x80011b <avr_timer_cntcurr+0x3>
 1f6:	89 2b       	or	r24, r25
 1f8:	8a 2b       	or	r24, r26
 1fa:	8b 2b       	or	r24, r27
 1fc:	99 f4       	brne	.+38     	; 0x224 <__vector_13+0x66>
 1fe:	81 e0       	ldi	r24, 0x01	; 1
 200:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <TimerFlag>
 204:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <avr_timer_M>
 208:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <avr_timer_M+0x1>
 20c:	a0 91 07 01 	lds	r26, 0x0107	; 0x800107 <avr_timer_M+0x2>
 210:	b0 91 08 01 	lds	r27, 0x0108	; 0x800108 <avr_timer_M+0x3>
 214:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <avr_timer_cntcurr>
 218:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <avr_timer_cntcurr+0x1>
 21c:	a0 93 1a 01 	sts	0x011A, r26	; 0x80011a <avr_timer_cntcurr+0x2>
 220:	b0 93 1b 01 	sts	0x011B, r27	; 0x80011b <avr_timer_cntcurr+0x3>
 224:	bf 91       	pop	r27
 226:	af 91       	pop	r26
 228:	9f 91       	pop	r25
 22a:	8f 91       	pop	r24
 22c:	0f 90       	pop	r0
 22e:	0f be       	out	0x3f, r0	; 63
 230:	0f 90       	pop	r0
 232:	1f 90       	pop	r1
 234:	18 95       	reti

00000236 <TimerSet>:
 236:	60 93 05 01 	sts	0x0105, r22	; 0x800105 <avr_timer_M>
 23a:	70 93 06 01 	sts	0x0106, r23	; 0x800106 <avr_timer_M+0x1>
 23e:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <avr_timer_M+0x2>
 242:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <avr_timer_M+0x3>
 246:	60 93 18 01 	sts	0x0118, r22	; 0x800118 <avr_timer_cntcurr>
 24a:	70 93 19 01 	sts	0x0119, r23	; 0x800119 <avr_timer_cntcurr+0x1>
 24e:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <avr_timer_cntcurr+0x2>
 252:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <avr_timer_cntcurr+0x3>
 256:	08 95       	ret

00000258 <GetKeypadKey>:
//Parameter: None
//Returns: A keypad button press else '\0'
unsigned char GetKeypadKey() {

	// Check keys in col 1
	KEYPADPORT = SetBit(0xFF,COL1,0); // Set Px4 to 0; others 1
 258:	8f ee       	ldi	r24, 0xEF	; 239
 25a:	82 b9       	out	0x02, r24	; 2
	asm("nop"); // add a delay to allow PORTx to stabilize before checking
 25c:	00 00       	nop
	if ( GetBit(~KEYPADPIN,ROW1) ) { return '1'; }
 25e:	00 9b       	sbis	0x00, 0	; 0
 260:	44 c0       	rjmp	.+136    	; 0x2ea <GetKeypadKey+0x92>
	if ( GetBit(~KEYPADPIN,ROW2) ) { return '4'; }
 262:	80 b1       	in	r24, 0x00	; 0
 264:	80 95       	com	r24
 266:	81 fd       	sbrc	r24, 1
 268:	42 c0       	rjmp	.+132    	; 0x2ee <GetKeypadKey+0x96>
	if ( GetBit(~KEYPADPIN,ROW3) ) { return '7'; }
 26a:	80 b1       	in	r24, 0x00	; 0
 26c:	80 95       	com	r24
 26e:	82 fd       	sbrc	r24, 2
 270:	40 c0       	rjmp	.+128    	; 0x2f2 <GetKeypadKey+0x9a>
	if ( GetBit(~KEYPADPIN,ROW4) ) { return '*'; }
 272:	80 b1       	in	r24, 0x00	; 0
 274:	80 95       	com	r24
 276:	83 fd       	sbrc	r24, 3
 278:	3e c0       	rjmp	.+124    	; 0x2f6 <GetKeypadKey+0x9e>

	// Check keys in col 2
	KEYPADPORT = SetBit(0xFF,COL2,0); // Set Px5 to 0; others 1
 27a:	8f ed       	ldi	r24, 0xDF	; 223
 27c:	82 b9       	out	0x02, r24	; 2
	asm("nop"); // add a delay to allow PORTx to stabilize before checking
 27e:	00 00       	nop
	if ( GetBit(~KEYPADPIN,ROW1) ) { return '2'; }
 280:	00 9b       	sbis	0x00, 0	; 0
 282:	3b c0       	rjmp	.+118    	; 0x2fa <GetKeypadKey+0xa2>
	if ( GetBit(~KEYPADPIN,ROW2) ) { return '5'; }
 284:	80 b1       	in	r24, 0x00	; 0
 286:	80 95       	com	r24
 288:	81 fd       	sbrc	r24, 1
 28a:	39 c0       	rjmp	.+114    	; 0x2fe <GetKeypadKey+0xa6>
	if ( GetBit(~KEYPADPIN,ROW3) ) { return '8'; }
 28c:	80 b1       	in	r24, 0x00	; 0
 28e:	80 95       	com	r24
 290:	82 fd       	sbrc	r24, 2
 292:	37 c0       	rjmp	.+110    	; 0x302 <GetKeypadKey+0xaa>
	if ( GetBit(~KEYPADPIN,ROW4) ) { return '0'; }
 294:	80 b1       	in	r24, 0x00	; 0
 296:	80 95       	com	r24
 298:	83 fd       	sbrc	r24, 3
 29a:	35 c0       	rjmp	.+106    	; 0x306 <GetKeypadKey+0xae>

	// Check keys in col 3
	KEYPADPORT = SetBit(0xFF,COL3,0); // Set Px6 to 0; others 1
 29c:	8f eb       	ldi	r24, 0xBF	; 191
 29e:	82 b9       	out	0x02, r24	; 2
	asm("nop"); // add a delay to allow PORTx to stabilize before checking
 2a0:	00 00       	nop
	if ( GetBit(~KEYPADPIN,ROW1) ) { return '3'; }
 2a2:	00 9b       	sbis	0x00, 0	; 0
 2a4:	32 c0       	rjmp	.+100    	; 0x30a <GetKeypadKey+0xb2>
	if ( GetBit(~KEYPADPIN,ROW2) ) { return '6'; }
 2a6:	80 b1       	in	r24, 0x00	; 0
 2a8:	80 95       	com	r24
 2aa:	81 fd       	sbrc	r24, 1
 2ac:	30 c0       	rjmp	.+96     	; 0x30e <GetKeypadKey+0xb6>
	if ( GetBit(~KEYPADPIN,ROW3) ) { return '9'; }
 2ae:	80 b1       	in	r24, 0x00	; 0
 2b0:	80 95       	com	r24
 2b2:	82 fd       	sbrc	r24, 2
 2b4:	2e c0       	rjmp	.+92     	; 0x312 <GetKeypadKey+0xba>
	if ( GetBit(~KEYPADPIN,ROW4) ) { return '#'; }
 2b6:	80 b1       	in	r24, 0x00	; 0
 2b8:	80 95       	com	r24
 2ba:	83 fd       	sbrc	r24, 3
 2bc:	2c c0       	rjmp	.+88     	; 0x316 <GetKeypadKey+0xbe>

	// Check keys in col 4
	KEYPADPORT = SetBit(0xFF,COL4,0); // Set Px7 to 0; others 1
 2be:	8f e7       	ldi	r24, 0x7F	; 127
 2c0:	82 b9       	out	0x02, r24	; 2
	asm("nop"); // add a delay to allow PORTx to stabilize before checking
 2c2:	00 00       	nop
	if (GetBit(~KEYPADPIN,ROW1) ) { return 'A'; }
 2c4:	90 b1       	in	r25, 0x00	; 0
 2c6:	90 95       	com	r25
 2c8:	89 2f       	mov	r24, r25
 2ca:	81 70       	andi	r24, 0x01	; 1
 2cc:	90 fd       	sbrc	r25, 0
 2ce:	25 c0       	rjmp	.+74     	; 0x31a <GetKeypadKey+0xc2>
	if (GetBit(~KEYPADPIN,ROW2) ) { return 'B'; }
 2d0:	90 b1       	in	r25, 0x00	; 0
 2d2:	90 95       	com	r25
 2d4:	91 fd       	sbrc	r25, 1
 2d6:	23 c0       	rjmp	.+70     	; 0x31e <GetKeypadKey+0xc6>
	if (GetBit(~KEYPADPIN,ROW3) ) { return 'C'; }
 2d8:	90 b1       	in	r25, 0x00	; 0
 2da:	90 95       	com	r25
 2dc:	92 fd       	sbrc	r25, 2
 2de:	21 c0       	rjmp	.+66     	; 0x322 <GetKeypadKey+0xca>
	if (GetBit(~KEYPADPIN,ROW4) ) { return 'D'; }
 2e0:	90 b1       	in	r25, 0x00	; 0
 2e2:	90 95       	com	r25
 2e4:	93 fd       	sbrc	r25, 3
 2e6:	1f c0       	rjmp	.+62     	; 0x326 <GetKeypadKey+0xce>
 2e8:	08 95       	ret
unsigned char GetKeypadKey() {

	// Check keys in col 1
	KEYPADPORT = SetBit(0xFF,COL1,0); // Set Px4 to 0; others 1
	asm("nop"); // add a delay to allow PORTx to stabilize before checking
	if ( GetBit(~KEYPADPIN,ROW1) ) { return '1'; }
 2ea:	81 e3       	ldi	r24, 0x31	; 49
 2ec:	08 95       	ret
	if ( GetBit(~KEYPADPIN,ROW2) ) { return '4'; }
 2ee:	84 e3       	ldi	r24, 0x34	; 52
 2f0:	08 95       	ret
	if ( GetBit(~KEYPADPIN,ROW3) ) { return '7'; }
 2f2:	87 e3       	ldi	r24, 0x37	; 55
 2f4:	08 95       	ret
	if ( GetBit(~KEYPADPIN,ROW4) ) { return '*'; }
 2f6:	8a e2       	ldi	r24, 0x2A	; 42
 2f8:	08 95       	ret

	// Check keys in col 2
	KEYPADPORT = SetBit(0xFF,COL2,0); // Set Px5 to 0; others 1
	asm("nop"); // add a delay to allow PORTx to stabilize before checking
	if ( GetBit(~KEYPADPIN,ROW1) ) { return '2'; }
 2fa:	82 e3       	ldi	r24, 0x32	; 50
 2fc:	08 95       	ret
	if ( GetBit(~KEYPADPIN,ROW2) ) { return '5'; }
 2fe:	85 e3       	ldi	r24, 0x35	; 53
 300:	08 95       	ret
	if ( GetBit(~KEYPADPIN,ROW3) ) { return '8'; }
 302:	88 e3       	ldi	r24, 0x38	; 56
 304:	08 95       	ret
	if ( GetBit(~KEYPADPIN,ROW4) ) { return '0'; }
 306:	80 e3       	ldi	r24, 0x30	; 48
 308:	08 95       	ret

	// Check keys in col 3
	KEYPADPORT = SetBit(0xFF,COL3,0); // Set Px6 to 0; others 1
	asm("nop"); // add a delay to allow PORTx to stabilize before checking
	if ( GetBit(~KEYPADPIN,ROW1) ) { return '3'; }
 30a:	83 e3       	ldi	r24, 0x33	; 51
 30c:	08 95       	ret
	if ( GetBit(~KEYPADPIN,ROW2) ) { return '6'; }
 30e:	86 e3       	ldi	r24, 0x36	; 54
 310:	08 95       	ret
	if ( GetBit(~KEYPADPIN,ROW3) ) { return '9'; }
 312:	89 e3       	ldi	r24, 0x39	; 57
 314:	08 95       	ret
	if ( GetBit(~KEYPADPIN,ROW4) ) { return '#'; }
 316:	83 e2       	ldi	r24, 0x23	; 35
 318:	08 95       	ret

	// Check keys in col 4
	KEYPADPORT = SetBit(0xFF,COL4,0); // Set Px7 to 0; others 1
	asm("nop"); // add a delay to allow PORTx to stabilize before checking
	if (GetBit(~KEYPADPIN,ROW1) ) { return 'A'; }
 31a:	81 e4       	ldi	r24, 0x41	; 65
 31c:	08 95       	ret
	if (GetBit(~KEYPADPIN,ROW2) ) { return 'B'; }
 31e:	82 e4       	ldi	r24, 0x42	; 66
 320:	08 95       	ret
	if (GetBit(~KEYPADPIN,ROW3) ) { return 'C'; }
 322:	83 e4       	ldi	r24, 0x43	; 67
 324:	08 95       	ret
	if (GetBit(~KEYPADPIN,ROW4) ) { return 'D'; }
 326:	84 e4       	ldi	r24, 0x44	; 68
	
	return '\0';
}
 328:	08 95       	ret

0000032a <SPI_MasterInit>:

//SPI
// Master code

void SPI_MasterInit(void) {
    DDRB = (1<<DDB4) | (1<<DDB5) | (1<<DDB7);
 32a:	80 eb       	ldi	r24, 0xB0	; 176
 32c:	84 b9       	out	0x04, r24	; 4
    SPCR = (1<<SPE) |  (1<<MSTR) | (1<SPR0);
 32e:	80 e5       	ldi	r24, 0x50	; 80
 330:	8c bd       	out	0x2c, r24	; 44
 332:	08 95       	ret

00000334 <SPI_Transmit>:
}

unsigned char SPI_Transmit(unsigned char data){
    PORTB = PORTB & 0xEF;
 334:	2c 98       	cbi	0x05, 4	; 5
    SPDR = data;
 336:	8e bd       	out	0x2e, r24	; 46
    while( !(SPSR & (1<<SPIF) ));
 338:	0d b4       	in	r0, 0x2d	; 45
 33a:	07 fe       	sbrs	r0, 7
 33c:	fd cf       	rjmp	.-6      	; 0x338 <SPI_Transmit+0x4>
    PORTB = PORTB | 0x10;
 33e:	2c 9a       	sbi	0x05, 4	; 5
    return SPDR;
 340:	8e b5       	in	r24, 0x2e	; 46
}
 342:	08 95       	ret

00000344 <Tick_SM3>:
unsigned char send_value=0x00;
unsigned char prev_send_val=0x11;
enum SM3_States{Start3, Keypad1} state_SM3;
void Tick_SM3()
{
    switch(state_SM3){
 344:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <state_SM3>
 348:	88 23       	and	r24, r24
 34a:	19 f0       	breq	.+6      	; 0x352 <Tick_SM3+0xe>
 34c:	81 30       	cpi	r24, 0x01	; 1
 34e:	41 f0       	breq	.+16     	; 0x360 <Tick_SM3+0x1c>
 350:	04 c0       	rjmp	.+8      	; 0x35a <Tick_SM3+0x16>
        case Start3:
            state_SM3=Keypad1;
 352:	81 e0       	ldi	r24, 0x01	; 1
 354:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <state_SM3>
            break;
 358:	03 c0       	rjmp	.+6      	; 0x360 <Tick_SM3+0x1c>
        case Keypad1:
            state_SM3=Keypad1;
            break;
        default:break;
    }
    switch(state_SM3){
 35a:	81 30       	cpi	r24, 0x01	; 1
 35c:	09 f0       	breq	.+2      	; 0x360 <Tick_SM3+0x1c>
        case Keypad1:
            get_val=GetKeypadKey();
 35e:	3e c0       	rjmp	.+124    	; 0x3dc <Tick_SM3+0x98>
 360:	7b df       	rcall	.-266    	; 0x258 <GetKeypadKey>
 362:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <get_val>
            if(get_val=='1'){
 366:	81 33       	cpi	r24, 0x31	; 49
                speed_num=0x01;               
 368:	21 f4       	brne	.+8      	; 0x372 <Tick_SM3+0x2e>
 36a:	81 e0       	ldi	r24, 0x01	; 1
 36c:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <speed_num>
            }
            else if(get_val=='2'){
 370:	08 95       	ret
 372:	82 33       	cpi	r24, 0x32	; 50
                speed_num=0x02;                
 374:	21 f4       	brne	.+8      	; 0x37e <Tick_SM3+0x3a>
 376:	82 e0       	ldi	r24, 0x02	; 2
 378:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <speed_num>
            }
            else if(get_val=='3'){
 37c:	08 95       	ret
 37e:	83 33       	cpi	r24, 0x33	; 51
                speed_num=0x03;                
 380:	21 f4       	brne	.+8      	; 0x38a <Tick_SM3+0x46>
 382:	83 e0       	ldi	r24, 0x03	; 3
 384:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <speed_num>
            }
            else if(get_val=='4'){
 388:	08 95       	ret
 38a:	84 33       	cpi	r24, 0x34	; 52
                speed_num=0x04;                
 38c:	21 f4       	brne	.+8      	; 0x396 <Tick_SM3+0x52>
 38e:	84 e0       	ldi	r24, 0x04	; 4
 390:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <speed_num>
            }
            else if(get_val=='5'){
 394:	08 95       	ret
 396:	85 33       	cpi	r24, 0x35	; 53
                speed_num=0x05;                
 398:	21 f4       	brne	.+8      	; 0x3a2 <Tick_SM3+0x5e>
 39a:	85 e0       	ldi	r24, 0x05	; 5
 39c:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <speed_num>
            }
            else if(get_val=='6'){
 3a0:	08 95       	ret
 3a2:	86 33       	cpi	r24, 0x36	; 54
                speed_num=0x06;               
 3a4:	21 f4       	brne	.+8      	; 0x3ae <Tick_SM3+0x6a>
 3a6:	86 e0       	ldi	r24, 0x06	; 6
 3a8:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <speed_num>
            }            
            else if(get_val=='A'){
 3ac:	08 95       	ret
 3ae:	81 34       	cpi	r24, 0x41	; 65
                pattern_num=0x01;                
 3b0:	21 f4       	brne	.+8      	; 0x3ba <Tick_SM3+0x76>
 3b2:	81 e0       	ldi	r24, 0x01	; 1
 3b4:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <pattern_num>
            }
            else if(get_val=='B'){
 3b8:	08 95       	ret
 3ba:	82 34       	cpi	r24, 0x42	; 66
                pattern_num=0x02;
 3bc:	21 f4       	brne	.+8      	; 0x3c6 <Tick_SM3+0x82>
 3be:	82 e0       	ldi	r24, 0x02	; 2
 3c0:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <pattern_num>
            }
            else if(get_val=='C'){
 3c4:	08 95       	ret
 3c6:	83 34       	cpi	r24, 0x43	; 67
                pattern_num=0x03;
 3c8:	21 f4       	brne	.+8      	; 0x3d2 <Tick_SM3+0x8e>
 3ca:	83 e0       	ldi	r24, 0x03	; 3
 3cc:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <pattern_num>
            }
            else if(get_val=='D'){
 3d0:	08 95       	ret
 3d2:	84 34       	cpi	r24, 0x44	; 68
                pattern_num=0x04;
 3d4:	19 f4       	brne	.+6      	; 0x3dc <Tick_SM3+0x98>
 3d6:	84 e0       	ldi	r24, 0x04	; 4
 3d8:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <pattern_num>
 3dc:	08 95       	ret

000003de <Tick_SM2>:
    }
}
//STATE MACHINE TO OUTPUT ON LCD DISPLAY
enum SM2_States{Start2, WRITE_DISPLAY} state_SM2;
void Tick_SM2(){
    switch(state_SM2){
 3de:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <state_SM2>
 3e2:	88 23       	and	r24, r24
 3e4:	19 f0       	breq	.+6      	; 0x3ec <Tick_SM2+0xe>
 3e6:	81 30       	cpi	r24, 0x01	; 1
 3e8:	41 f0       	breq	.+16     	; 0x3fa <Tick_SM2+0x1c>
 3ea:	04 c0       	rjmp	.+8      	; 0x3f4 <Tick_SM2+0x16>
        case Start2:
            state_SM2=WRITE_DISPLAY;
 3ec:	81 e0       	ldi	r24, 0x01	; 1
 3ee:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <state_SM2>
            break;
 3f2:	03 c0       	rjmp	.+6      	; 0x3fa <Tick_SM2+0x1c>
            state_SM2=WRITE_DISPLAY;
            break;
         default:
         break;
    }
    switch(state_SM2)
 3f4:	81 30       	cpi	r24, 0x01	; 1
 3f6:	09 f0       	breq	.+2      	; 0x3fa <Tick_SM2+0x1c>
 3f8:	7f c0       	rjmp	.+254    	; 0x4f8 <__LOCK_REGION_LENGTH__+0xf8>
    {
        case WRITE_DISPLAY:
            if(prev_pattern_num!=pattern_num){
 3fa:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <pattern_num>
 3fe:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <prev_pattern_num>
 402:	98 17       	cp	r25, r24
 404:	81 f1       	breq	.+96     	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
                if(pattern_num==0x01)
 406:	81 30       	cpi	r24, 0x01	; 1
 408:	39 f4       	brne	.+14     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
                {
                    LCD_Cursor(6);
 40a:	86 e0       	ldi	r24, 0x06	; 6
                    LCD_WriteData('1');
 40c:	7c de       	rcall	.-776    	; 0x106 <LCD_Cursor>
                    LCD_Cursor(16);
 40e:	81 e3       	ldi	r24, 0x31	; 49
 410:	91 de       	rcall	.-734    	; 0x134 <LCD_WriteData>
 412:	80 e1       	ldi	r24, 0x10	; 16
                }
                else if(pattern_num==0x02)
                {
                    LCD_Cursor(6);
 414:	78 de       	rcall	.-784    	; 0x106 <LCD_Cursor>
                    LCD_WriteData('2');
 416:	1a c0       	rjmp	.+52     	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
 418:	82 30       	cpi	r24, 0x02	; 2
 41a:	39 f4       	brne	.+14     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
                    LCD_Cursor(16);
 41c:	86 e0       	ldi	r24, 0x06	; 6
 41e:	73 de       	rcall	.-794    	; 0x106 <LCD_Cursor>
                }
                else if(pattern_num==0x03)
 420:	82 e3       	ldi	r24, 0x32	; 50
                {
                    LCD_Cursor(6);
 422:	88 de       	rcall	.-752    	; 0x134 <LCD_WriteData>
 424:	80 e1       	ldi	r24, 0x10	; 16
 426:	6f de       	rcall	.-802    	; 0x106 <LCD_Cursor>
                    LCD_WriteData('3');
 428:	11 c0       	rjmp	.+34     	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
                    LCD_Cursor(16);
 42a:	83 30       	cpi	r24, 0x03	; 3
 42c:	39 f4       	brne	.+14     	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
                }
                else if(pattern_num==0x04)
 42e:	86 e0       	ldi	r24, 0x06	; 6
 430:	6a de       	rcall	.-812    	; 0x106 <LCD_Cursor>
                {
                    LCD_Cursor(6);
 432:	83 e3       	ldi	r24, 0x33	; 51
 434:	7f de       	rcall	.-770    	; 0x134 <LCD_WriteData>
 436:	80 e1       	ldi	r24, 0x10	; 16
                    LCD_WriteData('4');
 438:	66 de       	rcall	.-820    	; 0x106 <LCD_Cursor>
 43a:	08 c0       	rjmp	.+16     	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
 43c:	84 30       	cpi	r24, 0x04	; 4
                    LCD_Cursor(16);
 43e:	31 f4       	brne	.+12     	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
 440:	86 e0       	ldi	r24, 0x06	; 6
 442:	61 de       	rcall	.-830    	; 0x106 <LCD_Cursor>
                }
                prev_pattern_num=pattern_num;
 444:	84 e3       	ldi	r24, 0x34	; 52
 446:	76 de       	rcall	.-788    	; 0x134 <LCD_WriteData>
 448:	80 e1       	ldi	r24, 0x10	; 16
 44a:	5d de       	rcall	.-838    	; 0x106 <LCD_Cursor>
                send_value=(0x00|(speed_num<<4)|(pattern_num));
 44c:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <pattern_num>
 450:	20 93 02 01 	sts	0x0102, r18	; 0x800102 <prev_pattern_num>
 454:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <speed_num>
 458:	30 e1       	ldi	r19, 0x10	; 16
            }
            if(prev_speed_num!=speed_num){
 45a:	93 9f       	mul	r25, r19
 45c:	c0 01       	movw	r24, r0
 45e:	11 24       	eor	r1, r1
 460:	82 2b       	or	r24, r18
                if(speed_num==0x01)
                {
                    LCD_Cursor(12);
 462:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <__data_end>
                    LCD_WriteData('1');
 466:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <speed_num>
                    LCD_Cursor(16);
 46a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <prev_speed_num>
                }
                else if(speed_num==0x02)
 46e:	98 17       	cp	r25, r24
                {
                    LCD_Cursor(12);
 470:	09 f4       	brne	.+2      	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
 472:	42 c0       	rjmp	.+132    	; 0x4f8 <__LOCK_REGION_LENGTH__+0xf8>
 474:	81 30       	cpi	r24, 0x01	; 1
                    LCD_WriteData('2');
 476:	39 f4       	brne	.+14     	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
                    LCD_Cursor(16);
 478:	8c e0       	ldi	r24, 0x0C	; 12
 47a:	45 de       	rcall	.-886    	; 0x106 <LCD_Cursor>
                }
                else if(speed_num==0x03)
 47c:	81 e3       	ldi	r24, 0x31	; 49
 47e:	5a de       	rcall	.-844    	; 0x134 <LCD_WriteData>
                {
                    LCD_Cursor(12);
 480:	80 e1       	ldi	r24, 0x10	; 16
                    LCD_WriteData('3');
 482:	41 de       	rcall	.-894    	; 0x106 <LCD_Cursor>
                    LCD_Cursor(16);
 484:	2c c0       	rjmp	.+88     	; 0x4de <__LOCK_REGION_LENGTH__+0xde>
 486:	82 30       	cpi	r24, 0x02	; 2
 488:	39 f4       	brne	.+14     	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
                }
                else if(speed_num==0x04)
                {
                    LCD_Cursor(12);
 48a:	8c e0       	ldi	r24, 0x0C	; 12
                    LCD_WriteData('4');
 48c:	3c de       	rcall	.-904    	; 0x106 <LCD_Cursor>
 48e:	82 e3       	ldi	r24, 0x32	; 50
 490:	51 de       	rcall	.-862    	; 0x134 <LCD_WriteData>
                    LCD_Cursor(16);
 492:	80 e1       	ldi	r24, 0x10	; 16
 494:	38 de       	rcall	.-912    	; 0x106 <LCD_Cursor>
 496:	23 c0       	rjmp	.+70     	; 0x4de <__LOCK_REGION_LENGTH__+0xde>
 498:	83 30       	cpi	r24, 0x03	; 3
                }
                else if(speed_num==0x05)
 49a:	39 f4       	brne	.+14     	; 0x4aa <__LOCK_REGION_LENGTH__+0xaa>
 49c:	8c e0       	ldi	r24, 0x0C	; 12
                {
                    LCD_Cursor(12);
 49e:	33 de       	rcall	.-922    	; 0x106 <LCD_Cursor>
 4a0:	83 e3       	ldi	r24, 0x33	; 51
 4a2:	48 de       	rcall	.-880    	; 0x134 <LCD_WriteData>
                    LCD_WriteData('5');
 4a4:	80 e1       	ldi	r24, 0x10	; 16
 4a6:	2f de       	rcall	.-930    	; 0x106 <LCD_Cursor>
 4a8:	1a c0       	rjmp	.+52     	; 0x4de <__LOCK_REGION_LENGTH__+0xde>
                    LCD_Cursor(16);
 4aa:	84 30       	cpi	r24, 0x04	; 4
 4ac:	39 f4       	brne	.+14     	; 0x4bc <__LOCK_REGION_LENGTH__+0xbc>
 4ae:	8c e0       	ldi	r24, 0x0C	; 12
 4b0:	2a de       	rcall	.-940    	; 0x106 <LCD_Cursor>
                }
                else if(speed_num==0x06)
 4b2:	84 e3       	ldi	r24, 0x34	; 52
 4b4:	3f de       	rcall	.-898    	; 0x134 <LCD_WriteData>
                {
                    LCD_Cursor(12);
 4b6:	80 e1       	ldi	r24, 0x10	; 16
 4b8:	26 de       	rcall	.-948    	; 0x106 <LCD_Cursor>
 4ba:	11 c0       	rjmp	.+34     	; 0x4de <__LOCK_REGION_LENGTH__+0xde>
                    LCD_WriteData('6');
 4bc:	85 30       	cpi	r24, 0x05	; 5
 4be:	39 f4       	brne	.+14     	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
 4c0:	8c e0       	ldi	r24, 0x0C	; 12
                    LCD_Cursor(16);
 4c2:	21 de       	rcall	.-958    	; 0x106 <LCD_Cursor>
 4c4:	85 e3       	ldi	r24, 0x35	; 53
 4c6:	36 de       	rcall	.-916    	; 0x134 <LCD_WriteData>
                }                
                prev_speed_num=speed_num;
 4c8:	80 e1       	ldi	r24, 0x10	; 16
 4ca:	1d de       	rcall	.-966    	; 0x106 <LCD_Cursor>
 4cc:	08 c0       	rjmp	.+16     	; 0x4de <__LOCK_REGION_LENGTH__+0xde>
 4ce:	86 30       	cpi	r24, 0x06	; 6
                send_value=(0x00|(speed_num<<4)|(pattern_num));
 4d0:	31 f4       	brne	.+12     	; 0x4de <__LOCK_REGION_LENGTH__+0xde>
 4d2:	8c e0       	ldi	r24, 0x0C	; 12
 4d4:	18 de       	rcall	.-976    	; 0x106 <LCD_Cursor>
 4d6:	86 e3       	ldi	r24, 0x36	; 54
 4d8:	2d de       	rcall	.-934    	; 0x134 <LCD_WriteData>
 4da:	80 e1       	ldi	r24, 0x10	; 16
 4dc:	14 de       	rcall	.-984    	; 0x106 <LCD_Cursor>
 4de:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <speed_num>
 4e2:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <prev_speed_num>
 4e6:	20 e1       	ldi	r18, 0x10	; 16
 4e8:	82 9f       	mul	r24, r18
 4ea:	c0 01       	movw	r24, r0
 4ec:	11 24       	eor	r1, r1
 4ee:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <pattern_num>
 4f2:	89 2b       	or	r24, r25
 4f4:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <__data_end>
 4f8:	08 95       	ret

000004fa <Tick_SM4>:
            default:break;
    }
}
enum SM4_States {Start4, SPI_SEND} State_SM4;
void Tick_SM4(){
    switch (State_SM4)
 4fa:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <State_SM4>
 4fe:	88 23       	and	r24, r24
 500:	19 f0       	breq	.+6      	; 0x508 <Tick_SM4+0xe>
 502:	81 30       	cpi	r24, 0x01	; 1
 504:	39 f0       	breq	.+14     	; 0x514 <Tick_SM4+0x1a>
 506:	04 c0       	rjmp	.+8      	; 0x510 <Tick_SM4+0x16>
    {
        case Start4:
            State_SM4=SPI_SEND;
 508:	81 e0       	ldi	r24, 0x01	; 1
 50a:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <State_SM4>
            break;
 50e:	02 c0       	rjmp	.+4      	; 0x514 <Tick_SM4+0x1a>
        case SPI_SEND:
            State_SM4=SPI_SEND;
            break;
            default:break;
    }
    switch(State_SM4){
 510:	81 30       	cpi	r24, 0x01	; 1
 512:	59 f4       	brne	.+22     	; 0x52a <Tick_SM4+0x30>
        case SPI_SEND:
            if(send_value!=prev_send_val){
 514:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <__data_end>
 518:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__data_start>
 51c:	89 17       	cp	r24, r25
                SPI_Transmit(send_value);
 51e:	29 f0       	breq	.+10     	; 0x52a <Tick_SM4+0x30>
                prev_send_val=send_value;
 520:	09 df       	rcall	.-494    	; 0x334 <SPI_Transmit>
 522:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <__data_end>
 526:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 52a:	08 95       	ret

0000052c <main>:
        default:break;
    }
}
int main(void)
{
	DDRA = 0xF0;
 52c:	80 ef       	ldi	r24, 0xF0	; 240
 52e:	81 b9       	out	0x01, r24	; 1
	PORTA = 0x0F;
 530:	8f e0       	ldi	r24, 0x0F	; 15
 532:	82 b9       	out	0x02, r24	; 2
    DDRB=0xFF; PORTB=0x00;
 534:	8f ef       	ldi	r24, 0xFF	; 255
 536:	84 b9       	out	0x04, r24	; 4
 538:	15 b8       	out	0x05, r1	; 5
    DDRC=0xFF;PORTC=0x00;
 53a:	87 b9       	out	0x07, r24	; 7
 53c:	18 b8       	out	0x08, r1	; 8
    DDRD=0xFF; PORTD=0x00;
 53e:	8a b9       	out	0x0a, r24	; 10
    
    LCD_init();
 540:	1b b8       	out	0x0b, r1	; 11
    LCD_DisplayString(1,"Ptrn:1 Spd:1");
 542:	e9 dd       	rcall	.-1070   	; 0x116 <LCD_init>
 544:	69 e0       	ldi	r22, 0x09	; 9
 546:	71 e0       	ldi	r23, 0x01	; 1
    SPI_MasterInit();
 548:	81 e0       	ldi	r24, 0x01	; 1
 54a:	fd dd       	rcall	.-1030   	; 0x146 <LCD_DisplayString>
    //LCD_DisplayString(17,"uC:1");
    TimerSet(100);
 54c:	ee de       	rcall	.-548    	; 0x32a <SPI_MasterInit>
 54e:	64 e6       	ldi	r22, 0x64	; 100
 550:	70 e0       	ldi	r23, 0x00	; 0
 552:	80 e0       	ldi	r24, 0x00	; 0
    TimerOn();
 554:	90 e0       	ldi	r25, 0x00	; 0
 556:	6f de       	rcall	.-802    	; 0x236 <TimerSet>
    
    state_SM3 = Start3;
    state_SM2 = Start2;
    State_SM4=Start4;
 558:	0f de       	rcall	.-994    	; 0x178 <TimerOn>
 55a:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <state_SM3>
    while(1)
    {
        Tick_SM3();
 55e:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <state_SM2>
        Tick_SM2();
 562:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <State_SM4>
        Tick_SM4();
 566:	ee de       	rcall	.-548    	; 0x344 <Tick_SM3>
        while(!TimerFlag);
 568:	3a df       	rcall	.-396    	; 0x3de <Tick_SM2>
 56a:	c7 df       	rcall	.-114    	; 0x4fa <Tick_SM4>
 56c:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <TimerFlag>
        TimerFlag = 0;
 570:	88 23       	and	r24, r24
 572:	e1 f3       	breq	.-8      	; 0x56c <main+0x40>
    }
 574:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <TimerFlag>
 578:	f6 cf       	rjmp	.-20     	; 0x566 <main+0x3a>

0000057a <_exit>:
 57a:	f8 94       	cli

0000057c <__stop_program>:
 57c:	ff cf       	rjmp	.-2      	; 0x57c <__stop_program>
